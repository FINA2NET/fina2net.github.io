(function(global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('jquery'), require('popper.js')) :
        typeof define === 'function' && define.amd ? define(['jquery', 'popper.js'], factory) :
        (factory(global.jQuery, global.Popper));
}(this, (function($, Popper$1) {
    'use strict';

    $ = $ && $.hasOwnProperty('default') ? $['default'] : $;
    Popper$1 = Popper$1 && Popper$1.hasOwnProperty('default') ? Popper$1['default'] : Popper$1;

    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }

    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }

    function _extends() {
        _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];

                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }

            return target;
        };

        return _extends.apply(this, arguments);
    }

    function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
    }

    /**
     * --------------------------------------------------------------------------
     * Bootstrap (v4.0.0): util.js
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
     * --------------------------------------------------------------------------
     */

    var Util = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Private TransitionEnd Helpers
         * ------------------------------------------------------------------------
         */
        var transition = false;
        var MAX_UID = 1000000; // Shoutout AngusCroll (https://goo.gl/pxwQGp)

        function toType(obj) {
            return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
        }

        function getSpecialTransitionEndEvent() {
            return {
                bindType: transition.end,
                delegateType: transition.end,
                handle: function handle(event) {
                    if ($$$1(event.target).is(this)) {
                        return event.handleObj.handler.apply(this, arguments); // eslint-disable-line prefer-rest-params
                    }

                    return undefined; // eslint-disable-line no-undefined
                }
            };
        }

        function transitionEndTest() {
            if (typeof window !== 'undefined' && window.QUnit) {
                return false;
            }

            return {
                end: 'transitionend'
            };
        }

        function transitionEndEmulator(duration) {
            var _this = this;

            var called = false;
            $$$1(this).one(Util.TRANSITION_END, function() {
                called = true;
            });
            setTimeout(function() {
                if (!called) {
                    Util.triggerTransitionEnd(_this);
                }
            }, duration);
            return this;
        }

        function setTransitionEndSupport() {
            transition = transitionEndTest();
            $$$1.fn.emulateTransitionEnd = transitionEndEmulator;

            if (Util.supportsTransitionEnd()) {
                $$$1.event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();
            }
        }
        /**
         * --------------------------------------------------------------------------
         * Public Util Api
         * --------------------------------------------------------------------------
         */


        var Util = {
            TRANSITION_END: 'bsTransitionEnd',
            getUID: function getUID(prefix) {
                do {
                    // eslint-disable-next-line no-bitwise
                    prefix += ~~(Math.random() * MAX_UID); // "~~" acts like a faster Math.floor() here
                } while (document.getElementById(prefix));

                return prefix;
            },
            getSelectorFromElement: function getSelectorFromElement(element) {
                var selector = element.getAttribute('data-target');

                if (!selector || selector === '#') {
                    selector = element.getAttribute('href') || '';
                }

                try {
                    var $selector = $$$1(document).find(selector);
                    return $selector.length > 0 ? selector : null;
                } catch (err) {
                    return null;
                }
            },
            reflow: function reflow(element) {
                return element.offsetHeight;
            },
            triggerTransitionEnd: function triggerTransitionEnd(element) {
                $$$1(element).trigger(transition.end);
            },
            supportsTransitionEnd: function supportsTransitionEnd() {
                return Boolean(transition);
            },
            isElement: function isElement(obj) {
                return (obj[0] || obj).nodeType;
            },
            typeCheckConfig: function typeCheckConfig(componentName, config, configTypes) {
                for (var property in configTypes) {
                    if (Object.prototype.hasOwnProperty.call(configTypes, property)) {
                        var expectedTypes = configTypes[property];
                        var value = config[property];
                        var valueType = value && Util.isElement(value) ? 'element' : toType(value);

                        if (!new RegExp(expectedTypes).test(valueType)) {
                            throw new Error(componentName.toUpperCase() + ": " + ("Option \"" + property + "\" provided type \"" + valueType + "\" ") + ("but expected type \"" + expectedTypes + "\"."));
                        }
                    }
                }
            }
        };
        setTransitionEndSupport();
        return Util;
    }($);

    /**
     * --------------------------------------------------------------------------
     * Bootstrap (v4.0.0): alert.js
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
     * --------------------------------------------------------------------------
     */

    var Alert = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var NAME = 'alert';
        var VERSION = '4.0.0';
        var DATA_KEY = 'bs.alert';
        var EVENT_KEY = "." + DATA_KEY;
        var DATA_API_KEY = '.data-api';
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var TRANSITION_DURATION = 150;
        var Selector = {
            DISMISS: '[data-dismiss="alert"]'
        };
        var Event = {
            CLOSE: "close" + EVENT_KEY,
            CLOSED: "closed" + EVENT_KEY,
            CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            ALERT: 'alert',
            FADE: 'fade',
            SHOW: 'show'
            /**
             * ------------------------------------------------------------------------
             * Class Definition
             * ------------------------------------------------------------------------
             */

        };

        var Alert =
            /*#__PURE__*/
            function() {
                function Alert(element) {
                    this._element = element;
                } // Getters


                var _proto = Alert.prototype;

                // Public
                _proto.close = function close(element) {
                    element = element || this._element;

                    var rootElement = this._getRootElement(element);

                    var customEvent = this._triggerCloseEvent(rootElement);

                    if (customEvent.isDefaultPrevented()) {
                        return;
                    }

                    this._removeElement(rootElement);
                };

                _proto.dispose = function dispose() {
                    $$$1.removeData(this._element, DATA_KEY);
                    this._element = null;
                }; // Private


                _proto._getRootElement = function _getRootElement(element) {
                    var selector = Util.getSelectorFromElement(element);
                    var parent = false;

                    if (selector) {
                        parent = $$$1(selector)[0];
                    }

                    if (!parent) {
                        parent = $$$1(element).closest("." + ClassName.ALERT)[0];
                    }

                    return parent;
                };

                _proto._triggerCloseEvent = function _triggerCloseEvent(element) {
                    var closeEvent = $$$1.Event(Event.CLOSE);
                    $$$1(element).trigger(closeEvent);
                    return closeEvent;
                };

                _proto._removeElement = function _removeElement(element) {
                    var _this = this;

                    $$$1(element).removeClass(ClassName.SHOW);

                    if (!Util.supportsTransitionEnd() || !$$$1(element).hasClass(ClassName.FADE)) {
                        this._destroyElement(element);

                        return;
                    }

                    $$$1(element).one(Util.TRANSITION_END, function(event) {
                        return _this._destroyElement(element, event);
                    }).emulateTransitionEnd(TRANSITION_DURATION);
                };

                _proto._destroyElement = function _destroyElement(element) {
                    $$$1(element).detach().trigger(Event.CLOSED).remove();
                }; // Static


                Alert._jQueryInterface = function _jQueryInterface(config) {
                    return this.each(function() {
                        var $element = $$$1(this);
                        var data = $element.data(DATA_KEY);

                        if (!data) {
                            data = new Alert(this);
                            $element.data(DATA_KEY, data);
                        }

                        if (config === 'close') {
                            data[config](this);
                        }
                    });
                };

                Alert._handleDismiss = function _handleDismiss(alertInstance) {
                    return function(event) {
                        if (event) {
                            event.preventDefault();
                        }

                        alertInstance.close(this);
                    };
                };

                _createClass(Alert, null, [{
                    key: "VERSION",
                    get: function get() {
                        return VERSION;
                    }
                }]);

                return Alert;
            }();
        /**
         * ------------------------------------------------------------------------
         * Data Api implementation
         * ------------------------------------------------------------------------
         */


        $$$1(document).on(Event.CLICK_DATA_API, Selector.DISMISS, Alert._handleDismiss(new Alert()));
        /**
         * ------------------------------------------------------------------------
         * jQuery
         * ------------------------------------------------------------------------
         */

        $$$1.fn[NAME] = Alert._jQueryInterface;
        $$$1.fn[NAME].Constructor = Alert;

        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Alert._jQueryInterface;
        };

        return Alert;
    }($);

    /**
     * --------------------------------------------------------------------------
     * Bootstrap (v4.0.0): button.js
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
     * --------------------------------------------------------------------------
     */

    var Button = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var NAME = 'button';
        var VERSION = '4.0.0';
        var DATA_KEY = 'bs.button';
        var EVENT_KEY = "." + DATA_KEY;
        var DATA_API_KEY = '.data-api';
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var ClassName = {
            ACTIVE: 'active',
            BUTTON: 'btn',
            FOCUS: 'focus'
        };
        var Selector = {
            DATA_TOGGLE_CARROT: '[data-toggle^="button"]',
            DATA_TOGGLE: '[data-toggle="buttons"]',
            INPUT: 'input',
            ACTIVE: '.active',
            BUTTON: '.btn'
        };
        var Event = {
            CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY,
            FOCUS_BLUR_DATA_API: "focus" + EVENT_KEY + DATA_API_KEY + " " + ("blur" + EVENT_KEY + DATA_API_KEY)
            /**
             * ------------------------------------------------------------------------
             * Class Definition
             * ------------------------------------------------------------------------
             */

        };

        var Button =
            /*#__PURE__*/
            function() {
                function Button(element) {
                    this._element = element;
                } // Getters


                var _proto = Button.prototype;

                // Public
                _proto.toggle = function toggle() {
                    var triggerChangeEvent = true;
                    var addAriaPressed = true;
                    var rootElement = $$$1(this._element).closest(Selector.DATA_TOGGLE)[0];

                    if (rootElement) {
                        var input = $$$1(this._element).find(Selector.INPUT)[0];

                        if (input) {
                            if (input.type === 'radio') {
                                if (input.checked && $$$1(this._element).hasClass(ClassName.ACTIVE)) {
                                    triggerChangeEvent = false;
                                } else {
                                    var activeElement = $$$1(rootElement).find(Selector.ACTIVE)[0];

                                    if (activeElement) {
                                        $$$1(activeElement).removeClass(ClassName.ACTIVE);
                                    }
                                }
                            }

                            if (triggerChangeEvent) {
                                if (input.hasAttribute('disabled') || rootElement.hasAttribute('disabled') || input.classList.contains('disabled') || rootElement.classList.contains('disabled')) {
                                    return;
                                }

                                input.checked = !$$$1(this._element).hasClass(ClassName.ACTIVE);
                                $$$1(input).trigger('change');
                            }

                            input.focus();
                            addAriaPressed = false;
                        }
                    }

                    if (addAriaPressed) {
                        this._element.setAttribute('aria-pressed', !$$$1(this._element).hasClass(ClassName.ACTIVE));
                    }

                    if (triggerChangeEvent) {
                        $$$1(this._element).toggleClass(ClassName.ACTIVE);
                    }
                };

                _proto.dispose = function dispose() {
                    $$$1.removeData(this._element, DATA_KEY);
                    this._element = null;
                }; // Static


                Button._jQueryInterface = function _jQueryInterface(config) {
                    return this.each(function() {
                        var data = $$$1(this).data(DATA_KEY);

                        if (!data) {
                            data = new Button(this);
                            $$$1(this).data(DATA_KEY, data);
                        }

                        if (config === 'toggle') {
                            data[config]();
                        }
                    });
                };

                _createClass(Button, null, [{
                    key: "VERSION",
                    get: function get() {
                        return VERSION;
                    }
                }]);

                return Button;
            }();
        /**
         * ------------------------------------------------------------------------
         * Data Api implementation
         * ------------------------------------------------------------------------
         */


        $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE_CARROT, function(event) {
            event.preventDefault();
            var button = event.target;

            if (!$$$1(button).hasClass(ClassName.BUTTON)) {
                button = $$$1(button).closest(Selector.BUTTON);
            }

            Button._jQueryInterface.call($$$1(button), 'toggle');
        }).on(Event.FOCUS_BLUR_DATA_API, Selector.DATA_TOGGLE_CARROT, function(event) {
            var button = $$$1(event.target).closest(Selector.BUTTON)[0];
            $$$1(button).toggleClass(ClassName.FOCUS, /^focus(in)?$/.test(event.type));
        });
        /**
         * ------------------------------------------------------------------------
         * jQuery
         * ------------------------------------------------------------------------
         */

        $$$1.fn[NAME] = Button._jQueryInterface;
        $$$1.fn[NAME].Constructor = Button;

        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Button._jQueryInterface;
        };

        return Button;
    }($);

    /**
     * --------------------------------------------------------------------------
     * Bootstrap (v4.0.0-beta): carousel.js
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
     * --------------------------------------------------------------------------
     */

    var Carousel = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var NAME = 'carousel';
        var VERSION = '4.0.0-beta';
        var DATA_KEY = 'bs.carousel';
        var EVENT_KEY = "." + DATA_KEY;
        var DATA_API_KEY = '.data-api';
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var TRANSITION_DURATION = 600;
        var ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key

        var ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key

        var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

        var Default = {
            interval: 5000,
            keyboard: true,
            slide: false,
            pause: 'hover',
            wrap: true
        };
        var DefaultType = {
            interval: '(number|boolean)',
            keyboard: 'boolean',
            slide: '(boolean|string)',
            pause: '(string|boolean)',
            wrap: 'boolean'
        };
        var Direction = {
            NEXT: 'next',
            PREV: 'prev',
            LEFT: 'left',
            RIGHT: 'right'
        };
        var Event = {
            SLIDE: "slide" + EVENT_KEY,
            SLID: "slid" + EVENT_KEY,
            KEYDOWN: "keydown" + EVENT_KEY,
            MOUSEENTER: "mouseenter" + EVENT_KEY,
            MOUSELEAVE: "mouseleave" + EVENT_KEY,
            TOUCHEND: "touchend" + EVENT_KEY,
            LOAD_DATA_API: "load" + EVENT_KEY + DATA_API_KEY,
            CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            CAROUSEL: 'carousel',
            ACTIVE: 'active',
            SLIDE: 'slide',
            RIGHT: 'carousel-item-right',
            LEFT: 'carousel-item-left',
            NEXT: 'carousel-item-next',
            PREV: 'carousel-item-prev',
            ITEM: 'carousel-item'
        };
        var Selector = {
            ACTIVE: '.active',
            ACTIVE_ITEM: '.active.carousel-item',
            ITEM: '.carousel-item',
            NEXT_PREV: '.carousel-item-next, .carousel-item-prev',
            INDICATORS: '.carousel-indicators',
            DATA_SLIDE: '[data-slide], [data-slide-to]',
            DATA_RIDE: '[data-ride="carousel"]'
            /**
             * ------------------------------------------------------------------------
             * Class Definition
             * ------------------------------------------------------------------------
             */

        };

        var Carousel =
            /*#__PURE__*/
            function() {
                function Carousel(element, config) {
                    this._items = null;
                    this._interval = null;
                    this._activeElement = null;
                    this._isPaused = false;
                    this._isSliding = false;
                    this.touchTimeout = null;
                    this._config = this._getConfig(config);
                    this._element = $$$1(element)[0];
                    this._indicatorsElement = $$$1(this._element).find(Selector.INDICATORS)[0];

                    this._addEventListeners();
                } // getters


                var _proto = Carousel.prototype;

                // public
                _proto.next = function next() {
                    if (!this._isSliding) {
                        this._slide(Direction.NEXT);
                    }
                };

                _proto.nextWhenVisible = function nextWhenVisible() {
                    // Don't call next when the page isn't visible
                    if (!document.hidden) {
                        this.next();
                    }
                };

                _proto.prev = function prev() {
                    if (!this._isSliding) {
                        this._slide(Direction.PREV);
                    }
                };

                _proto.pause = function pause(event) {
                    if (!event) {
                        this._isPaused = true;
                    }

                    if ($$$1(this._element).find(Selector.NEXT_PREV)[0] && Util.supportsTransitionEnd()) {
                        Util.triggerTransitionEnd(this._element);
                        this.cycle(true);
                    }

                    clearInterval(this._interval);
                    this._interval = null;
                };

                _proto.cycle = function cycle(event) {
                    if (!event) {
                        this._isPaused = false;
                    }

                    if (this._interval) {
                        clearInterval(this._interval);
                        this._interval = null;
                    }

                    if (this._config.interval && !this._isPaused) {
                        this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
                    }
                };

                _proto.to = function to(index) {
                    var _this = this;

                    this._activeElement = $$$1(this._element).find(Selector.ACTIVE_ITEM)[0];

                    var activeIndex = this._getItemIndex(this._activeElement);

                    if (index > this._items.length - 1 || index < 0) {
                        return;
                    }

                    if (this._isSliding) {
                        $$$1(this._element).one(Event.SLID, function() {
                            return _this.to(index);
                        });
                        return;
                    }

                    if (activeIndex === index) {
                        this.pause();
                        this.cycle();
                        return;
                    }

                    var direction = index > activeIndex ? Direction.NEXT : Direction.PREV;

                    this._slide(direction, this._items[index]);
                };

                _proto.dispose = function dispose() {
                    $$$1(this._element).off(EVENT_KEY);
                    $$$1.removeData(this._element, DATA_KEY);
                    this._items = null;
                    this._config = null;
                    this._element = null;
                    this._interval = null;
                    this._isPaused = null;
                    this._isSliding = null;
                    this._activeElement = null;
                    this._indicatorsElement = null;
                }; // private


                _proto._getConfig = function _getConfig(config) {
                    config = $$$1.extend({}, Default, config);
                    Util.typeCheckConfig(NAME, config, DefaultType);
                    return config;
                };

                _proto._addEventListeners = function _addEventListeners() {
                    var _this2 = this;

                    if (this._config.keyboard) {
                        $$$1(this._element).on(Event.KEYDOWN, function(event) {
                            return _this2._keydown(event);
                        });
                    }

                    if (this._config.pause === 'hover') {
                        $$$1(this._element).on(Event.MOUSEENTER, function(event) {
                            return _this2.pause(event);
                        }).on(Event.MOUSELEAVE, function(event) {
                            return _this2.cycle(event);
                        });

                        if ('ontouchstart' in document.documentElement) {
                            // if it's a touch-enabled device, mouseenter/leave are fired as
                            // part of the mouse compatibility events on first tap - the carousel
                            // would stop cycling until user tapped out of it;
                            // here, we listen for touchend, explicitly pause the carousel
                            // (as if it's the second time we tap on it, mouseenter compat event
                            // is NOT fired) and after a timeout (to allow for mouse compatibility
                            // events to fire) we explicitly restart cycling
                            $$$1(this._element).on(Event.TOUCHEND, function() {
                                _this2.pause();

                                if (_this2.touchTimeout) {
                                    clearTimeout(_this2.touchTimeout);
                                }

                                _this2.touchTimeout = setTimeout(function(event) {
                                    return _this2.cycle(event);
                                }, TOUCHEVENT_COMPAT_WAIT + _this2._config.interval);
                            });
                        }
                    }
                };

                _proto._keydown = function _keydown(event) {
                    if (/input|textarea/i.test(event.target.tagName)) {
                        return;
                    }

                    switch (event.which) {
                        case ARROW_LEFT_KEYCODE:
                            event.preventDefault();
                            this.prev();
                            break;

                        case ARROW_RIGHT_KEYCODE:
                            event.preventDefault();
                            this.next();
                            break;

                        default:
                            return;
                    }
                };

                _proto._getItemIndex = function _getItemIndex(element) {
                    this._items = $$$1.makeArray($$$1(element).parent().find(Selector.ITEM));
                    return this._items.indexOf(element);
                };

                _proto._getItemByDirection = function _getItemByDirection(direction, activeElement) {
                    var isNextDirection = direction === Direction.NEXT;
                    var isPrevDirection = direction === Direction.PREV;

                    var activeIndex = this._getItemIndex(activeElement);

                    var lastItemIndex = this._items.length - 1;
                    var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;

                    if (isGoingToWrap && !this._config.wrap) {
                        return activeElement;
                    }

                    var delta = direction === Direction.PREV ? -1 : 1;
                    var itemIndex = (activeIndex + delta) % this._items.length;
                    return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];
                };

                _proto._triggerSlideEvent = function _triggerSlideEvent(relatedTarget, eventDirectionName) {
                    var targetIndex = this._getItemIndex(relatedTarget);

                    var fromIndex = this._getItemIndex($$$1(this._element).find(Selector.ACTIVE_ITEM)[0]);

                    var slideEvent = $$$1.Event(Event.SLIDE, {
                        relatedTarget: relatedTarget,
                        direction: eventDirectionName,
                        from: fromIndex,
                        to: targetIndex
                    });
                    $$$1(this._element).trigger(slideEvent);
                    return slideEvent;
                };

                _proto._setActiveIndicatorElement = function _setActiveIndicatorElement(element) {
                    if (this._indicatorsElement) {
                        $$$1(this._indicatorsElement).find(Selector.ACTIVE).removeClass(ClassName.ACTIVE);

                        var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];

                        if (nextIndicator) {
                            $$$1(nextIndicator).addClass(ClassName.ACTIVE);
                        }
                    }
                };

                _proto._slide = function _slide(direction, element) {
                    var _this3 = this;

                    var activeElement = $$$1(this._element).find(Selector.ACTIVE_ITEM)[0];

                    var activeElementIndex = this._getItemIndex(activeElement);

                    var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);

                    var nextElementIndex = this._getItemIndex(nextElement);

                    var isCycling = Boolean(this._interval);
                    var directionalClassName;
                    var orderClassName;
                    var eventDirectionName;

                    if (direction === Direction.NEXT) {
                        directionalClassName = ClassName.LEFT;
                        orderClassName = ClassName.NEXT;
                        eventDirectionName = Direction.LEFT;
                    } else {
                        directionalClassName = ClassName.RIGHT;
                        orderClassName = ClassName.PREV;
                        eventDirectionName = Direction.RIGHT;
                    }

                    if (nextElement && $$$1(nextElement).hasClass(ClassName.ACTIVE)) {
                        this._isSliding = false;
                        return;
                    }

                    var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);

                    if (slideEvent.isDefaultPrevented()) {
                        return;
                    }

                    if (!activeElement || !nextElement) {
                        // some weirdness is happening, so we bail
                        return;
                    }

                    this._isSliding = true;

                    if (isCycling) {
                        this.pause();
                    }

                    this._setActiveIndicatorElement(nextElement);

                    var slidEvent = $$$1.Event(Event.SLID, {
                        relatedTarget: nextElement,
                        direction: eventDirectionName,
                        from: activeElementIndex,
                        to: nextElementIndex
                    });

                    if (Util.supportsTransitionEnd() && $$$1(this._element).hasClass(ClassName.SLIDE)) {
                        $$$1(nextElement).addClass(orderClassName);
                        Util.reflow(nextElement);
                        $$$1(activeElement).addClass(directionalClassName);
                        $$$1(nextElement).addClass(directionalClassName);
                        $$$1(activeElement).one(Util.TRANSITION_END, function() {
                            $$$1(nextElement).removeClass(directionalClassName + " " + orderClassName).addClass(ClassName.ACTIVE);
                            $$$1(activeElement).removeClass(ClassName.ACTIVE + " " + orderClassName + " " + directionalClassName);
                            _this3._isSliding = false;
                            setTimeout(function() {
                                return $$$1(_this3._element).trigger(slidEvent);
                            }, 0);
                        }).emulateTransitionEnd(TRANSITION_DURATION);
                    } else {
                        $$$1(activeElement).removeClass(ClassName.ACTIVE);
                        $$$1(nextElement).addClass(ClassName.ACTIVE);
                        this._isSliding = false;
                        $$$1(this._element).trigger(slidEvent);
                    }

                    if (isCycling) {
                        this.cycle();
                    }
                }; // static


                Carousel._jQueryInterface = function _jQueryInterface(config) {
                    return this.each(function() {
                        var data = $$$1(this).data(DATA_KEY);

                        var _config = $$$1.extend({}, Default, $$$1(this).data());

                        if (typeof config === 'object') {
                            $$$1.extend(_config, config);
                        }

                        var action = typeof config === 'string' ? config : _config.slide;

                        if (!data) {
                            data = new Carousel(this, _config);
                            $$$1(this).data(DATA_KEY, data);
                        }

                        if (typeof config === 'number') {
                            data.to(config);
                        } else if (typeof action === 'string') {
                            if (data[action] === undefined) {
                                throw new Error("No method named \"" + action + "\"");
                            }

                            data[action]();
                        } else if (_config.interval) {
                            data.pause();
                            data.cycle();
                        }
                    });
                };

                Carousel._dataApiClickHandler = function _dataApiClickHandler(event) {
                    var selector = Util.getSelectorFromElement(this);

                    if (!selector) {
                        return;
                    }

                    var target = $$$1(selector)[0];

                    if (!target || !$$$1(target).hasClass(ClassName.CAROUSEL)) {
                        return;
                    }

                    var config = $$$1.extend({}, $$$1(target).data(), $$$1(this).data());
                    var slideIndex = this.getAttribute('data-slide-to');

                    if (slideIndex) {
                        config.interval = false;
                    }

                    Carousel._jQueryInterface.call($$$1(target), config);

                    if (slideIndex) {
                        $$$1(target).data(DATA_KEY).to(slideIndex);
                    }

                    event.preventDefault();
                };

                _createClass(Carousel, null, [{
                    key: "VERSION",
                    get: function get() {
                        return VERSION;
                    }
                }, {
                    key: "Default",
                    get: function get() {
                        return Default;
                    }
                }]);

                return Carousel;
            }();
        /**
         * ------------------------------------------------------------------------
         * Data Api implementation
         * ------------------------------------------------------------------------
         */


        $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_SLIDE, Carousel._dataApiClickHandler);
        $$$1(window).on(Event.LOAD_DATA_API, function() {
            $$$1(Selector.DATA_RIDE).each(function() {
                var $carousel = $$$1(this);

                Carousel._jQueryInterface.call($carousel, $carousel.data());
            });
        });
        /**
         * ------------------------------------------------------------------------
         * jQuery
         * ------------------------------------------------------------------------
         */

        $$$1.fn[NAME] = Carousel._jQueryInterface;
        $$$1.fn[NAME].Constructor = Carousel;

        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Carousel._jQueryInterface;
        };

        return Carousel;
    }(jQuery);

    /**
     * --------------------------------------------------------------------------
     * Bootstrap (v4.0.0): collapse.js
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
     * --------------------------------------------------------------------------
     */

    var Collapse = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var NAME = 'collapse';
        var VERSION = '4.0.0';
        var DATA_KEY = 'bs.collapse';
        var EVENT_KEY = "." + DATA_KEY;
        var DATA_API_KEY = '.data-api';
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var TRANSITION_DURATION = 600;
        var Default = {
            toggle: true,
            parent: ''
        };
        var DefaultType = {
            toggle: 'boolean',
            parent: '(string|element)'
        };
        var Event = {
            SHOW: "show" + EVENT_KEY,
            SHOWN: "shown" + EVENT_KEY,
            HIDE: "hide" + EVENT_KEY,
            HIDDEN: "hidden" + EVENT_KEY,
            CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            SHOW: 'show',
            COLLAPSE: 'collapse',
            COLLAPSING: 'collapsing',
            COLLAPSED: 'collapsed'
        };
        var Dimension = {
            WIDTH: 'width',
            HEIGHT: 'height'
        };
        var Selector = {
            ACTIVES: '.show, .collapsing',
            DATA_TOGGLE: '[data-toggle="collapse"]'
            /**
             * ------------------------------------------------------------------------
             * Class Definition
             * ------------------------------------------------------------------------
             */

        };

        var Collapse =
            /*#__PURE__*/
            function() {
                function Collapse(element, config) {
                    this._isTransitioning = false;
                    this._element = element;
                    this._config = this._getConfig(config);
                    this._triggerArray = $$$1.makeArray($$$1("[data-toggle=\"collapse\"][href=\"#" + element.id + "\"]," + ("[data-toggle=\"collapse\"][data-target=\"#" + element.id + "\"]")));
                    var tabToggles = $$$1(Selector.DATA_TOGGLE);

                    for (var i = 0; i < tabToggles.length; i++) {
                        var elem = tabToggles[i];
                        var selector = Util.getSelectorFromElement(elem);

                        if (selector !== null && $$$1(selector).filter(element).length > 0) {
                            this._selector = selector;

                            this._triggerArray.push(elem);
                        }
                    }

                    this._parent = this._config.parent ? this._getParent() : null;

                    if (!this._config.parent) {
                        this._addAriaAndCollapsedClass(this._element, this._triggerArray);
                    }

                    if (this._config.toggle) {
                        this.toggle();
                    }
                } // Getters


                var _proto = Collapse.prototype;

                // Public
                _proto.toggle = function toggle() {
                    if ($$$1(this._element).hasClass(ClassName.SHOW)) {
                        this.hide();
                    } else {
                        this.show();
                    }
                };

                _proto.show = function show() {
                    var _this = this;

                    if (this._isTransitioning || $$$1(this._element).hasClass(ClassName.SHOW)) {
                        return;
                    }

                    var actives;
                    var activesData;

                    if (this._parent) {
                        actives = $$$1.makeArray($$$1(this._parent).find(Selector.ACTIVES).filter("[data-parent=\"" + this._config.parent + "\"]"));

                        if (actives.length === 0) {
                            actives = null;
                        }
                    }

                    if (actives) {
                        activesData = $$$1(actives).not(this._selector).data(DATA_KEY);

                        if (activesData && activesData._isTransitioning) {
                            return;
                        }
                    }

                    var startEvent = $$$1.Event(Event.SHOW);
                    $$$1(this._element).trigger(startEvent);

                    if (startEvent.isDefaultPrevented()) {
                        return;
                    }

                    if (actives) {
                        Collapse._jQueryInterface.call($$$1(actives).not(this._selector), 'hide');

                        if (!activesData) {
                            $$$1(actives).data(DATA_KEY, null);
                        }
                    }

                    var dimension = this._getDimension();

                    $$$1(this._element).removeClass(ClassName.COLLAPSE).addClass(ClassName.COLLAPSING);
                    this._element.style[dimension] = 0;

                    if (this._triggerArray.length > 0) {
                        $$$1(this._triggerArray).removeClass(ClassName.COLLAPSED).attr('aria-expanded', true);
                    }

                    this.setTransitioning(true);

                    var complete = function complete() {
                        $$$1(_this._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).addClass(ClassName.SHOW);
                        _this._element.style[dimension] = '';

                        _this.setTransitioning(false);

                        $$$1(_this._element).trigger(Event.SHOWN);
                    };

                    if (!Util.supportsTransitionEnd()) {
                        complete();
                        return;
                    }

                    var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
                    var scrollSize = "scroll" + capitalizedDimension;
                    $$$1(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
                    this._element.style[dimension] = this._element[scrollSize] + "px";
                };

                _proto.hide = function hide() {
                    var _this2 = this;

                    if (this._isTransitioning || !$$$1(this._element).hasClass(ClassName.SHOW)) {
                        return;
                    }

                    var startEvent = $$$1.Event(Event.HIDE);
                    $$$1(this._element).trigger(startEvent);

                    if (startEvent.isDefaultPrevented()) {
                        return;
                    }

                    var dimension = this._getDimension();

                    this._element.style[dimension] = this._element.getBoundingClientRect()[dimension] + "px";
                    Util.reflow(this._element);
                    $$$1(this._element).addClass(ClassName.COLLAPSING).removeClass(ClassName.COLLAPSE).removeClass(ClassName.SHOW);

                    if (this._triggerArray.length > 0) {
                        for (var i = 0; i < this._triggerArray.length; i++) {
                            var trigger = this._triggerArray[i];
                            var selector = Util.getSelectorFromElement(trigger);

                            if (selector !== null) {
                                var $elem = $$$1(selector);

                                if (!$elem.hasClass(ClassName.SHOW)) {
                                    $$$1(trigger).addClass(ClassName.COLLAPSED).attr('aria-expanded', false);
                                }
                            }
                        }
                    }

                    this.setTransitioning(true);

                    var complete = function complete() {
                        _this2.setTransitioning(false);

                        $$$1(_this2._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).trigger(Event.HIDDEN);
                    };

                    this._element.style[dimension] = '';

                    if (!Util.supportsTransitionEnd()) {
                        complete();
                        return;
                    }

                    $$$1(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
                };

                _proto.setTransitioning = function setTransitioning(isTransitioning) {
                    this._isTransitioning = isTransitioning;
                };

                _proto.dispose = function dispose() {
                    $$$1.removeData(this._element, DATA_KEY);
                    this._config = null;
                    this._parent = null;
                    this._element = null;
                    this._triggerArray = null;
                    this._isTransitioning = null;
                }; // Private


                _proto._getConfig = function _getConfig(config) {
                    config = _extends({}, Default, config);
                    config.toggle = Boolean(config.toggle); // Coerce string values

                    Util.typeCheckConfig(NAME, config, DefaultType);
                    return config;
                };

                _proto._getDimension = function _getDimension() {
                    var hasWidth = $$$1(this._element).hasClass(Dimension.WIDTH);
                    return hasWidth ? Dimension.WIDTH : Dimension.HEIGHT;
                };

                _proto._getParent = function _getParent() {
                    var _this3 = this;

                    var parent = null;

                    if (Util.isElement(this._config.parent)) {
                        parent = this._config.parent; // It's a jQuery object

                        if (typeof this._config.parent.jquery !== 'undefined') {
                            parent = this._config.parent[0];
                        }
                    } else {
                        parent = $$$1(this._config.parent)[0];
                    }

                    var selector = "[data-toggle=\"collapse\"][data-parent=\"" + this._config.parent + "\"]";
                    $$$1(parent).find(selector).each(function(i, element) {
                        _this3._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);
                    });
                    return parent;
                };

                _proto._addAriaAndCollapsedClass = function _addAriaAndCollapsedClass(element, triggerArray) {
                    if (element) {
                        var isOpen = $$$1(element).hasClass(ClassName.SHOW);

                        if (triggerArray.length > 0) {
                            $$$1(triggerArray).toggleClass(ClassName.COLLAPSED, !isOpen).attr('aria-expanded', isOpen);
                        }
                    }
                }; // Static


                Collapse._getTargetFromElement = function _getTargetFromElement(element) {
                    var selector = Util.getSelectorFromElement(element);
                    return selector ? $$$1(selector)[0] : null;
                };

                Collapse._jQueryInterface = function _jQueryInterface(config) {
                    return this.each(function() {
                        var $this = $$$1(this);
                        var data = $this.data(DATA_KEY);

                        var _config = _extends({}, Default, $this.data(), typeof config === 'object' && config);

                        if (!data && _config.toggle && /show|hide/.test(config)) {
                            _config.toggle = false;
                        }

                        if (!data) {
                            data = new Collapse(this, _config);
                            $this.data(DATA_KEY, data);
                        }

                        if (typeof config === 'string') {
                            if (typeof data[config] === 'undefined') {
                                throw new TypeError("No method named \"" + config + "\"");
                            }

                            data[config]();
                        }
                    });
                };

                _createClass(Collapse, null, [{
                    key: "VERSION",
                    get: function get() {
                        return VERSION;
                    }
                }, {
                    key: "Default",
                    get: function get() {
                        return Default;
                    }
                }]);

                return Collapse;
            }();
        /**
         * ------------------------------------------------------------------------
         * Data Api implementation
         * ------------------------------------------------------------------------
         */


        $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function(event) {
            // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
            if (event.currentTarget.tagName === 'A') {
                event.preventDefault();
            }

            var $trigger = $$$1(this);
            var selector = Util.getSelectorFromElement(this);
            $$$1(selector).each(function() {
                var $target = $$$1(this);
                var data = $target.data(DATA_KEY);
                var config = data ? 'toggle' : $trigger.data();

                Collapse._jQueryInterface.call($target, config);
            });
        });
        /**
         * ------------------------------------------------------------------------
         * jQuery
         * ------------------------------------------------------------------------
         */

        $$$1.fn[NAME] = Collapse._jQueryInterface;
        $$$1.fn[NAME].Constructor = Collapse;

        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Collapse._jQueryInterface;
        };

        return Collapse;
    }($);

    /**
     * --------------------------------------------------------------------------
     * Bootstrap (v4.0.0): modal.js
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
     * --------------------------------------------------------------------------
     */

    var Modal = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var NAME = 'modal';
        var VERSION = '4.0.0';
        var DATA_KEY = 'bs.modal';
        var EVENT_KEY = "." + DATA_KEY;
        var DATA_API_KEY = '.data-api';
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var TRANSITION_DURATION = 300;
        var BACKDROP_TRANSITION_DURATION = 150;
        var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key

        var Default = {
            backdrop: true,
            keyboard: true,
            focus: true,
            show: true
        };
        var DefaultType = {
            backdrop: '(boolean|string)',
            keyboard: 'boolean',
            focus: 'boolean',
            show: 'boolean'
        };
        var Event = {
            HIDE: "hide" + EVENT_KEY,
            HIDDEN: "hidden" + EVENT_KEY,
            SHOW: "show" + EVENT_KEY,
            SHOWN: "shown" + EVENT_KEY,
            FOCUSIN: "focusin" + EVENT_KEY,
            RESIZE: "resize" + EVENT_KEY,
            CLICK_DISMISS: "click.dismiss" + EVENT_KEY,
            KEYDOWN_DISMISS: "keydown.dismiss" + EVENT_KEY,
            MOUSEUP_DISMISS: "mouseup.dismiss" + EVENT_KEY,
            MOUSEDOWN_DISMISS: "mousedown.dismiss" + EVENT_KEY,
            CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
            BACKDROP: 'modal-backdrop',
            OPEN: 'modal-open',
            FADE: 'fade',
            SHOW: 'show'
        };
        var Selector = {
            DIALOG: '.modal-dialog',
            DATA_TOGGLE: '[data-toggle="modal"]',
            DATA_DISMISS: '[data-dismiss="modal"]',
            FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',
            STICKY_CONTENT: '.sticky-top',
            NAVBAR_TOGGLER: '.navbar-toggler'
            /**
             * ------------------------------------------------------------------------
             * Class Definition
             * ------------------------------------------------------------------------
             */

        };

        var Modal =
            /*#__PURE__*/
            function() {
                function Modal(element, config) {
                    this._config = this._getConfig(config);
                    this._element = element;
                    this._dialog = $$$1(element).find(Selector.DIALOG)[0];
                    this._backdrop = null;
                    this._isShown = false;
                    this._isBodyOverflowing = false;
                    this._ignoreBackdropClick = false;
                    this._originalBodyPadding = 0;
                    this._scrollbarWidth = 0;
                } // Getters


                var _proto = Modal.prototype;

                // Public
                _proto.toggle = function toggle(relatedTarget) {
                    return this._isShown ? this.hide() : this.show(relatedTarget);
                };

                _proto.show = function show(relatedTarget) {
                    var _this = this;

                    if (this._isTransitioning || this._isShown) {
                        return;
                    }

                    if (Util.supportsTransitionEnd() && $$$1(this._element).hasClass(ClassName.FADE)) {
                        this._isTransitioning = true;
                    }

                    var showEvent = $$$1.Event(Event.SHOW, {
                        relatedTarget: relatedTarget
                    });
                    $$$1(this._element).trigger(showEvent);

                    if (this._isShown || showEvent.isDefaultPrevented()) {
                        return;
                    }

                    this._isShown = true;

                    this._checkScrollbar();

                    this._setScrollbar();

                    this._adjustDialog();

                    $$$1(document.body).addClass(ClassName.OPEN);

                    this._setEscapeEvent();

                    this._setResizeEvent();

                    $$$1(this._element).on(Event.CLICK_DISMISS, Selector.DATA_DISMISS, function(event) {
                        return _this.hide(event);
                    });
                    $$$1(this._dialog).on(Event.MOUSEDOWN_DISMISS, function() {
                        $$$1(_this._element).one(Event.MOUSEUP_DISMISS, function(event) {
                            if ($$$1(event.target).is(_this._element)) {
                                _this._ignoreBackdropClick = true;
                            }
                        });
                    });

                    this._showBackdrop(function() {
                        return _this._showElement(relatedTarget);
                    });
                };

                _proto.hide = function hide(event) {
                    var _this2 = this;

                    if (event) {
                        event.preventDefault();
                    }

                    if (this._isTransitioning || !this._isShown) {
                        return;
                    }

                    var hideEvent = $$$1.Event(Event.HIDE);
                    $$$1(this._element).trigger(hideEvent);

                    if (!this._isShown || hideEvent.isDefaultPrevented()) {
                        return;
                    }

                    this._isShown = false;
                    var transition = Util.supportsTransitionEnd() && $$$1(this._element).hasClass(ClassName.FADE);

                    if (transition) {
                        this._isTransitioning = true;
                    }

                    this._setEscapeEvent();

                    this._setResizeEvent();

                    $$$1(document).off(Event.FOCUSIN);
                    $$$1(this._element).removeClass(ClassName.SHOW);
                    $$$1(this._element).off(Event.CLICK_DISMISS);
                    $$$1(this._dialog).off(Event.MOUSEDOWN_DISMISS);

                    if (transition) {
                        $$$1(this._element).one(Util.TRANSITION_END, function(event) {
                            return _this2._hideModal(event);
                        }).emulateTransitionEnd(TRANSITION_DURATION);
                    } else {
                        this._hideModal();
                    }
                };

                _proto.dispose = function dispose() {
                    $$$1.removeData(this._element, DATA_KEY);
                    $$$1(window, document, this._element, this._backdrop).off(EVENT_KEY);
                    this._config = null;
                    this._element = null;
                    this._dialog = null;
                    this._backdrop = null;
                    this._isShown = null;
                    this._isBodyOverflowing = null;
                    this._ignoreBackdropClick = null;
                    this._scrollbarWidth = null;
                };

                _proto.handleUpdate = function handleUpdate() {
                    this._adjustDialog();
                }; // Private


                _proto._getConfig = function _getConfig(config) {
                    config = _extends({}, Default, config);
                    Util.typeCheckConfig(NAME, config, DefaultType);
                    return config;
                };

                _proto._showElement = function _showElement(relatedTarget) {
                    var _this3 = this;

                    var transition = Util.supportsTransitionEnd() && $$$1(this._element).hasClass(ClassName.FADE);

                    if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
                        // Don't move modal's DOM position
                        document.body.appendChild(this._element);
                    }

                    this._element.style.display = 'block';

                    this._element.removeAttribute('aria-hidden');

                    this._element.scrollTop = 0;

                    if (transition) {
                        Util.reflow(this._element);
                    }

                    $$$1(this._element).addClass(ClassName.SHOW);

                    if (this._config.focus) {
                        this._enforceFocus();
                    }

                    var shownEvent = $$$1.Event(Event.SHOWN, {
                        relatedTarget: relatedTarget
                    });

                    var transitionComplete = function transitionComplete() {
                        if (_this3._config.focus) {
                            _this3._element.focus();
                        }

                        _this3._isTransitioning = false;
                        $$$1(_this3._element).trigger(shownEvent);
                    };

                    if (transition) {
                        $$$1(this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(TRANSITION_DURATION);
                    } else {
                        transitionComplete();
                    }
                };

                _proto._enforceFocus = function _enforceFocus() {
                    var _this4 = this;

                    $$$1(document).off(Event.FOCUSIN) // Guard against infinite focus loop
                        .on(Event.FOCUSIN, function(event) {
                            if (document !== event.target && _this4._element !== event.target && $$$1(_this4._element).has(event.target).length === 0) {
                                _this4._element.focus();
                            }
                        });
                };

                _proto._setEscapeEvent = function _setEscapeEvent() {
                    var _this5 = this;

                    if (this._isShown && this._config.keyboard) {
                        $$$1(this._element).on(Event.KEYDOWN_DISMISS, function(event) {
                            if (event.which === ESCAPE_KEYCODE) {
                                event.preventDefault();

                                _this5.hide();
                            }
                        });
                    } else if (!this._isShown) {
                        $$$1(this._element).off(Event.KEYDOWN_DISMISS);
                    }
                };

                _proto._setResizeEvent = function _setResizeEvent() {
                    var _this6 = this;

                    if (this._isShown) {
                        $$$1(window).on(Event.RESIZE, function(event) {
                            return _this6.handleUpdate(event);
                        });
                    } else {
                        $$$1(window).off(Event.RESIZE);
                    }
                };

                _proto._hideModal = function _hideModal() {
                    var _this7 = this;

                    this._element.style.display = 'none';

                    this._element.setAttribute('aria-hidden', true);

                    this._isTransitioning = false;

                    this._showBackdrop(function() {
                        $$$1(document.body).removeClass(ClassName.OPEN);

                        _this7._resetAdjustments();

                        _this7._resetScrollbar();

                        $$$1(_this7._element).trigger(Event.HIDDEN);
                    });
                };

                _proto._removeBackdrop = function _removeBackdrop() {
                    if (this._backdrop) {
                        $$$1(this._backdrop).remove();
                        this._backdrop = null;
                    }
                };

                _proto._showBackdrop = function _showBackdrop(callback) {
                    var _this8 = this;

                    var animate = $$$1(this._element).hasClass(ClassName.FADE) ? ClassName.FADE : '';

                    if (this._isShown && this._config.backdrop) {
                        var doAnimate = Util.supportsTransitionEnd() && animate;
                        this._backdrop = document.createElement('div');
                        this._backdrop.className = ClassName.BACKDROP;

                        if (animate) {
                            $$$1(this._backdrop).addClass(animate);
                        }

                        $$$1(this._backdrop).appendTo(document.body);
                        $$$1(this._element).on(Event.CLICK_DISMISS, function(event) {
                            if (_this8._ignoreBackdropClick) {
                                _this8._ignoreBackdropClick = false;
                                return;
                            }

                            if (event.target !== event.currentTarget) {
                                return;
                            }

                            if (_this8._config.backdrop === 'static') {
                                _this8._element.focus();
                            } else {
                                _this8.hide();
                            }
                        });

                        if (doAnimate) {
                            Util.reflow(this._backdrop);
                        }

                        $$$1(this._backdrop).addClass(ClassName.SHOW);

                        if (!callback) {
                            return;
                        }

                        if (!doAnimate) {
                            callback();
                            return;
                        }

                        $$$1(this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(BACKDROP_TRANSITION_DURATION);
                    } else if (!this._isShown && this._backdrop) {
                        $$$1(this._backdrop).removeClass(ClassName.SHOW);

                        var callbackRemove = function callbackRemove() {
                            _this8._removeBackdrop();

                            if (callback) {
                                callback();
                            }
                        };

                        if (Util.supportsTransitionEnd() && $$$1(this._element).hasClass(ClassName.FADE)) {
                            $$$1(this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(BACKDROP_TRANSITION_DURATION);
                        } else {
                            callbackRemove();
                        }
                    } else if (callback) {
                        callback();
                    }
                }; // ----------------------------------------------------------------------
                // the following methods are used to handle overflowing modals
                // todo (fat): these should probably be refactored out of modal.js
                // ----------------------------------------------------------------------


                _proto._adjustDialog = function _adjustDialog() {
                    var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

                    if (!this._isBodyOverflowing && isModalOverflowing) {
                        this._element.style.paddingLeft = this._scrollbarWidth + "px";
                    }

                    if (this._isBodyOverflowing && !isModalOverflowing) {
                        this._element.style.paddingRight = this._scrollbarWidth + "px";
                    }
                };

                _proto._resetAdjustments = function _resetAdjustments() {
                    this._element.style.paddingLeft = '';
                    this._element.style.paddingRight = '';
                };

                _proto._checkScrollbar = function _checkScrollbar() {
                    var rect = document.body.getBoundingClientRect();
                    this._isBodyOverflowing = rect.left + rect.right < window.innerWidth;
                    this._scrollbarWidth = this._getScrollbarWidth();
                };

                _proto._setScrollbar = function _setScrollbar() {
                    var _this9 = this;

                    if (this._isBodyOverflowing) {
                        // Note: DOMNode.style.paddingRight returns the actual value or '' if not set
                        //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set
                        // Adjust fixed content padding
                        $$$1(Selector.FIXED_CONTENT).each(function(index, element) {
                            var actualPadding = $$$1(element)[0].style.paddingRight;
                            var calculatedPadding = $$$1(element).css('padding-right');
                            $$$1(element).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + _this9._scrollbarWidth + "px");
                        }); // Adjust sticky content margin

                        $$$1(Selector.STICKY_CONTENT).each(function(index, element) {
                            var actualMargin = $$$1(element)[0].style.marginRight;
                            var calculatedMargin = $$$1(element).css('margin-right');
                            $$$1(element).data('margin-right', actualMargin).css('margin-right', parseFloat(calculatedMargin) - _this9._scrollbarWidth + "px");
                        }); // Adjust navbar-toggler margin

                        $$$1(Selector.NAVBAR_TOGGLER).each(function(index, element) {
                            var actualMargin = $$$1(element)[0].style.marginRight;
                            var calculatedMargin = $$$1(element).css('margin-right');
                            $$$1(element).data('margin-right', actualMargin).css('margin-right', parseFloat(calculatedMargin) + _this9._scrollbarWidth + "px");
                        }); // Adjust body padding

                        var actualPadding = document.body.style.paddingRight;
                        var calculatedPadding = $$$1('body').css('padding-right');
                        $$$1('body').data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + this._scrollbarWidth + "px");
                    }
                };

                _proto._resetScrollbar = function _resetScrollbar() {
                    // Restore fixed content padding
                    $$$1(Selector.FIXED_CONTENT).each(function(index, element) {
                        var padding = $$$1(element).data('padding-right');

                        if (typeof padding !== 'undefined') {
                            $$$1(element).css('padding-right', padding).removeData('padding-right');
                        }
                    }); // Restore sticky content and navbar-toggler margin

                    $$$1(Selector.STICKY_CONTENT + ", " + Selector.NAVBAR_TOGGLER).each(function(index, element) {
                        var margin = $$$1(element).data('margin-right');

                        if (typeof margin !== 'undefined') {
                            $$$1(element).css('margin-right', margin).removeData('margin-right');
                        }
                    }); // Restore body padding

                    var padding = $$$1('body').data('padding-right');

                    if (typeof padding !== 'undefined') {
                        $$$1('body').css('padding-right', padding).removeData('padding-right');
                    }
                };

                _proto._getScrollbarWidth = function _getScrollbarWidth() {
                    // thx d.walsh
                    var scrollDiv = document.createElement('div');
                    scrollDiv.className = ClassName.SCROLLBAR_MEASURER;
                    document.body.appendChild(scrollDiv);
                    var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
                    document.body.removeChild(scrollDiv);
                    return scrollbarWidth;
                }; // Static


                Modal._jQueryInterface = function _jQueryInterface(config, relatedTarget) {
                    return this.each(function() {
                        var data = $$$1(this).data(DATA_KEY);

                        var _config = _extends({}, Modal.Default, $$$1(this).data(), typeof config === 'object' && config);

                        if (!data) {
                            data = new Modal(this, _config);
                            $$$1(this).data(DATA_KEY, data);
                        }

                        if (typeof config === 'string') {
                            if (typeof data[config] === 'undefined') {
                                throw new TypeError("No method named \"" + config + "\"");
                            }

                            data[config](relatedTarget);
                        } else if (_config.show) {
                            data.show(relatedTarget);
                        }
                    });
                };

                _createClass(Modal, null, [{
                    key: "VERSION",
                    get: function get() {
                        return VERSION;
                    }
                }, {
                    key: "Default",
                    get: function get() {
                        return Default;
                    }
                }]);

                return Modal;
            }();
        /**
         * ------------------------------------------------------------------------
         * Data Api implementation
         * ------------------------------------------------------------------------
         */


        $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function(event) {
            var _this10 = this;

            var target;
            var selector = Util.getSelectorFromElement(this);

            if (selector) {
                target = $$$1(selector)[0];
            }

            var config = $$$1(target).data(DATA_KEY) ? 'toggle' : _extends({}, $$$1(target).data(), $$$1(this).data());

            if (this.tagName === 'A' || this.tagName === 'AREA') {
                event.preventDefault();
            }

            var $target = $$$1(target).one(Event.SHOW, function(showEvent) {
                if (showEvent.isDefaultPrevented()) {
                    // Only register focus restorer if modal will actually get shown
                    return;
                }

                $target.one(Event.HIDDEN, function() {
                    if ($$$1(_this10).is(':visible')) {
                        _this10.focus();
                    }
                });
            });

            Modal._jQueryInterface.call($$$1(target), config, this);
        });
        /**
         * ------------------------------------------------------------------------
         * jQuery
         * ------------------------------------------------------------------------
         */

        $$$1.fn[NAME] = Modal._jQueryInterface;
        $$$1.fn[NAME].Constructor = Modal;

        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Modal._jQueryInterface;
        };

        return Modal;
    }($);

    /**
     * --------------------------------------------------------------------------
     * Bootstrap (v4.0.0): tooltip.js
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
     * --------------------------------------------------------------------------
     */

    var Tooltip = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var NAME = 'tooltip';
        var VERSION = '4.0.0';
        var DATA_KEY = 'bs.tooltip';
        var EVENT_KEY = "." + DATA_KEY;
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var TRANSITION_DURATION = 150;
        var CLASS_PREFIX = 'bs-tooltip';
        var BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)" + CLASS_PREFIX + "\\S+", 'g');
        var DefaultType = {
            animation: 'boolean',
            template: 'string',
            title: '(string|element|function)',
            trigger: 'string',
            delay: '(number|object)',
            html: 'boolean',
            selector: '(string|boolean)',
            placement: '(string|function)',
            offset: '(number|string)',
            container: '(string|element|boolean)',
            fallbackPlacement: '(string|array)',
            boundary: '(string|element)'
        };
        var AttachmentMap = {
            AUTO: 'auto',
            TOP: 'top',
            RIGHT: 'right',
            BOTTOM: 'bottom',
            LEFT: 'left'
        };
        var Default = {
            animation: true,
            template: '<div class="tooltip" role="tooltip">' + '<div class="arrow"></div>' + '<div class="tooltip-inner"></div></div>',
            trigger: 'hover focus',
            title: '',
            delay: 0,
            html: false,
            selector: false,
            placement: 'top',
            offset: 0,
            container: false,
            fallbackPlacement: 'flip',
            boundary: 'scrollParent'
        };
        var HoverState = {
            SHOW: 'show',
            OUT: 'out'
        };
        var Event = {
            HIDE: "hide" + EVENT_KEY,
            HIDDEN: "hidden" + EVENT_KEY,
            SHOW: "show" + EVENT_KEY,
            SHOWN: "shown" + EVENT_KEY,
            INSERTED: "inserted" + EVENT_KEY,
            CLICK: "click" + EVENT_KEY,
            FOCUSIN: "focusin" + EVENT_KEY,
            FOCUSOUT: "focusout" + EVENT_KEY,
            MOUSEENTER: "mouseenter" + EVENT_KEY,
            MOUSELEAVE: "mouseleave" + EVENT_KEY
        };
        var ClassName = {
            FADE: 'fade',
            SHOW: 'show'
        };
        var Selector = {
            TOOLTIP: '.tooltip',
            TOOLTIP_INNER: '.tooltip-inner',
            ARROW: '.arrow'
        };
        var Trigger = {
            HOVER: 'hover',
            FOCUS: 'focus',
            CLICK: 'click',
            MANUAL: 'manual'
            /**
             * ------------------------------------------------------------------------
             * Class Definition
             * ------------------------------------------------------------------------
             */

        };

        var Tooltip =
            /*#__PURE__*/
            function() {
                function Tooltip(element, config) {
                    /**
                     * Check for Popper dependency
                     * Popper - https://popper.js.org
                     */
                    if (typeof Popper$1 === 'undefined') {
                        throw new TypeError('Bootstrap tooltips require Popper.js (https://popper.js.org)');
                    } // private


                    this._isEnabled = true;
                    this._timeout = 0;
                    this._hoverState = '';
                    this._activeTrigger = {};
                    this._popper = null; // Protected

                    this.element = element;
                    this.config = this._getConfig(config);
                    this.tip = null;

                    this._setListeners();
                } // Getters


                var _proto = Tooltip.prototype;

                // Public
                _proto.enable = function enable() {
                    this._isEnabled = true;
                };

                _proto.disable = function disable() {
                    this._isEnabled = false;
                };

                _proto.toggleEnabled = function toggleEnabled() {
                    this._isEnabled = !this._isEnabled;
                };

                _proto.toggle = function toggle(event) {
                    if (!this._isEnabled) {
                        return;
                    }

                    if (event) {
                        var dataKey = this.constructor.DATA_KEY;
                        var context = $$$1(event.currentTarget).data(dataKey);

                        if (!context) {
                            context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                            $$$1(event.currentTarget).data(dataKey, context);
                        }

                        context._activeTrigger.click = !context._activeTrigger.click;

                        if (context._isWithActiveTrigger()) {
                            context._enter(null, context);
                        } else {
                            context._leave(null, context);
                        }
                    } else {
                        if ($$$1(this.getTipElement()).hasClass(ClassName.SHOW)) {
                            this._leave(null, this);

                            return;
                        }

                        this._enter(null, this);
                    }
                };

                _proto.dispose = function dispose() {
                    clearTimeout(this._timeout);
                    $$$1.removeData(this.element, this.constructor.DATA_KEY);
                    $$$1(this.element).off(this.constructor.EVENT_KEY);
                    $$$1(this.element).closest('.modal').off('hide.bs.modal');

                    if (this.tip) {
                        $$$1(this.tip).remove();
                    }

                    this._isEnabled = null;
                    this._timeout = null;
                    this._hoverState = null;
                    this._activeTrigger = null;

                    if (this._popper !== null) {
                        this._popper.destroy();
                    }

                    this._popper = null;
                    this.element = null;
                    this.config = null;
                    this.tip = null;
                };

                _proto.show = function show() {
                    var _this = this;

                    if ($$$1(this.element).css('display') === 'none') {
                        throw new Error('Please use show on visible elements');
                    }

                    var showEvent = $$$1.Event(this.constructor.Event.SHOW);

                    if (this.isWithContent() && this._isEnabled) {
                        $$$1(this.element).trigger(showEvent);
                        var isInTheDom = $$$1.contains(this.element.ownerDocument.documentElement, this.element);

                        if (showEvent.isDefaultPrevented() || !isInTheDom) {
                            return;
                        }

                        var tip = this.getTipElement();
                        var tipId = Util.getUID(this.constructor.NAME);
                        tip.setAttribute('id', tipId);
                        this.element.setAttribute('aria-describedby', tipId);
                        this.setContent();

                        if (this.config.animation) {
                            $$$1(tip).addClass(ClassName.FADE);
                        }

                        var placement = typeof this.config.placement === 'function' ? this.config.placement.call(this, tip, this.element) : this.config.placement;

                        var attachment = this._getAttachment(placement);

                        this.addAttachmentClass(attachment);
                        var container = this.config.container === false ? document.body : $$$1(this.config.container);
                        $$$1(tip).data(this.constructor.DATA_KEY, this);

                        if (!$$$1.contains(this.element.ownerDocument.documentElement, this.tip)) {
                            $$$1(tip).appendTo(container);
                        }

                        $$$1(this.element).trigger(this.constructor.Event.INSERTED);
                        this._popper = new Popper$1(this.element, tip, {
                            placement: attachment,
                            modifiers: {
                                offset: {
                                    offset: this.config.offset
                                },
                                flip: {
                                    behavior: this.config.fallbackPlacement
                                },
                                arrow: {
                                    element: Selector.ARROW
                                },
                                preventOverflow: {
                                    boundariesElement: this.config.boundary
                                }
                            },
                            onCreate: function onCreate(data) {
                                if (data.originalPlacement !== data.placement) {
                                    _this._handlePopperPlacementChange(data);
                                }
                            },
                            onUpdate: function onUpdate(data) {
                                _this._handlePopperPlacementChange(data);
                            }
                        });
                        $$$1(tip).addClass(ClassName.SHOW); // If this is a touch-enabled device we add extra
                        // empty mouseover listeners to the body's immediate children;
                        // only needed because of broken event delegation on iOS
                        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

                        if ('ontouchstart' in document.documentElement) {
                            $$$1('body').children().on('mouseover', null, $$$1.noop);
                        }

                        var complete = function complete() {
                            if (_this.config.animation) {
                                _this._fixTransition();
                            }

                            var prevHoverState = _this._hoverState;
                            _this._hoverState = null;
                            $$$1(_this.element).trigger(_this.constructor.Event.SHOWN);

                            if (prevHoverState === HoverState.OUT) {
                                _this._leave(null, _this);
                            }
                        };

                        if (Util.supportsTransitionEnd() && $$$1(this.tip).hasClass(ClassName.FADE)) {
                            $$$1(this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(Tooltip._TRANSITION_DURATION);
                        } else {
                            complete();
                        }
                    }
                };

                _proto.hide = function hide(callback) {
                    var _this2 = this;

                    var tip = this.getTipElement();
                    var hideEvent = $$$1.Event(this.constructor.Event.HIDE);

                    var complete = function complete() {
                        if (_this2._hoverState !== HoverState.SHOW && tip.parentNode) {
                            tip.parentNode.removeChild(tip);
                        }

                        _this2._cleanTipClass();

                        _this2.element.removeAttribute('aria-describedby');

                        $$$1(_this2.element).trigger(_this2.constructor.Event.HIDDEN);

                        if (_this2._popper !== null) {
                            _this2._popper.destroy();
                        }

                        if (callback) {
                            callback();
                        }
                    };

                    $$$1(this.element).trigger(hideEvent);

                    if (hideEvent.isDefaultPrevented()) {
                        return;
                    }

                    $$$1(tip).removeClass(ClassName.SHOW); // If this is a touch-enabled device we remove the extra
                    // empty mouseover listeners we added for iOS support

                    if ('ontouchstart' in document.documentElement) {
                        $$$1('body').children().off('mouseover', null, $$$1.noop);
                    }

                    this._activeTrigger[Trigger.CLICK] = false;
                    this._activeTrigger[Trigger.FOCUS] = false;
                    this._activeTrigger[Trigger.HOVER] = false;

                    if (Util.supportsTransitionEnd() && $$$1(this.tip).hasClass(ClassName.FADE)) {
                        $$$1(tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
                    } else {
                        complete();
                    }

                    this._hoverState = '';
                };

                _proto.update = function update() {
                    if (this._popper !== null) {
                        this._popper.scheduleUpdate();
                    }
                }; // Protected


                _proto.isWithContent = function isWithContent() {
                    return Boolean(this.getTitle());
                };

                _proto.addAttachmentClass = function addAttachmentClass(attachment) {
                    $$$1(this.getTipElement()).addClass(CLASS_PREFIX + "-" + attachment);
                };

                _proto.getTipElement = function getTipElement() {
                    this.tip = this.tip || $$$1(this.config.template)[0];
                    return this.tip;
                };

                _proto.setContent = function setContent() {
                    var $tip = $$$1(this.getTipElement());
                    this.setElementContent($tip.find(Selector.TOOLTIP_INNER), this.getTitle());
                    $tip.removeClass(ClassName.FADE + " " + ClassName.SHOW);
                };

                _proto.setElementContent = function setElementContent($element, content) {
                    var html = this.config.html;

                    if (typeof content === 'object' && (content.nodeType || content.jquery)) {
                        // Content is a DOM node or a jQuery
                        if (html) {
                            if (!$$$1(content).parent().is($element)) {
                                $element.empty().append(content);
                            }
                        } else {
                            $element.text($$$1(content).text());
                        }
                    } else {
                        $element[html ? 'html' : 'text'](content);
                    }
                };

                _proto.getTitle = function getTitle() {
                    var title = this.element.getAttribute('data-original-title');

                    if (!title) {
                        title = typeof this.config.title === 'function' ? this.config.title.call(this.element) : this.config.title;
                    }

                    return title;
                }; // Private


                _proto._getAttachment = function _getAttachment(placement) {
                    return AttachmentMap[placement.toUpperCase()];
                };

                _proto._setListeners = function _setListeners() {
                    var _this3 = this;

                    var triggers = this.config.trigger.split(' ');
                    triggers.forEach(function(trigger) {
                        if (trigger === 'click') {
                            $$$1(_this3.element).on(_this3.constructor.Event.CLICK, _this3.config.selector, function(event) {
                                return _this3.toggle(event);
                            });
                        } else if (trigger !== Trigger.MANUAL) {
                            var eventIn = trigger === Trigger.HOVER ? _this3.constructor.Event.MOUSEENTER : _this3.constructor.Event.FOCUSIN;
                            var eventOut = trigger === Trigger.HOVER ? _this3.constructor.Event.MOUSELEAVE : _this3.constructor.Event.FOCUSOUT;
                            $$$1(_this3.element).on(eventIn, _this3.config.selector, function(event) {
                                return _this3._enter(event);
                            }).on(eventOut, _this3.config.selector, function(event) {
                                return _this3._leave(event);
                            });
                        }

                        $$$1(_this3.element).closest('.modal').on('hide.bs.modal', function() {
                            return _this3.hide();
                        });
                    });

                    if (this.config.selector) {
                        this.config = _extends({}, this.config, {
                            trigger: 'manual',
                            selector: ''
                        });
                    } else {
                        this._fixTitle();
                    }
                };

                _proto._fixTitle = function _fixTitle() {
                    var titleType = typeof this.element.getAttribute('data-original-title');

                    if (this.element.getAttribute('title') || titleType !== 'string') {
                        this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');
                        this.element.setAttribute('title', '');
                    }
                };

                _proto._enter = function _enter(event, context) {
                    var dataKey = this.constructor.DATA_KEY;
                    context = context || $$$1(event.currentTarget).data(dataKey);

                    if (!context) {
                        context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                        $$$1(event.currentTarget).data(dataKey, context);
                    }

                    if (event) {
                        context._activeTrigger[event.type === 'focusin' ? Trigger.FOCUS : Trigger.HOVER] = true;
                    }

                    if ($$$1(context.getTipElement()).hasClass(ClassName.SHOW) || context._hoverState === HoverState.SHOW) {
                        context._hoverState = HoverState.SHOW;
                        return;
                    }

                    clearTimeout(context._timeout);
                    context._hoverState = HoverState.SHOW;

                    if (!context.config.delay || !context.config.delay.show) {
                        context.show();
                        return;
                    }

                    context._timeout = setTimeout(function() {
                        if (context._hoverState === HoverState.SHOW) {
                            context.show();
                        }
                    }, context.config.delay.show);
                };

                _proto._leave = function _leave(event, context) {
                    var dataKey = this.constructor.DATA_KEY;
                    context = context || $$$1(event.currentTarget).data(dataKey);

                    if (!context) {
                        context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                        $$$1(event.currentTarget).data(dataKey, context);
                    }

                    if (event) {
                        context._activeTrigger[event.type === 'focusout' ? Trigger.FOCUS : Trigger.HOVER] = false;
                    }

                    if (context._isWithActiveTrigger()) {
                        return;
                    }

                    clearTimeout(context._timeout);
                    context._hoverState = HoverState.OUT;

                    if (!context.config.delay || !context.config.delay.hide) {
                        context.hide();
                        return;
                    }

                    context._timeout = setTimeout(function() {
                        if (context._hoverState === HoverState.OUT) {
                            context.hide();
                        }
                    }, context.config.delay.hide);
                };

                _proto._isWithActiveTrigger = function _isWithActiveTrigger() {
                    for (var trigger in this._activeTrigger) {
                        if (this._activeTrigger[trigger]) {
                            return true;
                        }
                    }

                    return false;
                };

                _proto._getConfig = function _getConfig(config) {
                    config = _extends({}, this.constructor.Default, $$$1(this.element).data(), config);

                    if (typeof config.delay === 'number') {
                        config.delay = {
                            show: config.delay,
                            hide: config.delay
                        };
                    }

                    if (typeof config.title === 'number') {
                        config.title = config.title.toString();
                    }

                    if (typeof config.content === 'number') {
                        config.content = config.content.toString();
                    }

                    Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);
                    return config;
                };

                _proto._getDelegateConfig = function _getDelegateConfig() {
                    var config = {};

                    if (this.config) {
                        for (var key in this.config) {
                            if (this.constructor.Default[key] !== this.config[key]) {
                                config[key] = this.config[key];
                            }
                        }
                    }

                    return config;
                };

                _proto._cleanTipClass = function _cleanTipClass() {
                    var $tip = $$$1(this.getTipElement());
                    var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);

                    if (tabClass !== null && tabClass.length > 0) {
                        $tip.removeClass(tabClass.join(''));
                    }
                };

                _proto._handlePopperPlacementChange = function _handlePopperPlacementChange(data) {
                    this._cleanTipClass();

                    this.addAttachmentClass(this._getAttachment(data.placement));
                };

                _proto._fixTransition = function _fixTransition() {
                    var tip = this.getTipElement();
                    var initConfigAnimation = this.config.animation;

                    if (tip.getAttribute('x-placement') !== null) {
                        return;
                    }

                    $$$1(tip).removeClass(ClassName.FADE);
                    this.config.animation = false;
                    this.hide();
                    this.show();
                    this.config.animation = initConfigAnimation;
                }; // Static


                Tooltip._jQueryInterface = function _jQueryInterface(config) {
                    return this.each(function() {
                        var data = $$$1(this).data(DATA_KEY);

                        var _config = typeof config === 'object' && config;

                        if (!data && /dispose|hide/.test(config)) {
                            return;
                        }

                        if (!data) {
                            data = new Tooltip(this, _config);
                            $$$1(this).data(DATA_KEY, data);
                        }

                        if (typeof config === 'string') {
                            if (typeof data[config] === 'undefined') {
                                throw new TypeError("No method named \"" + config + "\"");
                            }

                            data[config]();
                        }
                    });
                };

                _createClass(Tooltip, null, [{
                    key: "VERSION",
                    get: function get() {
                        return VERSION;
                    }
                }, {
                    key: "Default",
                    get: function get() {
                        return Default;
                    }
                }, {
                    key: "NAME",
                    get: function get() {
                        return NAME;
                    }
                }, {
                    key: "DATA_KEY",
                    get: function get() {
                        return DATA_KEY;
                    }
                }, {
                    key: "Event",
                    get: function get() {
                        return Event;
                    }
                }, {
                    key: "EVENT_KEY",
                    get: function get() {
                        return EVENT_KEY;
                    }
                }, {
                    key: "DefaultType",
                    get: function get() {
                        return DefaultType;
                    }
                }]);

                return Tooltip;
            }();
        /**
         * ------------------------------------------------------------------------
         * jQuery
         * ------------------------------------------------------------------------
         */


        $$$1.fn[NAME] = Tooltip._jQueryInterface;
        $$$1.fn[NAME].Constructor = Tooltip;

        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Tooltip._jQueryInterface;
        };

        return Tooltip;
    }($, Popper$1);

    /**
     * --------------------------------------------------------------------------
     * Bootstrap (v4.0.0): popover.js
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
     * --------------------------------------------------------------------------
     */

    var Popover = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var NAME = 'popover';
        var VERSION = '4.0.0';
        var DATA_KEY = 'bs.popover';
        var EVENT_KEY = "." + DATA_KEY;
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var CLASS_PREFIX = 'bs-popover';
        var BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)" + CLASS_PREFIX + "\\S+", 'g');

        var Default = _extends({}, Tooltip.Default, {
            placement: 'right',
            trigger: 'click',
            content: '',
            template: '<div class="popover" role="tooltip">' + '<div class="arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div></div>'
        });

        var DefaultType = _extends({}, Tooltip.DefaultType, {
            content: '(string|element|function)'
        });

        var ClassName = {
            FADE: 'fade',
            SHOW: 'show'
        };
        var Selector = {
            TITLE: '.popover-header',
            CONTENT: '.popover-body'
        };
        var Event = {
            HIDE: "hide" + EVENT_KEY,
            HIDDEN: "hidden" + EVENT_KEY,
            SHOW: "show" + EVENT_KEY,
            SHOWN: "shown" + EVENT_KEY,
            INSERTED: "inserted" + EVENT_KEY,
            CLICK: "click" + EVENT_KEY,
            FOCUSIN: "focusin" + EVENT_KEY,
            FOCUSOUT: "focusout" + EVENT_KEY,
            MOUSEENTER: "mouseenter" + EVENT_KEY,
            MOUSELEAVE: "mouseleave" + EVENT_KEY
            /**
             * ------------------------------------------------------------------------
             * Class Definition
             * ------------------------------------------------------------------------
             */

        };

        var Popover =
            /*#__PURE__*/
            function(_Tooltip) {
                _inheritsLoose(Popover, _Tooltip);

                function Popover() {
                    return _Tooltip.apply(this, arguments) || this;
                }

                var _proto = Popover.prototype;

                // Overrides
                _proto.isWithContent = function isWithContent() {
                    return this.getTitle() || this._getContent();
                };

                _proto.addAttachmentClass = function addAttachmentClass(attachment) {
                    $$$1(this.getTipElement()).addClass(CLASS_PREFIX + "-" + attachment);
                };

                _proto.getTipElement = function getTipElement() {
                    this.tip = this.tip || $$$1(this.config.template)[0];
                    return this.tip;
                };

                _proto.setContent = function setContent() {
                    var $tip = $$$1(this.getTipElement()); // We use append for html objects to maintain js events

                    this.setElementContent($tip.find(Selector.TITLE), this.getTitle());

                    var content = this._getContent();

                    if (typeof content === 'function') {
                        content = content.call(this.element);
                    }

                    this.setElementContent($tip.find(Selector.CONTENT), content);
                    $tip.removeClass(ClassName.FADE + " " + ClassName.SHOW);
                }; // Private


                _proto._getContent = function _getContent() {
                    return this.element.getAttribute('data-content') || this.config.content;
                };

                _proto._cleanTipClass = function _cleanTipClass() {
                    var $tip = $$$1(this.getTipElement());
                    var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);

                    if (tabClass !== null && tabClass.length > 0) {
                        $tip.removeClass(tabClass.join(''));
                    }
                }; // Static


                Popover._jQueryInterface = function _jQueryInterface(config) {
                    return this.each(function() {
                        var data = $$$1(this).data(DATA_KEY);

                        var _config = typeof config === 'object' ? config : null;

                        if (!data && /destroy|hide/.test(config)) {
                            return;
                        }

                        if (!data) {
                            data = new Popover(this, _config);
                            $$$1(this).data(DATA_KEY, data);
                        }

                        if (typeof config === 'string') {
                            if (typeof data[config] === 'undefined') {
                                throw new TypeError("No method named \"" + config + "\"");
                            }

                            data[config]();
                        }
                    });
                };

                _createClass(Popover, null, [{
                    key: "VERSION",
                    // Getters
                    get: function get() {
                        return VERSION;
                    }
                }, {
                    key: "Default",
                    get: function get() {
                        return Default;
                    }
                }, {
                    key: "NAME",
                    get: function get() {
                        return NAME;
                    }
                }, {
                    key: "DATA_KEY",
                    get: function get() {
                        return DATA_KEY;
                    }
                }, {
                    key: "Event",
                    get: function get() {
                        return Event;
                    }
                }, {
                    key: "EVENT_KEY",
                    get: function get() {
                        return EVENT_KEY;
                    }
                }, {
                    key: "DefaultType",
                    get: function get() {
                        return DefaultType;
                    }
                }]);

                return Popover;
            }(Tooltip);
        /**
         * ------------------------------------------------------------------------
         * jQuery
         * ------------------------------------------------------------------------
         */


        $$$1.fn[NAME] = Popover._jQueryInterface;
        $$$1.fn[NAME].Constructor = Popover;

        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Popover._jQueryInterface;
        };

        return Popover;
    }($);

    /**
     * --------------------------------------------------------------------------
     * Bootstrap (v4.0.0): scrollspy.js
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
     * --------------------------------------------------------------------------
     */

    var ScrollSpy = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var NAME = 'scrollspy';
        var VERSION = '4.0.0';
        var DATA_KEY = 'bs.scrollspy';
        var EVENT_KEY = "." + DATA_KEY;
        var DATA_API_KEY = '.data-api';
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var Default = {
            offset: 10,
            method: 'auto',
            target: ''
        };
        var DefaultType = {
            offset: 'number',
            method: 'string',
            target: '(string|element)'
        };
        var Event = {
            ACTIVATE: "activate" + EVENT_KEY,
            SCROLL: "scroll" + EVENT_KEY,
            LOAD_DATA_API: "load" + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            DROPDOWN_ITEM: 'dropdown-item',
            DROPDOWN_MENU: 'dropdown-menu',
            ACTIVE: 'active'
        };
        var Selector = {
            DATA_SPY: '[data-spy="scroll"]',
            ACTIVE: '.active',
            NAV_LIST_GROUP: '.nav, .list-group',
            NAV_LINKS: '.nav-link',
            NAV_ITEMS: '.nav-item',
            LIST_ITEMS: '.list-group-item',
            DROPDOWN: '.dropdown',
            DROPDOWN_ITEMS: '.dropdown-item',
            DROPDOWN_TOGGLE: '.dropdown-toggle'
        };
        var OffsetMethod = {
            OFFSET: 'offset',
            POSITION: 'position'
            /**
             * ------------------------------------------------------------------------
             * Class Definition
             * ------------------------------------------------------------------------
             */

        };

        var ScrollSpy =
            /*#__PURE__*/
            function() {
                function ScrollSpy(element, config) {
                    var _this = this;

                    this._element = element;
                    this._scrollElement = element.tagName === 'BODY' ? window : element;
                    this._config = this._getConfig(config);
                    this._selector = this._config.target + " " + Selector.NAV_LINKS + "," + (this._config.target + " " + Selector.LIST_ITEMS + ",") + (this._config.target + " " + Selector.DROPDOWN_ITEMS);
                    this._offsets = [];
                    this._targets = [];
                    this._activeTarget = null;
                    this._scrollHeight = 0;
                    $$$1(this._scrollElement).on(Event.SCROLL, function(event) {
                        return _this._process(event);
                    });
                    this.refresh();

                    this._process();
                } // Getters


                var _proto = ScrollSpy.prototype;

                // Public
                _proto.refresh = function refresh() {
                    var _this2 = this;

                    var autoMethod = this._scrollElement === this._scrollElement.window ? OffsetMethod.OFFSET : OffsetMethod.POSITION;
                    var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;
                    var offsetBase = offsetMethod === OffsetMethod.POSITION ? this._getScrollTop() : 0;
                    this._offsets = [];
                    this._targets = [];
                    this._scrollHeight = this._getScrollHeight();
                    var targets = $$$1.makeArray($$$1(this._selector));
                    targets.map(function(element) {
                        var target;
                        var targetSelector = Util.getSelectorFromElement(element);

                        if (targetSelector) {
                            target = $$$1(targetSelector)[0];
                        }

                        if (target) {
                            var targetBCR = target.getBoundingClientRect();

                            if (targetBCR.width || targetBCR.height) {
                                // TODO (fat): remove sketch reliance on jQuery position/offset
                                return [$$$1(target)[offsetMethod]().top + offsetBase, targetSelector];
                            }
                        }

                        return null;
                    }).filter(function(item) {
                        return item;
                    }).sort(function(a, b) {
                        return a[0] - b[0];
                    }).forEach(function(item) {
                        _this2._offsets.push(item[0]);

                        _this2._targets.push(item[1]);
                    });
                };

                _proto.dispose = function dispose() {
                    $$$1.removeData(this._element, DATA_KEY);
                    $$$1(this._scrollElement).off(EVENT_KEY);
                    this._element = null;
                    this._scrollElement = null;
                    this._config = null;
                    this._selector = null;
                    this._offsets = null;
                    this._targets = null;
                    this._activeTarget = null;
                    this._scrollHeight = null;
                }; // Private


                _proto._getConfig = function _getConfig(config) {
                    config = _extends({}, Default, config);

                    if (typeof config.target !== 'string') {
                        var id = $$$1(config.target).attr('id');

                        if (!id) {
                            id = Util.getUID(NAME);
                            $$$1(config.target).attr('id', id);
                        }

                        config.target = "#" + id;
                    }

                    Util.typeCheckConfig(NAME, config, DefaultType);
                    return config;
                };

                _proto._getScrollTop = function _getScrollTop() {
                    return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
                };

                _proto._getScrollHeight = function _getScrollHeight() {
                    return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
                };

                _proto._getOffsetHeight = function _getOffsetHeight() {
                    return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
                };

                _proto._process = function _process() {
                    var scrollTop = this._getScrollTop() + this._config.offset;

                    var scrollHeight = this._getScrollHeight();

                    var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();

                    if (this._scrollHeight !== scrollHeight) {
                        this.refresh();
                    }

                    if (scrollTop >= maxScroll) {
                        var target = this._targets[this._targets.length - 1];

                        if (this._activeTarget !== target) {
                            this._activate(target);
                        }

                        return;
                    }

                    if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
                        this._activeTarget = null;

                        this._clear();

                        return;
                    }

                    for (var i = this._offsets.length; i--;) {
                        var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);

                        if (isActiveTarget) {
                            this._activate(this._targets[i]);
                        }
                    }
                };

                _proto._activate = function _activate(target) {
                    this._activeTarget = target;

                    this._clear();

                    var queries = this._selector.split(','); // eslint-disable-next-line arrow-body-style


                    queries = queries.map(function(selector) {
                        return selector + "[data-target=\"" + target + "\"]," + (selector + "[href=\"" + target + "\"]");
                    });
                    var $link = $$$1(queries.join(','));

                    if ($link.hasClass(ClassName.DROPDOWN_ITEM)) {
                        $link.closest(Selector.DROPDOWN).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);
                        $link.addClass(ClassName.ACTIVE);
                    } else {
                        // Set triggered link as active
                        $link.addClass(ClassName.ACTIVE); // Set triggered links parents as active
                        // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor

                        $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_LINKS + ", " + Selector.LIST_ITEMS).addClass(ClassName.ACTIVE); // Handle special case when .nav-link is inside .nav-item

                        $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_ITEMS).children(Selector.NAV_LINKS).addClass(ClassName.ACTIVE);
                    }

                    $$$1(this._scrollElement).trigger(Event.ACTIVATE, {
                        relatedTarget: target
                    });
                };

                _proto._clear = function _clear() {
                    $$$1(this._selector).filter(Selector.ACTIVE).removeClass(ClassName.ACTIVE);
                }; // Static


                ScrollSpy._jQueryInterface = function _jQueryInterface(config) {
                    return this.each(function() {
                        var data = $$$1(this).data(DATA_KEY);

                        var _config = typeof config === 'object' && config;

                        if (!data) {
                            data = new ScrollSpy(this, _config);
                            $$$1(this).data(DATA_KEY, data);
                        }

                        if (typeof config === 'string') {
                            if (typeof data[config] === 'undefined') {
                                throw new TypeError("No method named \"" + config + "\"");
                            }

                            data[config]();
                        }
                    });
                };

                _createClass(ScrollSpy, null, [{
                    key: "VERSION",
                    get: function get() {
                        return VERSION;
                    }
                }, {
                    key: "Default",
                    get: function get() {
                        return Default;
                    }
                }]);

                return ScrollSpy;
            }();
        /**
         * ------------------------------------------------------------------------
         * Data Api implementation
         * ------------------------------------------------------------------------
         */


        $$$1(window).on(Event.LOAD_DATA_API, function() {
            var scrollSpys = $$$1.makeArray($$$1(Selector.DATA_SPY));

            for (var i = scrollSpys.length; i--;) {
                var $spy = $$$1(scrollSpys[i]);

                ScrollSpy._jQueryInterface.call($spy, $spy.data());
            }
        });
        /**
         * ------------------------------------------------------------------------
         * jQuery
         * ------------------------------------------------------------------------
         */

        $$$1.fn[NAME] = ScrollSpy._jQueryInterface;
        $$$1.fn[NAME].Constructor = ScrollSpy;

        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return ScrollSpy._jQueryInterface;
        };

        return ScrollSpy;
    }($);

    /**
     * --------------------------------------------------------------------------
     * Bootstrap (v4.0.0): tab.js
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
     * --------------------------------------------------------------------------
     */

    var Tab = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var NAME = 'tab';
        var VERSION = '4.0.0';
        var DATA_KEY = 'bs.tab';
        var EVENT_KEY = "." + DATA_KEY;
        var DATA_API_KEY = '.data-api';
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var TRANSITION_DURATION = 150;
        var Event = {
            HIDE: "hide" + EVENT_KEY,
            HIDDEN: "hidden" + EVENT_KEY,
            SHOW: "show" + EVENT_KEY,
            SHOWN: "shown" + EVENT_KEY,
            CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            DROPDOWN_MENU: 'dropdown-menu',
            ACTIVE: 'active',
            DISABLED: 'disabled',
            FADE: 'fade',
            SHOW: 'show'
        };
        var Selector = {
            DROPDOWN: '.dropdown',
            NAV_LIST_GROUP: '.nav, .list-group',
            ACTIVE: '.active',
            ACTIVE_UL: '> li > .active',
            DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',
            DROPDOWN_TOGGLE: '.dropdown-toggle',
            DROPDOWN_ACTIVE_CHILD: '> .dropdown-menu .active'
            /**
             * ------------------------------------------------------------------------
             * Class Definition
             * ------------------------------------------------------------------------
             */

        };

        var Tab =
            /*#__PURE__*/
            function() {
                function Tab(element) {
                    this._element = element;
                } // Getters


                var _proto = Tab.prototype;

                // Public
                _proto.show = function show() {
                    var _this = this;

                    if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && $$$1(this._element).hasClass(ClassName.ACTIVE) || $$$1(this._element).hasClass(ClassName.DISABLED)) {
                        return;
                    }

                    var target;
                    var previous;
                    var listElement = $$$1(this._element).closest(Selector.NAV_LIST_GROUP)[0];
                    var selector = Util.getSelectorFromElement(this._element);

                    if (listElement) {
                        var itemSelector = listElement.nodeName === 'UL' ? Selector.ACTIVE_UL : Selector.ACTIVE;
                        previous = $$$1.makeArray($$$1(listElement).find(itemSelector));
                        previous = previous[previous.length - 1];
                    }

                    var hideEvent = $$$1.Event(Event.HIDE, {
                        relatedTarget: this._element
                    });
                    var showEvent = $$$1.Event(Event.SHOW, {
                        relatedTarget: previous
                    });

                    if (previous) {
                        $$$1(previous).trigger(hideEvent);
                    }

                    $$$1(this._element).trigger(showEvent);

                    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {
                        return;
                    }

                    if (selector) {
                        target = $$$1(selector)[0];
                    }

                    this._activate(this._element, listElement);

                    var complete = function complete() {
                        var hiddenEvent = $$$1.Event(Event.HIDDEN, {
                            relatedTarget: _this._element
                        });
                        var shownEvent = $$$1.Event(Event.SHOWN, {
                            relatedTarget: previous
                        });
                        $$$1(previous).trigger(hiddenEvent);
                        $$$1(_this._element).trigger(shownEvent);
                    };

                    if (target) {
                        this._activate(target, target.parentNode, complete);
                    } else {
                        complete();
                    }
                };

                _proto.dispose = function dispose() {
                    $$$1.removeData(this._element, DATA_KEY);
                    this._element = null;
                }; // Private


                _proto._activate = function _activate(element, container, callback) {
                    var _this2 = this;

                    var activeElements;

                    if (container.nodeName === 'UL') {
                        activeElements = $$$1(container).find(Selector.ACTIVE_UL);
                    } else {
                        activeElements = $$$1(container).children(Selector.ACTIVE);
                    }

                    var active = activeElements[0];
                    var isTransitioning = callback && Util.supportsTransitionEnd() && active && $$$1(active).hasClass(ClassName.FADE);

                    var complete = function complete() {
                        return _this2._transitionComplete(element, active, callback);
                    };

                    if (active && isTransitioning) {
                        $$$1(active).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
                    } else {
                        complete();
                    }
                };

                _proto._transitionComplete = function _transitionComplete(element, active, callback) {
                    if (active) {
                        $$$1(active).removeClass(ClassName.SHOW + " " + ClassName.ACTIVE);
                        var dropdownChild = $$$1(active.parentNode).find(Selector.DROPDOWN_ACTIVE_CHILD)[0];

                        if (dropdownChild) {
                            $$$1(dropdownChild).removeClass(ClassName.ACTIVE);
                        }

                        if (active.getAttribute('role') === 'tab') {
                            active.setAttribute('aria-selected', false);
                        }
                    }

                    $$$1(element).addClass(ClassName.ACTIVE);

                    if (element.getAttribute('role') === 'tab') {
                        element.setAttribute('aria-selected', true);
                    }

                    Util.reflow(element);
                    $$$1(element).addClass(ClassName.SHOW);

                    if (element.parentNode && $$$1(element.parentNode).hasClass(ClassName.DROPDOWN_MENU)) {
                        var dropdownElement = $$$1(element).closest(Selector.DROPDOWN)[0];

                        if (dropdownElement) {
                            $$$1(dropdownElement).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);
                        }

                        element.setAttribute('aria-expanded', true);
                    }

                    if (callback) {
                        callback();
                    }
                }; // Static


                Tab._jQueryInterface = function _jQueryInterface(config) {
                    return this.each(function() {
                        var $this = $$$1(this);
                        var data = $this.data(DATA_KEY);

                        if (!data) {
                            data = new Tab(this);
                            $this.data(DATA_KEY, data);
                        }

                        if (typeof config === 'string') {
                            if (typeof data[config] === 'undefined') {
                                throw new TypeError("No method named \"" + config + "\"");
                            }

                            data[config]();
                        }
                    });
                };

                _createClass(Tab, null, [{
                    key: "VERSION",
                    get: function get() {
                        return VERSION;
                    }
                }]);

                return Tab;
            }();
        /**
         * ------------------------------------------------------------------------
         * Data Api implementation
         * ------------------------------------------------------------------------
         */


        $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function(event) {
            event.preventDefault();

            Tab._jQueryInterface.call($$$1(this), 'show');
        });
        /**
         * ------------------------------------------------------------------------
         * jQuery
         * ------------------------------------------------------------------------
         */

        $$$1.fn[NAME] = Tab._jQueryInterface;
        $$$1.fn[NAME].Constructor = Tab;

        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Tab._jQueryInterface;
        };

        return Tab;
    }($);

    var Util$2 = function() {
        /**
         * ------------------------------------------------------------------------
         * Private TransitionEnd Helpers
         * ------------------------------------------------------------------------
         */
        var transitionEnd = false;
        var _transitionEndSelector = "";
        var TransitionEndEvent = {
            WebkitTransition: "webkitTransitionEnd",
            MozTransition: "transitionend",
            OTransition: "oTransitionEnd otransitionend",
            transition: "transitionend"
        };

        function transitionEndTest() {
            if (window.QUnit) {
                return false;
            }

            var el = document.createElement("bmd");

            for (var name in TransitionEndEvent) {
                if (el.style[name] !== undefined) {
                    return TransitionEndEvent[name]; // { end: TransitionEndEvent[name] }
                }
            }

            return false;
        }

        function setTransitionEndSupport() {
            transitionEnd = transitionEndTest(); // generate a concatenated transition end event selector

            for (var name in TransitionEndEvent) {
                _transitionEndSelector += " " + TransitionEndEvent[name];
            }
        }
        /**
         * --------------------------------------------------------------------------
         * Public Util Api
         * --------------------------------------------------------------------------
         */


        var Util = {
            transitionEndSupported: function transitionEndSupported() {
                return transitionEnd;
            },
            transitionEndSelector: function transitionEndSelector() {
                return _transitionEndSelector;
            },
            isChar: function isChar(event) {
                if (typeof event.which === "undefined") {
                    return true;
                } else if (typeof event.which === "number" && event.which > 0) {
                    return !event.ctrlKey && !event.metaKey && !event.altKey && event.which !== 8 && // backspace
                        event.which !== 9 && // tab
                        event.which !== 13 && // enter
                        event.which !== 16 && // shift
                        event.which !== 17 && // ctrl
                        event.which !== 20 && // caps lock
                        event.which !== 27 // escape
                    ;
                }

                return false;
            },
            assert: function assert($element, invalidTest, message) {
                if (invalidTest) {
                    if (!$element === undefined) {
                        $element.css("border", "1px solid red");
                    }

                    console.error(message, $element); // eslint-disable-line no-console

                    throw message;
                }
            },
            describe: function describe($element) {
                if ($element === undefined) {
                    return "undefined";
                } else if ($element.length === 0) {
                    return "(no matching elements)";
                }

                return $element[0].outerHTML.split(">")[0] + ">";
            }
        };
        setTransitionEndSupport();
        return Util;
    }(jQuery);

    var Base = function($$$1) {
        var ClassName = {
            BMD_FORM_GROUP: "bmd-form-group",
            IS_FILLED: "is-filled",
            IS_FOCUSED: "is-focused"
        };
        var Selector = {
            BMD_FORM_GROUP: "." + ClassName.BMD_FORM_GROUP
        };
        var Default = {};
        /**
         * ------------------------------------------------------------------------
         * Class Definition
         * ------------------------------------------------------------------------
         */

        var Base =
            /*#__PURE__*/
            function() {
                /**
                 *
                 * @param element
                 * @param config
                 * @param properties - anything that needs to be set as this[key] = value.  Works around the need to call `super` before using `this`
                 */
                function Base($element, config, properties) {
                    if (properties === void 0) {
                        properties = {};
                    }

                    this.$element = $element;
                    this.config = $$$1.extend(true, {}, Default, config); // set properties for use in the constructor initialization

                    for (var key in properties) {
                        this[key] = properties[key];
                    }
                }

                var _proto = Base.prototype;

                _proto.dispose = function dispose(dataKey) {
                    this.$element.data(dataKey, null);
                    this.$element = null;
                    this.config = null;
                }; // ------------------------------------------------------------------------
                // protected


                _proto.addFormGroupFocus = function addFormGroupFocus() {
                    if (!this.$element.prop("disabled")) {
                        this.$bmdFormGroup.addClass(ClassName.IS_FOCUSED);
                    }
                };

                _proto.removeFormGroupFocus = function removeFormGroupFocus() {
                    this.$bmdFormGroup.removeClass(ClassName.IS_FOCUSED);
                };

                _proto.removeIsFilled = function removeIsFilled() {
                    this.$bmdFormGroup.removeClass(ClassName.IS_FILLED);
                };

                _proto.addIsFilled = function addIsFilled() {
                    this.$bmdFormGroup.addClass(ClassName.IS_FILLED);
                }; // Find bmd-form-group


                _proto.findMdbFormGroup = function findMdbFormGroup(raiseError) {
                    if (raiseError === void 0) {
                        raiseError = true;
                    }

                    var mfg = this.$element.closest(Selector.BMD_FORM_GROUP);

                    if (mfg.length === 0 && raiseError) {
                        $$$1.error("Failed to find " + Selector.BMD_FORM_GROUP + " for " + Util$2.describe(this.$element));
                    }

                    return mfg;
                }; // ------------------------------------------------------------------------
                // private
                // ------------------------------------------------------------------------
                // static


                return Base;
            }();

        return Base;
    }(jQuery);

    var BaseInput = function($$$1) {
        var ClassName = {
            FORM_GROUP: "form-group",
            BMD_FORM_GROUP: "bmd-form-group",
            BMD_LABEL: "bmd-label",
            BMD_LABEL_STATIC: "bmd-label-static",
            BMD_LABEL_PLACEHOLDER: "bmd-label-placeholder",
            BMD_LABEL_FLOATING: "bmd-label-floating",
            HAS_DANGER: "has-danger",
            IS_FILLED: "is-filled",
            IS_FOCUSED: "is-focused",
            INPUT_GROUP: "input-group"
        };
        var Selector = {
            FORM_GROUP: "." + ClassName.FORM_GROUP,
            BMD_FORM_GROUP: "." + ClassName.BMD_FORM_GROUP,
            BMD_LABEL_WILDCARD: "label[class^='" + ClassName.BMD_LABEL + "'], label[class*=' " + ClassName.BMD_LABEL + "']" // match any label variant if specified

        };
        var Default = {
            validate: false,
            formGroup: {
                required: false
            },
            bmdFormGroup: {
                template: "<span class='" + ClassName.BMD_FORM_GROUP + "'></span>",
                create: true,
                // create a wrapper if form-group not found
                required: true // not recommended to turn this off, only used for inline components

            },
            label: {
                required: false,
                // Prioritized find order for resolving the label to be used as an bmd-label if not specified in the markup
                //  - a function(thisComponent); or
                //  - a string selector used like $bmdFormGroup.find(selector)
                //
                // Note this only runs if $bmdFormGroup.find(Selector.BMD_LABEL_WILDCARD) fails to find a label (as authored in the markup)
                //
                selectors: [".form-control-label", // in the case of horizontal or inline forms, this will be marked
                    "> label" // usual case for text inputs, first child.  Deeper would find toggle labels so don't do that.
                ],
                className: ClassName.BMD_LABEL_STATIC
            },
            requiredClasses: [],
            invalidComponentMatches: [],
            convertInputSizeVariations: true
        };
        var FormControlSizeMarkers = {
            "form-control-lg": "bmd-form-group-lg",
            "form-control-sm": "bmd-form-group-sm"
        };
        /**
         * ------------------------------------------------------------------------
         * Class Definition
         * ------------------------------------------------------------------------
         */

        var BaseInput =
            /*#__PURE__*/
            function(_Base) {
                _inheritsLoose(BaseInput, _Base);

                /**
                 *
                 * @param element
                 * @param config
                 * @param properties - anything that needs to be set as this[key] = value.  Works around the need to call `super` before using `this`
                 */
                function BaseInput($element, config, properties) {
                    var _this;

                    if (properties === void 0) {
                        properties = {};
                    }

                    _this = _Base.call(this, $element, $$$1.extend(true, {}, Default, config), properties) || this; // Enforce no overlap between components to prevent side effects

                    _this._rejectInvalidComponentMatches(); // Enforce expected structure (if any)


                    _this.rejectWithoutRequiredStructure(); // Enforce required classes for a consistent rendering


                    _this._rejectWithoutRequiredClasses(); // Resolve the form-group first, it will be used for bmd-form-group if possible
                    //   note: different components have different rules


                    _this.$formGroup = _this.findFormGroup(_this.config.formGroup.required); // Will add bmd-form-group to form-group or create an bmd-form-group
                    //  Performance Note: for those forms that are really performance driven, create the markup with the .bmd-form-group to avoid
                    //    rendering changes once added.

                    _this.$bmdFormGroup = _this.resolveMdbFormGroup(); // Resolve and mark the bmdLabel if necessary as defined by the config

                    _this.$bmdLabel = _this.resolveMdbLabel(); // Signal to the bmd-form-group that a form-control-* variation is being used

                    _this.resolveMdbFormGroupSizing();

                    _this.addFocusListener();

                    _this.addChangeListener();

                    if (_this.$element.val() != "") {
                        _this.addIsFilled();
                    }

                    return _this;
                }

                var _proto = BaseInput.prototype;

                _proto.dispose = function dispose(dataKey) {
                    _Base.prototype.dispose.call(this, dataKey);

                    this.$bmdFormGroup = null;
                    this.$formGroup = null;
                }; // ------------------------------------------------------------------------
                // protected


                _proto.rejectWithoutRequiredStructure = function rejectWithoutRequiredStructure() { // implement
                };

                _proto.addFocusListener = function addFocusListener() {
                    var _this2 = this;

                    this.$element.on("focus", function() {
                        _this2.addFormGroupFocus();
                    }).on("blur", function() {
                        _this2.removeFormGroupFocus();
                    });
                };

                _proto.addChangeListener = function addChangeListener() {
                    var _this3 = this;

                    this.$element.on("keydown paste", function(event) {
                        if (Util$2.isChar(event)) {
                            _this3.addIsFilled();
                        }
                    }).on("keyup change", function() {
                        // make sure empty is added back when there is a programmatic value change.
                        //  NOTE: programmatic changing of value using $.val() must trigger the change event i.e. $.val('x').trigger('change')
                        if (_this3.isEmpty()) {
                            _this3.removeIsFilled();
                        } else {
                            _this3.addIsFilled();
                        }

                        if (_this3.config.validate) {
                            // Validation events do not bubble, so they must be attached directly to the text: http://jsfiddle.net/PEpRM/1/
                            //  Further, even the bind method is being caught, but since we are already calling #checkValidity here, just alter
                            //  the form-group on change.
                            //
                            // NOTE: I'm not sure we should be intervening regarding validation, this seems better as a README and snippet of code.
                            //        BUT, I've left it here for backwards compatibility.
                            var isValid = typeof _this3.$element[0].checkValidity === "undefined" || _this3.$element[0].checkValidity();

                            if (isValid) {
                                _this3.removeHasDanger();
                            } else {
                                _this3.addHasDanger();
                            }
                        }
                    });
                };

                _proto.addHasDanger = function addHasDanger() {
                    this.$bmdFormGroup.addClass(ClassName.HAS_DANGER);
                };

                _proto.removeHasDanger = function removeHasDanger() {
                    this.$bmdFormGroup.removeClass(ClassName.HAS_DANGER);
                };

                _proto.isEmpty = function isEmpty() {
                    return this.$element.val() === null || this.$element.val() === undefined || this.$element.val() === "";
                }; // Will add bmd-form-group to form-group or create a bmd-form-group if necessary


                _proto.resolveMdbFormGroup = function resolveMdbFormGroup() {
                    var mfg = this.findMdbFormGroup(false);

                    if (mfg === undefined || mfg.length === 0) {
                        if (this.config.bmdFormGroup.create && (this.$formGroup === undefined || this.$formGroup.length === 0)) {
                            // If a form-group doesn't exist (not recommended), take a guess and wrap the element (assuming no label).
                            //  note: it's possible to make this smarter, but I need to see valid cases before adding any complexity.
                            // this may be an input-group, wrap that instead
                            if (this.outerElement().parent().hasClass(ClassName.INPUT_GROUP)) {
                                this.outerElement().parent().wrap(this.config.bmdFormGroup.template);
                            } else {
                                this.outerElement().wrap(this.config.bmdFormGroup.template);
                            }
                        } else {
                            // a form-group does exist, add our marker class to it
                            this.$formGroup.addClass(ClassName.BMD_FORM_GROUP); // OLD: may want to implement this after all, see how the styling turns out, but using an existing form-group is less manipulation of the dom and therefore preferable
                            // A form-group does exist, so add an bmd-form-group wrapping it's internal contents
                            //fg.wrapInner(this.config.bmdFormGroup.template)
                        }

                        mfg = this.findMdbFormGroup(this.config.bmdFormGroup.required);
                    }

                    return mfg;
                }; // Demarcation element (e.g. first child of a form-group)
                //  Subclasses such as file inputs may have different structures


                _proto.outerElement = function outerElement() {
                    return this.$element;
                }; // Will add bmd-label to bmd-form-group if not already specified


                _proto.resolveMdbLabel = function resolveMdbLabel() {
                    var label = this.$bmdFormGroup.find(Selector.BMD_LABEL_WILDCARD);

                    if (label === undefined || label.length === 0) {
                        // we need to find it based on the configured selectors
                        label = this.findMdbLabel(this.config.label.required);

                        if (label === undefined || label.length === 0) { // no label found, and finder did not require one
                        } else {
                            // a candidate label was found, add the configured default class name
                            label.addClass(this.config.label.className);
                        }
                    }

                    return label;
                }; // Find bmd-label variant based on the config selectors


                _proto.findMdbLabel = function findMdbLabel(raiseError) {
                    if (raiseError === void 0) {
                        raiseError = true;
                    }

                    var label = null; // use the specified selector order

                    for (var _iterator = this.config.label.selectors, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                        var _ref;

                        if (_isArray) {
                            if (_i >= _iterator.length) break;
                            _ref = _iterator[_i++];
                        } else {
                            _i = _iterator.next();
                            if (_i.done) break;
                            _ref = _i.value;
                        }

                        var _selector = _ref;

                        if ($$$1.isFunction(_selector)) {
                            label = _selector(this);
                        } else {
                            label = this.$bmdFormGroup.find(_selector);
                        }

                        if (label !== undefined && label.length > 0) {
                            break;
                        }
                    }

                    if (label.length === 0 && raiseError) {
                        $$$1.error("Failed to find " + Selector.BMD_LABEL_WILDCARD + " within form-group for " + Util$2.describe(this.$element));
                    }

                    return label;
                }; // Find bmd-form-group


                _proto.findFormGroup = function findFormGroup(raiseError) {
                    if (raiseError === void 0) {
                        raiseError = true;
                    }

                    var fg = this.$element.closest(Selector.FORM_GROUP);

                    if (fg.length === 0 && raiseError) {
                        $$$1.error("Failed to find " + Selector.FORM_GROUP + " for " + Util$2.describe(this.$element));
                    }

                    return fg;
                }; // Due to the interconnected nature of labels/inputs/help-blocks, signal the bmd-form-group-* size variation based on
                //  a found form-control-* size


                _proto.resolveMdbFormGroupSizing = function resolveMdbFormGroupSizing() {
                    if (!this.config.convertInputSizeVariations) {
                        return;
                    } // Modification - Change text-sm/lg to form-group-sm/lg instead (preferred standard and simpler css/less variants)


                    for (var inputSize in FormControlSizeMarkers) {
                        if (this.$element.hasClass(inputSize)) {
                            //this.$element.removeClass(inputSize)
                            this.$bmdFormGroup.addClass(FormControlSizeMarkers[inputSize]);
                        }
                    }
                }; // ------------------------------------------------------------------------
                // private


                _proto._rejectInvalidComponentMatches = function _rejectInvalidComponentMatches() {
                    for (var _iterator2 = this.config.invalidComponentMatches, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                        var _ref2;

                        if (_isArray2) {
                            if (_i2 >= _iterator2.length) break;
                            _ref2 = _iterator2[_i2++];
                        } else {
                            _i2 = _iterator2.next();
                            if (_i2.done) break;
                            _ref2 = _i2.value;
                        }

                        var _otherComponent = _ref2;

                        _otherComponent.rejectMatch(this.constructor.name, this.$element);
                    }
                };

                _proto._rejectWithoutRequiredClasses = function _rejectWithoutRequiredClasses() {
                    for (var _iterator3 = this.config.requiredClasses, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                        var _ref3;

                        if (_isArray3) {
                            if (_i3 >= _iterator3.length) break;
                            _ref3 = _iterator3[_i3++];
                        } else {
                            _i3 = _iterator3.next();
                            if (_i3.done) break;
                            _ref3 = _i3.value;
                        }

                        var _requiredClass = _ref3;
                        var found = false; // allow one of several classes to be passed in x||y

                        if (_requiredClass.indexOf("||") !== -1) {
                            var oneOf = _requiredClass.split("||");

                            for (var _iterator4 = oneOf, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
                                var _ref4;

                                if (_isArray4) {
                                    if (_i4 >= _iterator4.length) break;
                                    _ref4 = _iterator4[_i4++];
                                } else {
                                    _i4 = _iterator4.next();
                                    if (_i4.done) break;
                                    _ref4 = _i4.value;
                                }

                                var _requiredClass3 = _ref4;

                                if (this.$element.hasClass(_requiredClass3)) {
                                    found = true;
                                    break;
                                }
                            }
                        } else if (this.$element.hasClass(_requiredClass)) {
                            found = true;
                        } // error if not found


                        if (!found) {
                            $$$1.error(this.constructor.name + " element: " + Util$2.describe(this.$element) + " requires class: " + _requiredClass);
                        }
                    }
                }; // ------------------------------------------------------------------------
                // static


                return BaseInput;
            }(Base);

        return BaseInput;
    }(jQuery);

    var BaseSelection = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var Default = {
            label: {
                required: false // Prioritized find order for resolving the label to be used as an bmd-label if not specified in the markup
                //  - a function(thisComponent); or
                //  - a string selector used like $bmdFormGroup.find(selector)
                //
                // Note this only runs if $bmdFormGroup.find(Selector.BMD_LABEL_WILDCARD) fails to find a label (as authored in the markup)
                //
                //selectors: [
                //  `.form-control-label`, // in the case of horizontal or inline forms, this will be marked
                //  `> label` // usual case for text inputs
                //]

            }
        };
        var Selector = {
            LABEL: "label"
        };
        /**
         * ------------------------------------------------------------------------
         * Class Definition
         * ------------------------------------------------------------------------
         */

        var BaseSelection =
            /*#__PURE__*/
            function(_BaseInput) {
                _inheritsLoose(BaseSelection, _BaseInput);

                function BaseSelection($element, config, properties) {
                    var _this;

                    // properties = {inputType: checkbox, outerClass: checkbox-inline}
                    // '.checkbox|switch|radio > label > input[type=checkbox|radio]'
                    // '.${this.outerClass} > label > input[type=${this.inputType}]'
                    _this = _BaseInput.call(this, $element, $$$1.extend(true, {}, Default, config), properties) || this;

                    _this.decorateMarkup();

                    return _this;
                } // ------------------------------------------------------------------------
                // protected


                var _proto = BaseSelection.prototype;

                _proto.decorateMarkup = function decorateMarkup() {
                    var $decorator = $$$1(this.config.template);
                    this.$element.after($decorator); // initialize ripples after decorator has been inserted into DOM

                    if (this.config.ripples !== false) {
                        $decorator.bmdRipples();
                    }
                }; // Demarcation element (e.g. first child of a form-group)


                _proto.outerElement = function outerElement() {
                    // .checkbox|switch|radio > label > input[type=checkbox|radio]
                    // label.checkbox-inline > input[type=checkbox|radio]
                    // .${this.outerClass} > label > input[type=${this.inputType}]
                    return this.$element.parent().closest("." + this.outerClass);
                };

                _proto.rejectWithoutRequiredStructure = function rejectWithoutRequiredStructure() {
                    // '.checkbox|switch|radio > label > input[type=checkbox|radio]'
                    // '.${this.outerClass} > label > input[type=${this.inputType}]'
                    Util$2.assert(this.$element, !this.$element.parent().prop("tagName") === "label", this.constructor.name + "'s " + Util$2.describe(this.$element) + " parent element should be <label>.");
                    Util$2.assert(this.$element, !this.outerElement().hasClass(this.outerClass), this.constructor.name + "'s " + Util$2.describe(this.$element) + " outer element should have class " + this.outerClass + ".");
                };

                _proto.addFocusListener = function addFocusListener() {
                    var _this2 = this;

                    // checkboxes didn't appear to bubble to the document, so we'll bind these directly
                    this.$element.closest(Selector.LABEL).hover(function() {
                        _this2.addFormGroupFocus();
                    }, function() {
                        _this2.removeFormGroupFocus();
                    });
                };

                _proto.addChangeListener = function addChangeListener() {
                    var _this3 = this;

                    this.$element.change(function() {
                        _this3.$element.blur();
                    });
                }; // ------------------------------------------------------------------------
                // private


                return BaseSelection;
            }(BaseInput);

        return BaseSelection;
    }(jQuery);

    //import File from './file'
    //import Radio from './radio'
    //import Textarea from './textarea'
    //import Select from './select'

    var Checkbox = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var NAME = "checkbox";
        var DATA_KEY = "bmd." + NAME;
        var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
        var JQUERY_NO_CONFLICT = $$$1.fn[JQUERY_NAME];
        var Default = {
            template: "<span class='checkbox-decorator'><span class='check'></span></span>"
        };
        /**
         * ------------------------------------------------------------------------
         * Class Definition
         * ------------------------------------------------------------------------
         */

        var Checkbox =
            /*#__PURE__*/
            function(_BaseSelection) {
                _inheritsLoose(Checkbox, _BaseSelection);

                function Checkbox($element, config, properties) {
                    if (properties === void 0) {
                        properties = {
                            inputType: NAME,
                            outerClass: NAME
                        };
                    }

                    return _BaseSelection.call(this, $element, $$$1.extend(true, //{invalidComponentMatches: [File, Radio, Text, Textarea, Select]},
                        Default, config), properties) || this;
                }

                var _proto = Checkbox.prototype;

                _proto.dispose = function dispose(dataKey) {
                    if (dataKey === void 0) {
                        dataKey = DATA_KEY;
                    }

                    _BaseSelection.prototype.dispose.call(this, dataKey);
                };

                Checkbox.matches = function matches($element) {
                    // '.checkbox > label > input[type=checkbox]'
                    if ($element.attr("type") === "checkbox") {
                        return true;
                    }

                    return false;
                };

                Checkbox.rejectMatch = function rejectMatch(component, $element) {
                    Util$2.assert(this.$element, this.matches($element), component + " component element " + Util$2.describe($element) + " is invalid for type='checkbox'.");
                }; // ------------------------------------------------------------------------
                // protected
                // ------------------------------------------------------------------------
                // protected
                // ------------------------------------------------------------------------
                // private
                // ------------------------------------------------------------------------
                // static


                Checkbox._jQueryInterface = function _jQueryInterface(config) {
                    return this.each(function() {
                        var $element = $$$1(this);
                        var data = $element.data(DATA_KEY);

                        if (!data) {
                            data = new Checkbox($element, config);
                            $element.data(DATA_KEY, data);
                        }
                    });
                };

                return Checkbox;
            }(BaseSelection);
        /**
         * ------------------------------------------------------------------------
         * jQuery
         * ------------------------------------------------------------------------
         */


        $$$1.fn[JQUERY_NAME] = Checkbox._jQueryInterface;
        $$$1.fn[JQUERY_NAME].Constructor = Checkbox;

        $$$1.fn[JQUERY_NAME].noConflict = function() {
            $$$1.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
            return Checkbox._jQueryInterface;
        };

        return Checkbox;
    }(jQuery);

    var CheckboxInline = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var NAME = "checkboxInline";
        var DATA_KEY = "bmd." + NAME;
        var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
        var JQUERY_NO_CONFLICT = $$$1.fn[JQUERY_NAME];
        var Default = {
            bmdFormGroup: {
                create: false,
                // no bmd-form-group creation if form-group not present. It messes with the layout.
                required: false
            }
        };
        /**
         * ------------------------------------------------------------------------
         * Class Definition
         * ------------------------------------------------------------------------
         */

        var CheckboxInline =
            /*#__PURE__*/
            function(_Checkbox) {
                _inheritsLoose(CheckboxInline, _Checkbox);

                function CheckboxInline($element, config, properties) {
                    if (properties === void 0) {
                        properties = {
                            inputType: "checkbox",
                            outerClass: "checkbox-inline"
                        };
                    }

                    return _Checkbox.call(this, $element, $$$1.extend(true, {}, Default, config), properties) || this;
                }

                var _proto = CheckboxInline.prototype;

                _proto.dispose = function dispose() {
                    _Checkbox.prototype.dispose.call(this, DATA_KEY);
                }; //static matches($element) {
                //  // '.checkbox-inline > input[type=checkbox]'
                //  if ($element.attr('type') === 'checkbox') {
                //    return true
                //  }
                //  return false
                //}
                //
                //static rejectMatch(component, $element) {
                //  Util.assert(this.$element, this.matches($element), `${component} component element ${Util.describe($element)} is invalid for type='checkbox'.`)
                //}
                // ------------------------------------------------------------------------
                // protected
                // ------------------------------------------------------------------------
                // protected
                // ------------------------------------------------------------------------
                // private
                // ------------------------------------------------------------------------
                // static


                CheckboxInline._jQueryInterface = function _jQueryInterface(config) {
                    return this.each(function() {
                        var $element = $$$1(this);
                        var data = $element.data(DATA_KEY);

                        if (!data) {
                            data = new CheckboxInline($element, config);
                            $element.data(DATA_KEY, data);
                        }
                    });
                };

                return CheckboxInline;
            }(Checkbox);
        /**
         * ------------------------------------------------------------------------
         * jQuery
         * ------------------------------------------------------------------------
         */


        $$$1.fn[JQUERY_NAME] = CheckboxInline._jQueryInterface;
        $$$1.fn[JQUERY_NAME].Constructor = CheckboxInline;

        $$$1.fn[JQUERY_NAME].noConflict = function() {
            $$$1.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
            return CheckboxInline._jQueryInterface;
        };

        return CheckboxInline;
    }(jQuery);

    var CollapseInline = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var NAME = "collapseInline";
        var DATA_KEY = "bmd." + NAME;
        var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
        var JQUERY_NO_CONFLICT = $$$1.fn[JQUERY_NAME];
        var Selector = {
            ANY_INPUT: "input, select, textarea"
        };
        var ClassName = {
            IN: "in",
            COLLAPSE: "collapse",
            COLLAPSING: "collapsing",
            COLLAPSED: "collapsed",
            WIDTH: "width"
        };
        var Default = {};
        /**
         * ------------------------------------------------------------------------
         * Class Definition
         * ------------------------------------------------------------------------
         */

        var CollapseInline =
            /*#__PURE__*/
            function(_Base) {
                _inheritsLoose(CollapseInline, _Base);

                // $element is expected to be the trigger
                //  i.e. <button class="btn bmd-btn-icon" for="search" data-toggle="collapse" data-target="#search-field" aria-expanded="false" aria-controls="search-field">
                function CollapseInline($element, config) {
                    var _this;

                    _this = _Base.call(this, $element, $$$1.extend(true, {}, Default, config)) || this;
                    _this.$bmdFormGroup = _this.findMdbFormGroup(true);
                    var collapseSelector = $element.data("target");
                    _this.$collapse = $$$1(collapseSelector);
                    Util$2.assert($element, _this.$collapse.length === 0, "Cannot find collapse target for " + Util$2.describe($element));
                    Util$2.assert(_this.$collapse, !_this.$collapse.hasClass(ClassName.COLLAPSE), Util$2.describe(_this.$collapse) + " is expected to have the '" + ClassName.COLLAPSE + "' class.  It is being targeted by " + Util$2.describe($element)); // find the first input for focusing

                    var $inputs = _this.$bmdFormGroup.find(Selector.ANY_INPUT);

                    if ($inputs.length > 0) {
                        _this.$input = $inputs.first();
                    } // automatically add the marker class to collapse width instead of height - nice convenience because it is easily forgotten


                    if (!_this.$collapse.hasClass(ClassName.WIDTH)) {
                        _this.$collapse.addClass(ClassName.WIDTH);
                    }

                    if (_this.$input) {
                        // add a listener to set focus
                        _this.$collapse.on("shown.bs.collapse", function() {
                            _this.$input.focus();
                        }); // add a listener to collapse field


                        _this.$input.blur(function() {
                            _this.$collapse.collapse("hide");
                        });
                    }

                    return _this;
                }

                var _proto = CollapseInline.prototype;

                _proto.dispose = function dispose() {
                    _Base.prototype.dispose.call(this, DATA_KEY);

                    this.$bmdFormGroup = null;
                    this.$collapse = null;
                    this.$input = null;
                }; // ------------------------------------------------------------------------
                // private
                // ------------------------------------------------------------------------
                // static


                CollapseInline._jQueryInterface = function _jQueryInterface(config) {
                    return this.each(function() {
                        var $element = $$$1(this);
                        var data = $element.data(DATA_KEY);

                        if (!data) {
                            data = new CollapseInline($element, config);
                            $element.data(DATA_KEY, data);
                        }
                    });
                };

                return CollapseInline;
            }(Base);
        /**
         * ------------------------------------------------------------------------
         * jQuery
         * ------------------------------------------------------------------------
         */


        $$$1.fn[JQUERY_NAME] = CollapseInline._jQueryInterface;
        $$$1.fn[JQUERY_NAME].Constructor = CollapseInline;

        $$$1.fn[JQUERY_NAME].noConflict = function() {
            $$$1.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
            return CollapseInline._jQueryInterface;
        };

        return CollapseInline;
    }(jQuery);

    //import Radio from './radio'
    //import Switch from './switch'
    //import Text from './text'
    //import Textarea from './textarea'
    //import Select from './select'

    var File = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var NAME = "file";
        var DATA_KEY = "bmd." + NAME;
        var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
        var JQUERY_NO_CONFLICT = $$$1.fn[JQUERY_NAME];
        var Default = {};
        var ClassName = {
            FILE: NAME,
            IS_FILE: "is-file"
        };
        var Selector = {
            FILENAMES: "input.form-control[readonly]"
        };
        /**
         * ------------------------------------------------------------------------
         * Class Definition
         * ------------------------------------------------------------------------
         */

        var File =
            /*#__PURE__*/
            function(_BaseInput) {
                _inheritsLoose(File, _BaseInput);

                function File($element, config) {
                    var _this;

                    _this = _BaseInput.call(this, $element, $$$1.extend(true, //{invalidComponentMatches: [Checkbox, Radio, Text, Textarea, Select, Switch]},
                        Default, config)) || this;

                    _this.$bmdFormGroup.addClass(ClassName.IS_FILE);

                    return _this;
                }

                var _proto = File.prototype;

                _proto.dispose = function dispose() {
                    _BaseInput.prototype.dispose.call(this, DATA_KEY);
                };

                File.matches = function matches($element) {
                    if ($element.attr("type") === "file") {
                        return true;
                    }

                    return false;
                };

                File.rejectMatch = function rejectMatch(component, $element) {
                    Util$2.assert(this.$element, this.matches($element), component + " component element " + Util$2.describe($element) + " is invalid for type='file'.");
                }; // ------------------------------------------------------------------------
                // protected
                // Demarcation element (e.g. first child of a form-group)


                _proto.outerElement = function outerElement() {
                    // label.file > input[type=file]
                    return this.$element.parent().closest("." + ClassName.FILE);
                };

                _proto.rejectWithoutRequiredStructure = function rejectWithoutRequiredStructure() {
                    // label.file > input[type=file]
                    Util$2.assert(this.$element, !this.outerElement().prop("tagName") === "label", this.constructor.name + "'s " + Util$2.describe(this.$element) + " parent element " + Util$2.describe(this.outerElement()) + " should be <label>.");
                    Util$2.assert(this.$element, !this.outerElement().hasClass(ClassName.FILE), this.constructor.name + "'s " + Util$2.describe(this.$element) + " parent element " + Util$2.describe(this.outerElement()) + " should have class ." + ClassName.FILE + ".");
                };

                _proto.addFocusListener = function addFocusListener() {
                    var _this2 = this;

                    this.$bmdFormGroup.on("focus", function() {
                        _this2.addFormGroupFocus();
                    }).on("blur", function() {
                        _this2.removeFormGroupFocus();
                    });
                };

                _proto.addChangeListener = function addChangeListener() {
                    var _this3 = this;

                    // set the fileinput readonly field with the name of the file
                    this.$element.on("change", function() {
                        var value = "";
                        $$$1.each(_this3.$element.files, function(i, file) {
                            value += file.name + "  , ";
                        });
                        value = value.substring(0, value.length - 2);

                        if (value) {
                            _this3.addIsFilled();
                        } else {
                            _this3.removeIsFilled();
                        }

                        _this3.$bmdFormGroup.find(Selector.FILENAMES).val(value);
                    });
                }; // ------------------------------------------------------------------------
                // private
                // ------------------------------------------------------------------------
                // static


                File._jQueryInterface = function _jQueryInterface(config) {
                    return this.each(function() {
                        var $element = $$$1(this);
                        var data = $element.data(DATA_KEY);

                        if (!data) {
                            data = new File($element, config);
                            $element.data(DATA_KEY, data);
                        }
                    });
                };

                return File;
            }(BaseInput);
        /**
         * ------------------------------------------------------------------------
         * jQuery
         * ------------------------------------------------------------------------
         */


        $$$1.fn[JQUERY_NAME] = File._jQueryInterface;
        $$$1.fn[JQUERY_NAME].Constructor = File;

        $$$1.fn[JQUERY_NAME].noConflict = function() {
            $$$1.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
            return File._jQueryInterface;
        };

        return File;
    }(jQuery);

    //import File from './file'
    //import Checkbox from './checkbox'
    //import Switch from './switch'

    var Radio = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var NAME = "radio";
        var DATA_KEY = "bmd." + NAME;
        var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
        var JQUERY_NO_CONFLICT = $$$1.fn[JQUERY_NAME];
        var Default = {
            template: "<span class='bmd-radio'></span>"
        };
        /**
         * ------------------------------------------------------------------------
         * Class Definition
         * ------------------------------------------------------------------------
         */

        var Radio =
            /*#__PURE__*/
            function(_BaseSelection) {
                _inheritsLoose(Radio, _BaseSelection);

                function Radio($element, config, properties) {
                    if (properties === void 0) {
                        properties = {
                            inputType: NAME,
                            outerClass: NAME
                        };
                    }

                    return _BaseSelection.call(this, $element, $$$1.extend(true, //{invalidComponentMatches: [Checkbox, File, Switch, Text]},
                        Default, config), properties) || this;
                }

                var _proto = Radio.prototype;

                _proto.dispose = function dispose(dataKey) {
                    if (dataKey === void 0) {
                        dataKey = DATA_KEY;
                    }

                    _BaseSelection.prototype.dispose.call(this, dataKey);
                };

                Radio.matches = function matches($element) {
                    // '.radio > label > input[type=radio]'
                    if ($element.attr("type") === "radio") {
                        return true;
                    }

                    return false;
                };

                Radio.rejectMatch = function rejectMatch(component, $element) {
                    Util$2.assert(this.$element, this.matches($element), component + " component element " + Util$2.describe($element) + " is invalid for type='radio'.");
                }; // ------------------------------------------------------------------------
                // protected
                //decorateMarkup() {
                //  this.$element.after(this.config.template)
                //}
                // ------------------------------------------------------------------------
                // private
                // ------------------------------------------------------------------------
                // static


                Radio._jQueryInterface = function _jQueryInterface(config) {
                    return this.each(function() {
                        var $element = $$$1(this);
                        var data = $element.data(DATA_KEY);

                        if (!data) {
                            data = new Radio($element, config);
                            $element.data(DATA_KEY, data);
                        }
                    });
                };

                return Radio;
            }(BaseSelection);
        /**
         * ------------------------------------------------------------------------
         * jQuery
         * ------------------------------------------------------------------------
         */


        $$$1.fn[JQUERY_NAME] = Radio._jQueryInterface;
        $$$1.fn[JQUERY_NAME].Constructor = Radio;

        $$$1.fn[JQUERY_NAME].noConflict = function() {
            $$$1.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
            return Radio._jQueryInterface;
        };

        return Radio;
    }(jQuery);

    var RadioInline = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var NAME = "radioInline";
        var DATA_KEY = "bmd." + NAME;
        var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
        var JQUERY_NO_CONFLICT = $$$1.fn[JQUERY_NAME];
        var Default = {
            bmdFormGroup: {
                create: false,
                // no bmd-form-group creation if form-group not present. It messes with the layout.
                required: false
            }
        };
        /**
         * ------------------------------------------------------------------------
         * Class Definition
         * ------------------------------------------------------------------------
         */

        var RadioInline =
            /*#__PURE__*/
            function(_Radio) {
                _inheritsLoose(RadioInline, _Radio);

                function RadioInline($element, config, properties) {
                    if (properties === void 0) {
                        properties = {
                            inputType: "radio",
                            outerClass: "radio-inline"
                        };
                    }

                    return _Radio.call(this, $element, $$$1.extend(true, {}, Default, config), properties) || this;
                }

                var _proto = RadioInline.prototype;

                _proto.dispose = function dispose() {
                    _Radio.prototype.dispose.call(this, DATA_KEY);
                }; // ------------------------------------------------------------------------
                // protected
                // ------------------------------------------------------------------------
                // protected
                // ------------------------------------------------------------------------
                // private
                // ------------------------------------------------------------------------
                // static


                RadioInline._jQueryInterface = function _jQueryInterface(config) {
                    return this.each(function() {
                        var $element = $$$1(this);
                        var data = $element.data(DATA_KEY);

                        if (!data) {
                            data = new RadioInline($element, config);
                            $element.data(DATA_KEY, data);
                        }
                    });
                };

                return RadioInline;
            }(Radio);
        /**
         * ------------------------------------------------------------------------
         * jQuery
         * ------------------------------------------------------------------------
         */


        $$$1.fn[JQUERY_NAME] = RadioInline._jQueryInterface;
        $$$1.fn[JQUERY_NAME].Constructor = RadioInline;

        $$$1.fn[JQUERY_NAME].noConflict = function() {
            $$$1.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
            return RadioInline._jQueryInterface;
        };

        return RadioInline;
    }(jQuery);

    var BaseFormControl = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var Default = {
            requiredClasses: ["form-control"]
        };
        /**
         * ------------------------------------------------------------------------
         * Class Definition
         * ------------------------------------------------------------------------
         */

        var BaseFormControl =
            /*#__PURE__*/
            function(_BaseInput) {
                _inheritsLoose(BaseFormControl, _BaseInput);

                function BaseFormControl($element, config) {
                    var _this;

                    _this = _BaseInput.call(this, $element, $$$1.extend(true, Default, config)) || this; // Initially mark as empty

                    if (_this.isEmpty()) {
                        _this.removeIsFilled();
                    }

                    return _this;
                }

                return BaseFormControl;
            }(BaseInput);

        return BaseFormControl;
    }(jQuery);

    //import File from './file'
    //import Radio from './radio'
    //import Switch from './switch'
    //import Text from './text'
    //import Textarea from './textarea'

    var Select = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var NAME = "select";
        var DATA_KEY = "bmd." + NAME;
        var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
        var JQUERY_NO_CONFLICT = $$$1.fn[JQUERY_NAME];
        var Default = {
            requiredClasses: ["form-control||custom-select"]
        };
        /**
         * ------------------------------------------------------------------------
         * Class Definition
         * ------------------------------------------------------------------------
         */

        var Select =
            /*#__PURE__*/
            function(_BaseFormControl) {
                _inheritsLoose(Select, _BaseFormControl);

                function Select($element, config) {
                    var _this;

                    _this = _BaseFormControl.call(this, $element, $$$1.extend(true, //{invalidComponentMatches: [Checkbox, File, Radio, Switch, Text, Textarea]},
                        Default, config)) || this; // floating labels will cover the options, so trigger them to be above (if used)

                    _this.addIsFilled();

                    return _this;
                }

                var _proto = Select.prototype;

                _proto.dispose = function dispose() {
                    _BaseFormControl.prototype.dispose.call(this, DATA_KEY);
                };

                Select.matches = function matches($element) {
                    if ($element.prop("tagName") === "select") {
                        return true;
                    }

                    return false;
                };

                Select.rejectMatch = function rejectMatch(component, $element) {
                    Util$2.assert(this.$element, this.matches($element), component + " component element " + Util$2.describe($element) + " is invalid for <select>.");
                }; // ------------------------------------------------------------------------
                // protected
                // ------------------------------------------------------------------------
                // private
                // ------------------------------------------------------------------------
                // static


                Select._jQueryInterface = function _jQueryInterface(config) {
                    return this.each(function() {
                        var $element = $$$1(this);
                        var data = $element.data(DATA_KEY);

                        if (!data) {
                            data = new Select($element, config);
                            $element.data(DATA_KEY, data);
                        }
                    });
                };

                return Select;
            }(BaseFormControl);
        /**
         * ------------------------------------------------------------------------
         * jQuery
         * ------------------------------------------------------------------------
         */


        $$$1.fn[JQUERY_NAME] = Select._jQueryInterface;
        $$$1.fn[JQUERY_NAME].Constructor = Select;

        $$$1.fn[JQUERY_NAME].noConflict = function() {
            $$$1.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
            return Select._jQueryInterface;
        };

        return Select;
    }(jQuery);

    var Switch = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var NAME = "switch";
        var DATA_KEY = "bmd." + NAME;
        var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
        var JQUERY_NO_CONFLICT = $$$1.fn[JQUERY_NAME];
        var Default = {
            template: "<span class='bmd-switch-track'></span>"
        };
        /**
         * ------------------------------------------------------------------------
         * Class Definition
         * ------------------------------------------------------------------------
         */

        var Switch =
            /*#__PURE__*/
            function(_Checkbox) {
                _inheritsLoose(Switch, _Checkbox);

                function Switch($element, config, properties) {
                    if (properties === void 0) {
                        properties = {
                            inputType: "checkbox",
                            outerClass: "switch"
                        };
                    }

                    return _Checkbox.call(this, $element, $$$1.extend(true, {}, Default, config), properties) || this; // selector: '.switch > label > input[type=checkbox]'
                }

                var _proto = Switch.prototype;

                _proto.dispose = function dispose() {
                    _Checkbox.prototype.dispose.call(this, DATA_KEY);
                }; // ------------------------------------------------------------------------
                // protected
                // ------------------------------------------------------------------------
                // private
                // ------------------------------------------------------------------------
                // static


                Switch._jQueryInterface = function _jQueryInterface(config) {
                    return this.each(function() {
                        var $element = $$$1(this);
                        var data = $element.data(DATA_KEY);

                        if (!data) {
                            data = new Switch($element, config);
                            $element.data(DATA_KEY, data);
                        }
                    });
                };

                return Switch;
            }(Checkbox);
        /**
         * ------------------------------------------------------------------------
         * jQuery
         * ------------------------------------------------------------------------
         */


        $$$1.fn[JQUERY_NAME] = Switch._jQueryInterface;
        $$$1.fn[JQUERY_NAME].Constructor = Switch;

        $$$1.fn[JQUERY_NAME].noConflict = function() {
            $$$1.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
            return Switch._jQueryInterface;
        };

        return Switch;
    }(jQuery);

    //import File from './file'
    //import Radio from './radio'
    //import Switch from './switch'
    //import Textarea from './textarea'
    //import Select from './select'

    var Text = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var NAME = "text";
        var DATA_KEY = "bmd." + NAME;
        var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
        var JQUERY_NO_CONFLICT = $$$1.fn[JQUERY_NAME];
        var Default = {};
        /**
         * ------------------------------------------------------------------------
         * Class Definition
         * ------------------------------------------------------------------------
         */

        var Text =
            /*#__PURE__*/
            function(_BaseFormControl) {
                _inheritsLoose(Text, _BaseFormControl);

                function Text($element, config) {
                    return _BaseFormControl.call(this, $element, $$$1.extend(true, //{invalidComponentMatches: [Checkbox, File, Radio, Switch, Select, Textarea]},
                        Default, config)) || this;
                }

                var _proto = Text.prototype;

                _proto.dispose = function dispose(dataKey) {
                    if (dataKey === void 0) {
                        dataKey = DATA_KEY;
                    }

                    _BaseFormControl.prototype.dispose.call(this, dataKey);
                };

                Text.matches = function matches($element) {
                    if ($element.attr("type") === "text") {
                        return true;
                    }

                    return false;
                };

                Text.rejectMatch = function rejectMatch(component, $element) {
                    Util$2.assert(this.$element, this.matches($element), component + " component element " + Util$2.describe($element) + " is invalid for type='text'.");
                }; // ------------------------------------------------------------------------
                // protected
                // ------------------------------------------------------------------------
                // private
                // ------------------------------------------------------------------------
                // static


                Text._jQueryInterface = function _jQueryInterface(config) {
                    return this.each(function() {
                        var $element = $$$1(this);
                        var data = $element.data(DATA_KEY);

                        if (!data) {
                            data = new Text($element, config);
                            $element.data(DATA_KEY, data);
                        }
                    });
                };

                return Text;
            }(BaseFormControl);
        /**
         * ------------------------------------------------------------------------
         * jQuery
         * ------------------------------------------------------------------------
         */


        $$$1.fn[JQUERY_NAME] = Text._jQueryInterface;
        $$$1.fn[JQUERY_NAME].Constructor = Text;

        $$$1.fn[JQUERY_NAME].noConflict = function() {
            $$$1.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
            return Text._jQueryInterface;
        };

        return Text;
    }(jQuery);

    //import File from './file'
    //import Radio from './radio'
    //import Switch from './switch'
    //import Text from './text'
    //import Select from './select'

    var Textarea = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var NAME = "textarea";
        var DATA_KEY = "bmd." + NAME;
        var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
        var JQUERY_NO_CONFLICT = $$$1.fn[JQUERY_NAME];
        var Default = {};
        /**
         * ------------------------------------------------------------------------
         * Class Definition
         * ------------------------------------------------------------------------
         */

        var Textarea =
            /*#__PURE__*/
            function(_BaseFormControl) {
                _inheritsLoose(Textarea, _BaseFormControl);

                function Textarea($element, config) {
                    return _BaseFormControl.call(this, $element, $$$1.extend(true, //{invalidComponentMatches: [Checkbox, File, Radio, Text, Select, Switch]},
                        Default, config)) || this;
                }

                var _proto = Textarea.prototype;

                _proto.dispose = function dispose() {
                    _BaseFormControl.prototype.dispose.call(this, DATA_KEY);
                };

                Textarea.matches = function matches($element) {
                    if ($element.prop("tagName") === "textarea") {
                        return true;
                    }

                    return false;
                };

                Textarea.rejectMatch = function rejectMatch(component, $element) {
                    Util$2.assert(this.$element, this.matches($element), component + " component element " + Util$2.describe($element) + " is invalid for <textarea>.");
                }; // ------------------------------------------------------------------------
                // protected
                // ------------------------------------------------------------------------
                // private
                // ------------------------------------------------------------------------
                // static


                Textarea._jQueryInterface = function _jQueryInterface(config) {
                    return this.each(function() {
                        var $element = $$$1(this);
                        var data = $element.data(DATA_KEY);

                        if (!data) {
                            data = new Textarea($element, config);
                            $element.data(DATA_KEY, data);
                        }
                    });
                };

                return Textarea;
            }(BaseFormControl);
        /**
         * ------------------------------------------------------------------------
         * jQuery
         * ------------------------------------------------------------------------
         */


        $$$1.fn[JQUERY_NAME] = Textarea._jQueryInterface;
        $$$1.fn[JQUERY_NAME].Constructor = Textarea;

        $$$1.fn[JQUERY_NAME].noConflict = function() {
            $$$1.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
            return Textarea._jQueryInterface;
        };

        return Textarea;
    }(jQuery);

    /* global Popper */

    /**
     * This is a copy of the Bootstrap's original dropdown.js, with the only addition
     * of two new classes: 'showing' and 'hiding', used to handle animaitons.
     */
    /**
     * --------------------------------------------------------------------------
     * Bootstrap (v4.0.0-beta): dropdown.js
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
     * --------------------------------------------------------------------------
     */

    var Dropdown = function($$$1) {
        /**
         * Check for Popper dependency
         * Popper - https://popper.js.org
         */
        if (typeof Popper === 'undefined') {
            throw new Error('Bootstrap dropdown require Popper.js (https://popper.js.org)');
        }
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */


        var NAME = 'dropdown';
        var VERSION = '4.0.0-beta';
        var DATA_KEY = 'bs.dropdown';
        var EVENT_KEY = "." + DATA_KEY;
        var DATA_API_KEY = '.data-api';
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key

        var SPACE_KEYCODE = 32; // KeyboardEvent.which value for space key

        var TAB_KEYCODE = 9; // KeyboardEvent.which value for tab key

        var ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key

        var ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key

        var RIGHT_MOUSE_BUTTON_WHICH = 3; // MouseEvent.which value for the right button (assuming a right-handed mouse)

        var REGEXP_KEYDOWN = new RegExp(ARROW_UP_KEYCODE + "|" + ARROW_DOWN_KEYCODE + "|" + ESCAPE_KEYCODE);
        var Event = {
            HIDE: "hide" + EVENT_KEY,
            HIDDEN: "hidden" + EVENT_KEY,
            SHOW: "show" + EVENT_KEY,
            SHOWN: "shown" + EVENT_KEY,
            CLICK: "click" + EVENT_KEY,
            CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY,
            KEYDOWN_DATA_API: "keydown" + EVENT_KEY + DATA_API_KEY,
            KEYUP_DATA_API: "keyup" + EVENT_KEY + DATA_API_KEY,
            TRANSITION_END: 'transitionend webkitTransitionEnd oTransitionEnd animationend webkitAnimationEnd oAnimationEnd'
        };
        var ClassName = {
            DISABLED: 'disabled',
            SHOW: 'show',
            SHOWING: 'showing',
            HIDING: 'hiding',
            DROPUP: 'dropup',
            MENURIGHT: 'dropdown-menu-right',
            MENULEFT: 'dropdown-menu-left'
        };
        var Selector = {
            DATA_TOGGLE: '[data-toggle="dropdown"]',
            FORM_CHILD: '.dropdown form',
            MENU: '.dropdown-menu',
            NAVBAR_NAV: '.navbar-nav',
            VISIBLE_ITEMS: '.dropdown-menu .dropdown-item:not(.disabled)'
        };
        var AttachmentMap = {
            TOP: 'top-start',
            TOPEND: 'top-end',
            BOTTOM: 'bottom-start',
            BOTTOMEND: 'bottom-end'
        };
        var Default = {
            placement: AttachmentMap.BOTTOM,
            offset: 0,
            flip: true
        };
        var DefaultType = {
            placement: 'string',
            offset: '(number|string)',
            flip: 'boolean'
            /**
             * ------------------------------------------------------------------------
             * Class Definition
             * ------------------------------------------------------------------------
             */

        };

        var Dropdown =
            /*#__PURE__*/
            function() {
                function Dropdown(element, config) {
                    this._element = element;
                    this._popper = null;
                    this._config = this._getConfig(config);
                    this._menu = this._getMenuElement();
                    this._inNavbar = this._detectNavbar();

                    this._addEventListeners();
                } // getters


                var _proto = Dropdown.prototype;

                // public
                _proto.toggle = function toggle() {
                    var _this = this;

                    if (this._element.disabled || $$$1(this._element).hasClass(ClassName.DISABLED)) {
                        return;
                    }

                    var parent = Dropdown._getParentFromElement(this._element);

                    var isActive = $$$1(this._menu).hasClass(ClassName.SHOW);

                    Dropdown._clearMenus();

                    if (isActive) {
                        return;
                    }

                    var relatedTarget = {
                        relatedTarget: this._element
                    };
                    var showEvent = $$$1.Event(Event.SHOW, relatedTarget);
                    $$$1(parent).trigger(showEvent);

                    if (showEvent.isDefaultPrevented()) {
                        return;
                    }

                    var element = this._element; // for dropup with alignment we use the parent as popper container

                    if ($$$1(parent).hasClass(ClassName.DROPUP)) {
                        if ($$$1(this._menu).hasClass(ClassName.MENULEFT) || $$$1(this._menu).hasClass(ClassName.MENURIGHT)) {
                            element = parent;
                        }
                    }

                    this._popper = new Popper(element, this._menu, this._getPopperConfig()); // if this is a touch-enabled device we add extra
                    // empty mouseover listeners to the body's immediate children;
                    // only needed because of broken event delegation on iOS
                    // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

                    if ('ontouchstart' in document.documentElement && !$$$1(parent).closest(Selector.NAVBAR_NAV).length) {
                        $$$1('body').children().on('mouseover', null, $$$1.noop);
                    }

                    this._element.focus();

                    this._element.setAttribute('aria-expanded', true);

                    $$$1(this._menu).one(Event.TRANSITION_END, function() {
                        $$$1(parent).trigger($$$1.Event(Event.SHOWN, relatedTarget));
                        $$$1(_this._menu).removeClass(ClassName.SHOWING);
                    });
                    $$$1(this._menu).addClass(ClassName.SHOW + " " + ClassName.SHOWING);
                    $$$1(parent).addClass(ClassName.SHOW);
                };

                _proto.dispose = function dispose() {
                    $$$1.removeData(this._element, DATA_KEY);
                    $$$1(this._element).off(EVENT_KEY);
                    this._element = null;
                    this._menu = null;

                    if (this._popper !== null) {
                        this._popper.destroy();
                    }

                    this._popper = null;
                };

                _proto.update = function update() {
                    this._inNavbar = this._detectNavbar();

                    if (this._popper !== null) {
                        this._popper.scheduleUpdate();
                    }
                }; // private


                _proto._addEventListeners = function _addEventListeners() {
                    var _this2 = this;

                    $$$1(this._element).on(Event.CLICK, function(event) {
                        event.preventDefault();
                        event.stopPropagation();

                        _this2.toggle();
                    });
                };

                _proto._getConfig = function _getConfig(config) {
                    var elementData = $$$1(this._element).data();

                    if (elementData.placement !== undefined) {
                        elementData.placement = AttachmentMap[elementData.placement.toUpperCase()];
                    }

                    config = $$$1.extend({}, this.constructor.Default, $$$1(this._element).data(), config);
                    Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);
                    return config;
                };

                _proto._getMenuElement = function _getMenuElement() {
                    if (!this._menu) {
                        var parent = Dropdown._getParentFromElement(this._element);

                        this._menu = $$$1(parent).find(Selector.MENU)[0];
                    }

                    return this._menu;
                };

                _proto._getPlacement = function _getPlacement() {
                    var $parentDropdown = $$$1(this._element).parent();
                    var placement = this._config.placement; // Handle dropup

                    if ($parentDropdown.hasClass(ClassName.DROPUP) || this._config.placement === AttachmentMap.TOP) {
                        placement = AttachmentMap.TOP;

                        if ($$$1(this._menu).hasClass(ClassName.MENURIGHT)) {
                            placement = AttachmentMap.TOPEND;
                        }
                    } else if ($$$1(this._menu).hasClass(ClassName.MENURIGHT)) {
                        placement = AttachmentMap.BOTTOMEND;
                    }

                    return placement;
                };

                _proto._detectNavbar = function _detectNavbar() {
                    return $$$1(this._element).closest('.navbar').length > 0;
                };

                _proto._getPopperConfig = function _getPopperConfig() {
                    var popperConfig = {
                        placement: this._getPlacement(),
                        modifiers: {
                            offset: {
                                offset: this._config.offset
                            },
                            flip: {
                                enabled: this._config.flip
                            }
                        } // Disable Popper.js for Dropdown in Navbar

                    };

                    if (this._inNavbar) {
                        popperConfig.modifiers.applyStyle = {
                            enabled: !this._inNavbar
                        };
                    }

                    return popperConfig;
                }; // static


                Dropdown._jQueryInterface = function _jQueryInterface(config) {
                    return this.each(function() {
                        var data = $$$1(this).data(DATA_KEY);

                        var _config = typeof config === 'object' ? config : null;

                        if (!data) {
                            data = new Dropdown(this, _config);
                            $$$1(this).data(DATA_KEY, data);
                        }

                        if (typeof config === 'string') {
                            if (data[config] === undefined) {
                                throw new Error("No method named \"" + config + "\"");
                            }

                            data[config]();
                        }
                    });
                };

                Dropdown._clearMenus = function _clearMenus(event) {
                    if (event && (event.which === RIGHT_MOUSE_BUTTON_WHICH || event.type === 'keyup' && event.which !== TAB_KEYCODE)) {
                        return;
                    }

                    var toggles = $$$1.makeArray($$$1(Selector.DATA_TOGGLE));

                    var _loop = function _loop(i) {
                        var parent = Dropdown._getParentFromElement(toggles[i]);

                        var context = $$$1(toggles[i]).data(DATA_KEY);
                        var relatedTarget = {
                            relatedTarget: toggles[i]
                        };

                        if (!context) {
                            return "continue";
                        }

                        var dropdownMenu = context._menu;

                        if (!$$$1(parent).hasClass(ClassName.SHOW)) {
                            return "continue";
                        }

                        if (event && (event.type === 'click' && /input|textarea/i.test(event.target.tagName) || event.type === 'keyup' && event.which === TAB_KEYCODE) && $$$1.contains(parent, event.target)) {
                            return "continue";
                        }

                        var hideEvent = $$$1.Event(Event.HIDE, relatedTarget);
                        $$$1(parent).trigger(hideEvent);

                        if (hideEvent.isDefaultPrevented()) {
                            return "continue";
                        } // if this is a touch-enabled device we remove the extra
                        // empty mouseover listeners we added for iOS support


                        if ('ontouchstart' in document.documentElement) {
                            $$$1('body').children().off('mouseover', null, $$$1.noop);
                        }

                        toggles[i].setAttribute('aria-expanded', 'false');
                        $$$1(dropdownMenu).addClass(ClassName.HIDING).removeClass(ClassName.SHOW);
                        $$$1(parent).removeClass(ClassName.SHOW);
                        $$$1(dropdownMenu).one(Event.TRANSITION_END, function() {
                            $$$1(parent).trigger($$$1.Event(Event.HIDDEN, relatedTarget));
                            $$$1(dropdownMenu).removeClass(ClassName.HIDING);
                        });
                    };

                    for (var i = 0; i < toggles.length; i++) {
                        var _ret = _loop(i);

                        if (_ret === "continue") continue;
                    }
                };

                Dropdown._getParentFromElement = function _getParentFromElement(element) {
                    var parent;
                    var selector = Util.getSelectorFromElement(element);

                    if (selector) {
                        parent = $$$1(selector)[0];
                    }

                    return parent || element.parentNode;
                };

                Dropdown._dataApiKeydownHandler = function _dataApiKeydownHandler(event) {
                    if (!REGEXP_KEYDOWN.test(event.which) || /button/i.test(event.target.tagName) && event.which === SPACE_KEYCODE || /input|textarea/i.test(event.target.tagName)) {
                        return;
                    }

                    event.preventDefault();
                    event.stopPropagation();

                    if (this.disabled || $$$1(this).hasClass(ClassName.DISABLED)) {
                        return;
                    }

                    var parent = Dropdown._getParentFromElement(this);

                    var isActive = $$$1(parent).hasClass(ClassName.SHOW);

                    if (!isActive && (event.which !== ESCAPE_KEYCODE || event.which !== SPACE_KEYCODE) || isActive && (event.which === ESCAPE_KEYCODE || event.which === SPACE_KEYCODE)) {
                        if (event.which === ESCAPE_KEYCODE) {
                            var toggle = $$$1(parent).find(Selector.DATA_TOGGLE)[0];
                            $$$1(toggle).trigger('focus');
                        }

                        $$$1(this).trigger('click');
                        return;
                    }

                    var items = $$$1(parent).find(Selector.VISIBLE_ITEMS).get();

                    if (!items.length) {
                        return;
                    }

                    var index = items.indexOf(event.target);

                    if (event.which === ARROW_UP_KEYCODE && index > 0) {
                        // up
                        index--;
                    }

                    if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {
                        // down
                        index++;
                    }

                    if (index < 0) {
                        index = 0;
                    }

                    items[index].focus();
                };

                _createClass(Dropdown, null, [{
                    key: "VERSION",
                    get: function get() {
                        return VERSION;
                    }
                }, {
                    key: "Default",
                    get: function get() {
                        return Default;
                    }
                }, {
                    key: "DefaultType",
                    get: function get() {
                        return DefaultType;
                    }
                }]);

                return Dropdown;
            }();
        /**
         * ------------------------------------------------------------------------
         * Data Api implementation
         * ------------------------------------------------------------------------
         */


        $$$1(document).on(Event.KEYDOWN_DATA_API, Selector.DATA_TOGGLE, Dropdown._dataApiKeydownHandler).on(Event.KEYDOWN_DATA_API, Selector.MENU, Dropdown._dataApiKeydownHandler).on(Event.CLICK_DATA_API + " " + Event.KEYUP_DATA_API, Dropdown._clearMenus).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function(event) {
            event.preventDefault();
            event.stopPropagation();

            Dropdown._jQueryInterface.call($$$1(this), 'toggle');
        }).on(Event.CLICK_DATA_API, Selector.FORM_CHILD, function(e) {
            e.stopPropagation();
        });
        /**
         * ------------------------------------------------------------------------
         * jQuery
         * ------------------------------------------------------------------------
         */

        $$$1.fn[NAME] = Dropdown._jQueryInterface;
        $$$1.fn[NAME].Constructor = Dropdown;

        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Dropdown._jQueryInterface;
        };

        return Dropdown;
    }(jQuery);

    var BaseLayout = function($$$1) {
        var ClassName = {
            CANVAS: "bmd-layout-canvas",
            CONTAINER: "bmd-layout-container",
            BACKDROP: "bmd-layout-backdrop"
        };
        var Selector = {
            CANVAS: "." + ClassName.CANVAS,
            CONTAINER: "." + ClassName.CONTAINER,
            BACKDROP: "." + ClassName.BACKDROP
        };
        var Default = {
            canvas: {
                create: true,
                required: true,
                template: "<div class=\"" + ClassName.CANVAS + "\"></div>"
            },
            backdrop: {
                create: true,
                required: true,
                template: "<div class=\"" + ClassName.BACKDROP + "\"></div>"
            }
        };
        /**
         * ------------------------------------------------------------------------
         * Class Definition
         * ------------------------------------------------------------------------
         */

        var BaseLayout =
            /*#__PURE__*/
            function(_Base) {
                _inheritsLoose(BaseLayout, _Base);

                function BaseLayout($element, config, properties) {
                    var _this;

                    if (properties === void 0) {
                        properties = {};
                    }

                    _this = _Base.call(this, $element, $$$1.extend(true, {}, Default, config), properties) || this;
                    _this.$container = _this.findContainer(true);
                    _this.$backdrop = _this.resolveBackdrop();

                    _this.resolveCanvas();

                    return _this;
                }

                var _proto = BaseLayout.prototype;

                _proto.dispose = function dispose(dataKey) {
                    _Base.prototype.dispose.call(this, dataKey);

                    this.$container = null;
                    this.$backdrop = null;
                }; // ------------------------------------------------------------------------
                // protected
                // Will wrap container in bmd-layout-canvas if necessary


                _proto.resolveCanvas = function resolveCanvas() {
                    var bd = this.findCanvas(false);

                    if (bd === undefined || bd.length === 0) {
                        if (this.config.canvas.create) {
                            this.$container.wrap(this.config.canvas.template);
                        }

                        bd = this.findCanvas(this.config.canvas.required);
                    }

                    return bd;
                }; // Find closest bmd-layout-container based on the given context


                _proto.findCanvas = function findCanvas(raiseError, context) {
                    if (raiseError === void 0) {
                        raiseError = true;
                    }

                    if (context === void 0) {
                        context = this.$container;
                    }

                    var canvas = context.closest(Selector.CANVAS);

                    if (canvas.length === 0 && raiseError) {
                        $$$1.error("Failed to find " + Selector.CANVAS + " for " + Util$2.describe(context));
                    }

                    return canvas;
                }; // Will add bmd-layout-backdrop to bmd-layout-container if necessary


                _proto.resolveBackdrop = function resolveBackdrop() {
                    var bd = this.findBackdrop(false);

                    if (bd === undefined || bd.length === 0) {
                        if (this.config.backdrop.create) {
                            this.$container.append(this.config.backdrop.template);
                        }

                        bd = this.findBackdrop(this.config.backdrop.required);
                    }

                    return bd;
                }; // Find closest bmd-layout-container based on the given context


                _proto.findBackdrop = function findBackdrop(raiseError, context) {
                    if (raiseError === void 0) {
                        raiseError = true;
                    }

                    if (context === void 0) {
                        context = this.$container;
                    }

                    var backdrop = context.find("> " + Selector.BACKDROP);

                    if (backdrop.length === 0 && raiseError) {
                        $$$1.error("Failed to find " + Selector.BACKDROP + " for " + Util$2.describe(context));
                    }

                    return backdrop;
                }; // Find closest bmd-layout-container based on the given context


                _proto.findContainer = function findContainer(raiseError, context) {
                    if (raiseError === void 0) {
                        raiseError = true;
                    }

                    if (context === void 0) {
                        context = this.$element;
                    }

                    var container = context.closest(Selector.CONTAINER);

                    if (container.length === 0 && raiseError) {
                        $$$1.error("Failed to find " + Selector.CONTAINER + " for " + Util$2.describe(context));
                    }

                    return container;
                }; // ------------------------------------------------------------------------
                // private
                // ------------------------------------------------------------------------
                // static


                return BaseLayout;
            }(Base);

        return BaseLayout;
    }(jQuery);

    var Drawer = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var NAME = "drawer";
        var DATA_KEY = "bmd." + NAME;
        var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
        var JQUERY_NO_CONFLICT = $$$1.fn[JQUERY_NAME];
        var Keycodes = {
            ESCAPE: 27 //ENTER: 13,
            //SPACE: 32

        };
        var ClassName = {
            IN: "in",
            DRAWER_IN: "bmd-drawer-in",
            DRAWER_OUT: "bmd-drawer-out",
            DRAWER: "bmd-layout-drawer",
            CONTAINER: "bmd-layout-container"
        };
        var Default = {
            focusSelector: "a, button, input"
        };
        /**
         * ------------------------------------------------------------------------
         * Class Definition
         * ------------------------------------------------------------------------
         */

        var Drawer =
            /*#__PURE__*/
            function(_BaseLayout) {
                _inheritsLoose(Drawer, _BaseLayout);

                // $element is expected to be the trigger
                //  i.e. <button class="btn bmd-btn-icon" for="search" data-toggle="drawer" data-target="#my-side-nav-drawer" aria-expanded="false" aria-controls="my-side-nav-drawer">
                function Drawer($element, config) {
                    var _this;

                    _this = _BaseLayout.call(this, $element, $$$1.extend(true, {}, Default, config)) || this;
                    _this.$toggles = $$$1("[data-toggle=\"drawer\"][href=\"#" + _this.$element[0].id + "\"], [data-toggle=\"drawer\"][data-target=\"#" + _this.$element[0].id + "\"]");

                    _this._addAria(); // click or escape on the backdrop closes the drawer


                    _this.$backdrop.keydown(function(ev) {
                        if (ev.which === Keycodes.ESCAPE) {
                            _this.hide();
                        }
                    }).click(function() {
                        _this.hide();
                    }); // escape on the drawer closes it


                    _this.$element.keydown(function(ev) {
                        if (ev.which === Keycodes.ESCAPE) {
                            _this.hide();
                        }
                    }); // any toggle button clicks


                    _this.$toggles.click(function() {
                        _this.toggle();
                    });

                    return _this;
                }

                var _proto = Drawer.prototype;

                _proto.dispose = function dispose() {
                    _BaseLayout.prototype.dispose.call(this, DATA_KEY);

                    this.$toggles = null;
                };

                _proto.toggle = function toggle() {
                    if (this._isOpen()) {
                        this.hide();
                    } else {
                        this.show();
                    }
                };

                _proto.show = function show() {
                    if (this._isForcedClosed() || this._isOpen()) {
                        return;
                    }

                    this.$toggles.attr("aria-expanded", true);
                    this.$element.attr("aria-expanded", true);
                    this.$element.attr("aria-hidden", false); // focus on the first focusable item

                    var $focusOn = this.$element.find(this.config.focusSelector);

                    if ($focusOn.length > 0) {
                        $focusOn.first().focus();
                    }

                    this.$container.addClass(ClassName.DRAWER_IN); // backdrop is responsively styled based on bmd-drawer-overlay, therefore style is none of our concern, simply add the marker class and let the scss determine if it should be displayed or not.

                    this.$backdrop.addClass(ClassName.IN);
                };

                _proto.hide = function hide() {
                    if (!this._isOpen()) {
                        return;
                    }

                    this.$toggles.attr("aria-expanded", false);
                    this.$element.attr("aria-expanded", false);
                    this.$element.attr("aria-hidden", true);
                    this.$container.removeClass(ClassName.DRAWER_IN);
                    this.$backdrop.removeClass(ClassName.IN);
                }; // ------------------------------------------------------------------------
                // private


                _proto._isOpen = function _isOpen() {
                    return this.$container.hasClass(ClassName.DRAWER_IN);
                };

                _proto._isForcedClosed = function _isForcedClosed() {
                    return this.$container.hasClass(ClassName.DRAWER_OUT);
                };

                _proto._addAria = function _addAria() {
                    var isOpen = this._isOpen();

                    this.$element.attr("aria-expanded", isOpen);
                    this.$element.attr("aria-hidden", isOpen);

                    if (this.$toggles.length) {
                        this.$toggles.attr("aria-expanded", isOpen);
                    }
                }; // ------------------------------------------------------------------------
                // static


                Drawer._jQueryInterface = function _jQueryInterface(config) {
                    return this.each(function() {
                        var $element = $$$1(this);
                        var data = $element.data(DATA_KEY);

                        if (!data) {
                            data = new Drawer($element, config);
                            $element.data(DATA_KEY, data);
                        }
                    });
                };

                return Drawer;
            }(BaseLayout);
        /**
         * ------------------------------------------------------------------------
         * jQuery
         * ------------------------------------------------------------------------
         */


        $$$1.fn[JQUERY_NAME] = Drawer._jQueryInterface;
        $$$1.fn[JQUERY_NAME].Constructor = Drawer;

        $$$1.fn[JQUERY_NAME].noConflict = function() {
            $$$1.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
            return Drawer._jQueryInterface;
        };

        return Drawer;
    }(jQuery);

    var Ripples = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var NAME = "ripples";
        var DATA_KEY = "bmd." + NAME;
        var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
        var JQUERY_NO_CONFLICT = $$$1.fn[JQUERY_NAME];
        var ClassName = {
            CONTAINER: "ripple-container",
            DECORATOR: "ripple-decorator"
        };
        var Selector = {
            CONTAINER: "." + ClassName.CONTAINER,
            DECORATOR: "." + ClassName.DECORATOR //,

        };
        var Default = {
            container: {
                template: "<div class='" + ClassName.CONTAINER + "'></div>"
            },
            decorator: {
                template: "<div class='" + ClassName.DECORATOR + "'></div>"
            },
            trigger: {
                start: "mousedown touchstart",
                end: "mouseup mouseleave touchend"
            },
            touchUserAgentRegex: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i,
            duration: 500
        };
        /**
         * ------------------------------------------------------------------------
         * Class Definition
         * ------------------------------------------------------------------------
         */

        var Ripples =
            /*#__PURE__*/
            function() {
                function Ripples($element, config) {
                    var _this = this;

                    this.$element = $element; // console.log(`Adding ripples to ${Util.describe(this.$element)}`)  // eslint-disable-line no-console

                    this.config = $$$1.extend(true, {}, Default, config); // attach initial listener

                    this.$element.on(this.config.trigger.start, function(event) {
                        _this._onStartRipple(event);
                    });
                }

                var _proto = Ripples.prototype;

                _proto.dispose = function dispose() {
                    this.$element.data(DATA_KEY, null);
                    this.$element = null;
                    this.$container = null;
                    this.$decorator = null;
                    this.config = null;
                }; // ------------------------------------------------------------------------
                // private


                _proto._onStartRipple = function _onStartRipple(event) {
                    var _this2 = this;

                    // Verify if the user is just touching on a device and return if so
                    if (this._isTouch() && event.type === "mousedown") {
                        return;
                    } // Find or create the ripple container element


                    this._findOrCreateContainer(); // Get relY and relX positions of the container element


                    var relY = this._getRelY(event);

                    var relX = this._getRelX(event); // If relY and/or relX are false, return the event


                    if (!relY && !relX) {
                        return;
                    } // set the location and color each time (even if element is cached)


                    this.$decorator.css({
                        left: relX,
                        top: relY,
                        "background-color": this._getRipplesColor()
                    }); // Make sure the ripple has the styles applied (ugly hack but it works)

                    this._forceStyleApplication(); // Turn on the ripple animation


                    this.rippleOn(); // Call the rippleEnd function when the transition 'on' ends

                    setTimeout(function() {
                        _this2.rippleEnd();
                    }, this.config.duration); // Detect when the user leaves the element to cleanup if not already done?

                    this.$element.on(this.config.trigger.end, function() {
                        if (_this2.$decorator) {
                            // guard against race condition/mouse attack
                            _this2.$decorator.data("mousedown", "off");

                            if (_this2.$decorator.data("animating") === "off") {
                                _this2.rippleOut();
                            }
                        }
                    });
                };

                _proto._findOrCreateContainer = function _findOrCreateContainer() {
                    if (!this.$container || !this.$container.length > 0) {
                        this.$element.append(this.config.container.template);
                        this.$container = this.$element.find(Selector.CONTAINER);
                    } // always add the rippleElement, it is always removed


                    this.$container.append(this.config.decorator.template);
                    this.$decorator = this.$container.find(Selector.DECORATOR);
                }; // Make sure the ripple has the styles applied (ugly hack but it works)


                _proto._forceStyleApplication = function _forceStyleApplication() {
                    return window.getComputedStyle(this.$decorator[0]).opacity;
                };
                /**
                 * Get the relX
                 */


                _proto._getRelX = function _getRelX(event) {
                    var wrapperOffset = this.$container.offset();
                    var result = null;

                    if (!this._isTouch()) {
                        // Get the mouse position relative to the ripple wrapper
                        result = event.pageX - wrapperOffset.left;
                    } else {
                        // Make sure the user is using only one finger and then get the touch
                        //  position relative to the ripple wrapper
                        event = event.originalEvent;

                        if (event.touches.length === 1) {
                            result = event.touches[0].pageX - wrapperOffset.left;
                        } else {
                            result = false;
                        }
                    }

                    return result;
                };
                /**
                 * Get the relY
                 */


                _proto._getRelY = function _getRelY(event) {
                    var containerOffset = this.$container.offset();
                    var result = null;

                    if (!this._isTouch()) {
                        /**
                         * Get the mouse position relative to the ripple wrapper
                         */
                        result = event.pageY - containerOffset.top;
                    } else {
                        /**
                         * Make sure the user is using only one finger and then get the touch
                         * position relative to the ripple wrapper
                         */
                        event = event.originalEvent;

                        if (event.touches.length === 1) {
                            result = event.touches[0].pageY - containerOffset.top;
                        } else {
                            result = false;
                        }
                    }

                    return result;
                };
                /**
                 * Get the ripple color
                 */


                _proto._getRipplesColor = function _getRipplesColor() {
                    var color = this.$element.data("ripple-color") ? this.$element.data("ripple-color") : window.getComputedStyle(this.$element[0]).color;
                    return color;
                };
                /**
                 * Verify if the client is using a mobile device
                 */


                _proto._isTouch = function _isTouch() {
                    return this.config.touchUserAgentRegex.test(navigator.userAgent);
                };
                /**
                 * End the animation of the ripple
                 */


                _proto.rippleEnd = function rippleEnd() {
                    if (this.$decorator) {
                        // guard against race condition/mouse attack
                        this.$decorator.data("animating", "off");

                        if (this.$decorator.data("mousedown") === "off") {
                            this.rippleOut(this.$decorator);
                        }
                    }
                };
                /**
                 * Turn off the ripple effect
                 */


                _proto.rippleOut = function rippleOut() {
                    var _this3 = this;

                    this.$decorator.off();

                    if (Util$2.transitionEndSupported()) {
                        this.$decorator.addClass("ripple-out");
                    } else {
                        this.$decorator.animate({
                            opacity: 0
                        }, 100, function() {
                            _this3.$decorator.trigger("transitionend");
                        });
                    }

                    this.$decorator.on(Util$2.transitionEndSelector(), function() {
                        if (_this3.$decorator) {
                            _this3.$decorator.remove();

                            _this3.$decorator = null;
                        }
                    });
                };
                /**
                 * Turn on the ripple effect
                 */


                _proto.rippleOn = function rippleOn() {
                    var _this4 = this;

                    var size = this._getNewSize();

                    if (Util$2.transitionEndSupported()) {
                        this.$decorator.css({
                            "-ms-transform": "scale(" + size + ")",
                            "-moz-transform": "scale(" + size + ")",
                            "-webkit-transform": "scale(" + size + ")",
                            transform: "scale(" + size + ")"
                        }).addClass("ripple-on").data("animating", "on").data("mousedown", "on");
                    } else {
                        this.$decorator.animate({
                            width: Math.max(this.$element.outerWidth(), this.$element.outerHeight()) * 2,
                            height: Math.max(this.$element.outerWidth(), this.$element.outerHeight()) * 2,
                            "margin-left": Math.max(this.$element.outerWidth(), this.$element.outerHeight()) * -1,
                            "margin-top": Math.max(this.$element.outerWidth(), this.$element.outerHeight()) * -1,
                            opacity: 0.2
                        }, this.config.duration, function() {
                            _this4.$decorator.trigger("transitionend");
                        });
                    }
                };
                /**
                 * Get the new size based on the element height/width and the ripple width
                 */


                _proto._getNewSize = function _getNewSize() {
                    return Math.max(this.$element.outerWidth(), this.$element.outerHeight()) / this.$decorator.outerWidth() * 2.5;
                }; // ------------------------------------------------------------------------
                // static


                Ripples._jQueryInterface = function _jQueryInterface(config) {
                    return this.each(function() {
                        var $element = $$$1(this);
                        var data = $element.data(DATA_KEY);

                        if (!data) {
                            data = new Ripples($element, config);
                            $element.data(DATA_KEY, data);
                        }
                    });
                };

                return Ripples;
            }();
        /**
         * ------------------------------------------------------------------------
         * jQuery
         * ------------------------------------------------------------------------
         */


        $$$1.fn[JQUERY_NAME] = Ripples._jQueryInterface;
        $$$1.fn[JQUERY_NAME].Constructor = Ripples;

        $$$1.fn[JQUERY_NAME].noConflict = function() {
            $$$1.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
            return Ripples._jQueryInterface;
        };

        return Ripples;
    }(jQuery);

    var Autofill = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var NAME = "autofill";
        var DATA_KEY = "bmd." + NAME;
        var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
        var JQUERY_NO_CONFLICT = $$$1.fn[JQUERY_NAME];
        var Default = {};
        /**
         * ------------------------------------------------------------------------
         * Class Definition
         * ------------------------------------------------------------------------
         */

        var Autofill =
            /*#__PURE__*/
            function(_Base) {
                _inheritsLoose(Autofill, _Base);

                function Autofill($element, config) {
                    var _this;

                    _this = _Base.call(this, $element, $$$1.extend(true, {}, Default, config)) || this;

                    _this._watchLoading();

                    _this._attachEventHandlers();

                    return _this;
                }

                var _proto = Autofill.prototype;

                _proto.dispose = function dispose() {
                    _Base.prototype.dispose.call(this, DATA_KEY);
                }; // ------------------------------------------------------------------------
                // private


                _proto._watchLoading = function _watchLoading() {
                    var _this2 = this;

                    // After 10 seconds we are quite sure all the needed inputs are autofilled then we can stop checking them
                    setTimeout(function() {
                        clearInterval(_this2._onLoading);
                    }, 10000);
                }; // This part of code will detect autofill when the page is loading (username and password inputs for example)


                _proto._onLoading = function _onLoading() {
                    setInterval(function() {
                        $$$1("input[type!=checkbox]").each(function(index, element) {
                            var $element = $$$1(element);

                            if ($element.val() && $element.val() !== $element.attr("value")) {
                                $element.trigger("change");
                            }
                        });
                    }, 100);
                };

                _proto._attachEventHandlers = function _attachEventHandlers() {
                    // Listen on inputs of the focused form
                    //  (because user can select from the autofill dropdown only when the input has focus)
                    var focused = null;
                    $$$1(document).on("focus", "input", function(event) {
                        var $inputs = $$$1(event.currentTarget).closest("form").find("input").not("[type=file]");
                        focused = setInterval(function() {
                            $inputs.each(function(index, element) {
                                var $element = $$$1(element);

                                if ($element.val() !== $element.attr("value")) {
                                    $element.trigger("change");
                                }
                            });
                        }, 100);
                    }).on("blur", ".form-group input", function() {
                        clearInterval(focused);
                    });
                }; // ------------------------------------------------------------------------
                // static


                Autofill._jQueryInterface = function _jQueryInterface(config) {
                    return this.each(function() {
                        var $element = $$$1(this);
                        var data = $element.data(DATA_KEY);

                        if (!data) {
                            data = new Autofill($element, config);
                            $element.data(DATA_KEY, data);
                        }
                    });
                };

                return Autofill;
            }(Base);
        /**
         * ------------------------------------------------------------------------
         * jQuery
         * ------------------------------------------------------------------------
         */


        $$$1.fn[JQUERY_NAME] = Autofill._jQueryInterface;
        $$$1.fn[JQUERY_NAME].Constructor = Autofill;

        $$$1.fn[JQUERY_NAME].noConflict = function() {
            $$$1.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
            return Autofill._jQueryInterface;
        };

        return Autofill;
    }(jQuery);

    /* globals Popper */
    Popper.Defaults.modifiers.computeStyle.gpuAcceleration = false;
    /**
     * $.bootstrapMaterialDesign(config) is a macro class to configure the components generally
     *  used in Material Design for Bootstrap.  You may pass overrides to the configurations
     *  which will be passed into each component, or you may omit use of this class and
     *  configure each component separately.
     */

    var BootstrapMaterialDesign = function($$$1) {
        /**
         * ------------------------------------------------------------------------
         * Constants
         * ------------------------------------------------------------------------
         */
        var NAME = "bootstrapMaterialDesign";
        var DATA_KEY = "bmd." + NAME;
        var JQUERY_NAME = NAME; // retain this full name since it is long enough not to conflict

        var JQUERY_NO_CONFLICT = $$$1.fn[JQUERY_NAME];
        /**
         * Global configuration:
         *  The global configuration hash will be mixed in to each components' config.
         *    e.g. calling $.bootstrapMaterialDesign({global: { validate: true } }) would pass `validate:true` to every component
         *
         *
         * Component configuration:
         *  - selector: may be a string or an array.  Any array will be joined with a comma to generate the selector
         *  - disable any component by defining it as false with an override. e.g. $.bootstrapMaterialDesign({ autofill: false })
         *
         *  @see each individual component for more configuration settings.
         */

        var Default = {
            global: {
                validate: false,
                label: {
                    className: "bmd-label-static" // default style of label to be used if not specified in the html markup

                }
            },
            autofill: {
                selector: "body"
            },
            checkbox: {
                selector: ".checkbox > label > input[type=checkbox]"
            },
            checkboxInline: {
                selector: "label.checkbox-inline > input[type=checkbox]"
            },
            collapseInline: {
                selector: '.bmd-collapse-inline [data-toggle="collapse"]'
            },
            drawer: {
                selector: ".bmd-layout-drawer"
            },
            file: {
                selector: "input[type=file]"
            },
            radio: {
                selector: ".radio > label > input[type=radio]"
            },
            radioInline: {
                selector: "label.radio-inline > input[type=radio]"
            },
            ripples: {
                //selector: ['.btn:not(.btn-link):not(.ripple-none)'] // testing only
                selector: [".btn:not(.ripple-none)", ".card-image:not(.ripple-none)", ".navbar a:not(.ripple-none)", ".dropdown-menu a:not(.ripple-none)", ".nav-tabs a:not(.ripple-none)", ".pagination li:not(.active):not(.disabled) a:not(.ripple-none)", ".ripple" // generic marker class to add ripple to elements
                ]
            },
            select: {
                selector: ["select"]
            },
            switch: {
                selector: ".switch > label > input[type=checkbox]"
            },
            text: {
                // omit inputs we have specialized components to handle - we need to match text, email, etc.  The easiest way to do this appears to be just omit the ones we don't want to match and let the rest fall through to this.
                selector: ["input:not([type=hidden]):not([type=checkbox]):not([type=radio]):not([type=file]):not([type=button]):not([type=submit]):not([type=reset])"]
            },
            textarea: {
                selector: ["textarea"]
            },
            arrive: true,
            // create an ordered component list for instantiation
            instantiation: ["ripples", "checkbox", "checkboxInline", "collapseInline", "drawer", //'file',
                "radio", "radioInline", "switch", "text", "textarea", // "select",
                "autofill"
            ]
        };
        /**
         * ------------------------------------------------------------------------
         * Class Definition
         * ------------------------------------------------------------------------
         */

        var BootstrapMaterialDesign =
            /*#__PURE__*/
            function() {
                function BootstrapMaterialDesign($element, config) {
                    var _this = this;

                    this.$element = $element;
                    this.config = $$$1.extend(true, {}, Default, config);
                    var $document = $$$1(document);

                    var _loop = function _loop(component) {
                        // the component's config fragment is passed in directly, allowing users to override
                        var componentConfig = _this.config[component]; // check to make sure component config is enabled (not `false`)

                        if (componentConfig) {
                            // assemble the selector as it may be an array
                            var selector = _this._resolveSelector(componentConfig); // mix in global options


                            componentConfig = $$$1.extend(true, {}, _this.config.global, componentConfig); // create the jquery fn name e.g. 'bmdText' for 'text'

                            var componentName = "" + (component.charAt(0).toUpperCase() + component.slice(1));
                            var jqueryFn = "bmd" + componentName;

                            try {
                                // safely instantiate component on selector elements with config, report errors and move on.
                                // console.debug(`instantiating: $('${selector}')[${jqueryFn}](${componentConfig})`) // eslint-disable-line no-console
                                $$$1(selector)[jqueryFn](componentConfig); // add to arrive if present and enabled

                                if (document.arrive && _this.config.arrive) {
                                    $document.arrive(selector, function() {
                                        // eslint-disable-line no-loop-func
                                        $$$1(this)[jqueryFn](componentConfig);
                                    });
                                }
                            } catch (e) {
                                var message = "Failed to instantiate component: $('" + selector + "')[" + jqueryFn + "](" + componentConfig + ")";
                                console.error(message, e, "\nSelected elements: ", $$$1(selector)); // eslint-disable-line no-console

                                throw e;
                            }
                        }
                    };

                    for (var _iterator = this.config.instantiation, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                        var _ref;

                        if (_isArray) {
                            if (_i >= _iterator.length) break;
                            _ref = _iterator[_i++];
                        } else {
                            _i = _iterator.next();
                            if (_i.done) break;
                            _ref = _i.value;
                        }

                        var component = _ref;

                        _loop(component);
                    }
                }

                var _proto = BootstrapMaterialDesign.prototype;

                _proto.dispose = function dispose() {
                    this.$element.data(DATA_KEY, null);
                    this.$element = null;
                    this.config = null;
                }; // ------------------------------------------------------------------------
                // private


                _proto._resolveSelector = function _resolveSelector(componentConfig) {
                    var selector = componentConfig.selector;

                    if (Array.isArray(selector)) {
                        selector = selector.join(", ");
                    }

                    return selector;
                }; // ------------------------------------------------------------------------
                // static


                BootstrapMaterialDesign._jQueryInterface = function _jQueryInterface(config) {
                    return this.each(function() {
                        var $element = $$$1(this);
                        var data = $element.data(DATA_KEY);

                        if (!data) {
                            data = new BootstrapMaterialDesign($element, config);
                            $element.data(DATA_KEY, data);
                        }
                    });
                };

                return BootstrapMaterialDesign;
            }();
        /**
         * ------------------------------------------------------------------------
         * jQuery
         * ------------------------------------------------------------------------
         */


        $$$1.fn[JQUERY_NAME] = BootstrapMaterialDesign._jQueryInterface;
        $$$1.fn[JQUERY_NAME].Constructor = BootstrapMaterialDesign;

        $$$1.fn[JQUERY_NAME].noConflict = function() {
            $$$1.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
            return BootstrapMaterialDesign._jQueryInterface;
        };

        return BootstrapMaterialDesign;
    }(jQuery);

    /*
     * This is the main entry point.
     *
     * You can import other modules here, including external packages. When bundling using rollup you can mark those modules as external and have them excluded or, if they have a jsnext:main entry in their package.json (like this package does), let rollup bundle them into your dist file.
     *
     * at your application entry point.  This is necessary for browsers that do not yet support some ES2015 runtime necessities such as Symbol.  We do this in `index-iife.js` for our iife rollup bundle.
     */
    // Bootstrap components

})));

!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(require("jquery"),require("popper.js")):"function"==typeof define&&define.amd?define(["jquery","popper.js"],e):e(t.jQuery,t.Popper)}(this,function(t,h){"use strict";function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function T(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),t}function s(){return(s=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t}).apply(this,arguments)}function a(t,e){t.prototype=Object.create(e.prototype),(t.prototype.constructor=t).__proto__=e}t=t&&t.hasOwnProperty("default")?t.default:t,h=h&&h.hasOwnProperty("default")?h.default:h;var r,e,o,n,l,c,u,d,f,p,m,g,_,v,y,b,C,E,I,w,A,S,D,k,N,O,$,j,x,F,R,P,Q,M,L,H,U,W,B,G,K,q,V,Y,z,X,Z,J,tt,et,nt,it,rt,ot,st,at,lt,ct,ht,ut,dt,ft,pt,mt,gt,_t,vt,yt,bt,Ct,Et,It,Tt,wt,At,St,Dt,kt,Nt,Ot,$t,jt,xt,Ft,Rt,Pt,Qt,Mt,Lt,Ht,Ut,Wt,Bt,Gt,Kt,qt,Vt,Yt,zt,Xt,Zt,Jt,te,ee,ne,ie,re,oe,se,ae,le,ce,he,ue,de,fe,pe,me,ge,_e,ve,ye,be,Ce,Ee,Ie,Te,we,Ae,Se,De,ke,Ne,Oe,$e,je,xe,Fe,Re,Pe,Qe,Me,Le,He,Ue,We,Be,Ge,Ke,qe,Ve,Ye,ze,Xe,Ze,Je,tn,en,nn,rn,on,sn,an,ln,cn,hn,un,dn,fn,pn,mn,gn,_n,vn,yn,bn,Cn,En,In,Tn,wn,An,Sn,Dn,kn,Nn,On,$n,jn,xn,Fn,Rn,Pn,Qn,Mn,Ln,Hn,Un,Wn,Bn,Gn,Kn,qn,Vn,Yn,zn,Xn,Zn,Jn,ti,ei,ni,ii,ri,oi,si,ai,li,ci,hi,ui,di,fi,pi,mi,gi,_i,vi,yi,bi,Ci,Ei,Ii,Ti,wi,Ai,Si,Di,ki,Ni,Oi,$i,ji,xi,Fi,Ri,Pi,Qi,Mi,Li,Hi,Ui,Wi,Bi,Gi,Ki,qi,Vi,Yi,zi,Xi,Zi,Ji,tr,er,nr,ir,rr,or,sr,ar,lr,cr,hr,ur,dr,fr,pr,mr,gr,_r,vr,yr,br,Cr,Er,Ir,Tr,wr,Ar,Sr,Dr,kr,Nr,Or,$r,jr,xr,Fr,Rr=function(i){var e=!1;function t(t){var e=this,n=!1;return i(this).one(l.TRANSITION_END,function(){n=!0}),setTimeout(function(){n||l.triggerTransitionEnd(e)},t),this}var l={TRANSITION_END:"bsTransitionEnd",getUID:function(t){for(;t+=~~(1e6*Math.random()),document.getElementById(t););return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");e&&"#"!==e||(e=t.getAttribute("href")||"");try{return 0<i(document).find(e).length?e:null}catch(t){return null}},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(t){i(t).trigger(e.end)},supportsTransitionEnd:function(){return Boolean(e)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,e,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var r=n[i],o=e[i],s=o&&l.isElement(o)?"element":(a=o,{}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(r).test(s))throw new Error(t.toUpperCase()+': Option "'+i+'" provided type "'+s+'" but expected type "'+r+'".')}var a}};return e=("undefined"==typeof window||!window.QUnit)&&{end:"transitionend"},i.fn.emulateTransitionEnd=t,l.supportsTransitionEnd()&&(i.event.special[l.TRANSITION_END]={bindType:e.end,delegateType:e.end,handle:function(t){if(i(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}}),l}(t),Pr=(e="alert",n="."+(o="bs.alert"),l=(r=t).fn[e],c={CLOSE:"close"+n,CLOSED:"closed"+n,CLICK_DATA_API:"click"+n+".data-api"},u="alert",d="fade",f="show",p=function(){function i(t){this._element=t}var t=i.prototype;return t.close=function(t){t=t||this._element;var e=this._getRootElement(t);this._triggerCloseEvent(e).isDefaultPrevented()||this._removeElement(e)},t.dispose=function(){r.removeData(this._element,o),this._element=null},t._getRootElement=function(t){var e=Rr.getSelectorFromElement(t),n=!1;return e&&(n=r(e)[0]),n||(n=r(t).closest("."+u)[0]),n},t._triggerCloseEvent=function(t){var e=r.Event(c.CLOSE);return r(t).trigger(e),e},t._removeElement=function(e){var n=this;r(e).removeClass(f),Rr.supportsTransitionEnd()&&r(e).hasClass(d)?r(e).one(Rr.TRANSITION_END,function(t){return n._destroyElement(e,t)}).emulateTransitionEnd(150):this._destroyElement(e)},t._destroyElement=function(t){r(t).detach().trigger(c.CLOSED).remove()},i._jQueryInterface=function(n){return this.each(function(){var t=r(this),e=t.data(o);e||(e=new i(this),t.data(o,e)),"close"===n&&e[n](this)})},i._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},T(i,null,[{key:"VERSION",get:function(){return"4.0.0"}}]),i}(),r(document).on(c.CLICK_DATA_API,'[data-dismiss="alert"]',p._handleDismiss(new p)),r.fn[e]=p._jQueryInterface,r.fn[e].Constructor=p,r.fn[e].noConflict=function(){return r.fn[e]=l,p._jQueryInterface},g="button",v="."+(_="bs.button"),y=".data-api",b=(m=t).fn[g],C="active",E="btn",w='[data-toggle^="button"]',A='[data-toggle="buttons"]',S="input",D=".active",k=".btn",N={CLICK_DATA_API:"click"+v+y,FOCUS_BLUR_DATA_API:(I="focus")+v+y+" blur"+v+y},O=function(){function n(t){this._element=t}var t=n.prototype;return t.toggle=function(){var t=!0,e=!0,n=m(this._element).closest(A)[0];if(n){var i=m(this._element).find(S)[0];if(i){if("radio"===i.type)if(i.checked&&m(this._element).hasClass(C))t=!1;else{var r=m(n).find(D)[0];r&&m(r).removeClass(C)}if(t){if(i.hasAttribute("disabled")||n.hasAttribute("disabled")||i.classList.contains("disabled")||n.classList.contains("disabled"))return;i.checked=!m(this._element).hasClass(C),m(i).trigger("change")}i.focus(),e=!1}}e&&this._element.setAttribute("aria-pressed",!m(this._element).hasClass(C)),t&&m(this._element).toggleClass(C)},t.dispose=function(){m.removeData(this._element,_),this._element=null},n._jQueryInterface=function(e){return this.each(function(){var t=m(this).data(_);t||(t=new n(this),m(this).data(_,t)),"toggle"===e&&t[e]()})},T(n,null,[{key:"VERSION",get:function(){return"4.0.0"}}]),n}(),m(document).on(N.CLICK_DATA_API,w,function(t){t.preventDefault();var e=t.target;m(e).hasClass(E)||(e=m(e).closest(k)),O._jQueryInterface.call(m(e),"toggle")}).on(N.FOCUS_BLUR_DATA_API,w,function(t){var e=m(t.target).closest(k)[0];m(e).toggleClass(I,/^focus(in)?$/.test(t.type))}),m.fn[g]=O._jQueryInterface,m.fn[g].Constructor=O,m.fn[g].noConflict=function(){return m.fn[g]=b,O._jQueryInterface},$=jQuery,j="carousel",F="."+(x="bs.carousel"),R=".data-api",P=$.fn[j],Q={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},M={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},L="next",H="prev",U="left",W="right",B={SLIDE:"slide"+F,SLID:"slid"+F,KEYDOWN:"keydown"+F,MOUSEENTER:"mouseenter"+F,MOUSELEAVE:"mouseleave"+F,TOUCHEND:"touchend"+F,LOAD_DATA_API:"load"+F+R,CLICK_DATA_API:"click"+F+R},G="carousel",K="active",q="slide",V="carousel-item-right",Y="carousel-item-left",z="carousel-item-next",X="carousel-item-prev",Z=".active",J=".active.carousel-item",tt=".carousel-item",et=".carousel-item-next, .carousel-item-prev",nt=".carousel-indicators",it="[data-slide], [data-slide-to]",rt='[data-ride="carousel"]',ot=function(){function o(t,e){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(e),this._element=$(t)[0],this._indicatorsElement=$(this._element).find(nt)[0],this._addEventListeners()}var t=o.prototype;return t.next=function(){this._isSliding||this._slide(L)},t.nextWhenVisible=function(){document.hidden||this.next()},t.prev=function(){this._isSliding||this._slide(H)},t.pause=function(t){t||(this._isPaused=!0),$(this._element).find(et)[0]&&Rr.supportsTransitionEnd()&&(Rr.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},t.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},t.to=function(t){var e=this;this._activeElement=$(this._element).find(J)[0];var n=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)$(this._element).one(B.SLID,function(){return e.to(t)});else{if(n===t)return this.pause(),void this.cycle();var i=n<t?L:H;this._slide(i,this._items[t])}},t.dispose=function(){$(this._element).off(F),$.removeData(this._element,x),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},t._getConfig=function(t){return t=$.extend({},Q,t),Rr.typeCheckConfig(j,t,M),t},t._addEventListeners=function(){var e=this;this._config.keyboard&&$(this._element).on(B.KEYDOWN,function(t){return e._keydown(t)}),"hover"===this._config.pause&&($(this._element).on(B.MOUSEENTER,function(t){return e.pause(t)}).on(B.MOUSELEAVE,function(t){return e.cycle(t)}),"ontouchstart"in document.documentElement&&$(this._element).on(B.TOUCHEND,function(){e.pause(),e.touchTimeout&&clearTimeout(e.touchTimeout),e.touchTimeout=setTimeout(function(t){return e.cycle(t)},500+e._config.interval)}))},t._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next();break;default:return}},t._getItemIndex=function(t){return this._items=$.makeArray($(t).parent().find(tt)),this._items.indexOf(t)},t._getItemByDirection=function(t,e){var n=t===L,i=t===H,r=this._getItemIndex(e),o=this._items.length-1;if((i&&0===r||n&&r===o)&&!this._config.wrap)return e;var s=(r+(t===H?-1:1))%this._items.length;return-1===s?this._items[this._items.length-1]:this._items[s]},t._triggerSlideEvent=function(t,e){var n=this._getItemIndex(t),i=this._getItemIndex($(this._element).find(J)[0]),r=$.Event(B.SLIDE,{relatedTarget:t,direction:e,from:i,to:n});return $(this._element).trigger(r),r},t._setActiveIndicatorElement=function(t){if(this._indicatorsElement){$(this._indicatorsElement).find(Z).removeClass(K);var e=this._indicatorsElement.children[this._getItemIndex(t)];e&&$(e).addClass(K)}},t._slide=function(t,e){var n,i,r,o=this,s=$(this._element).find(J)[0],a=this._getItemIndex(s),l=e||s&&this._getItemByDirection(t,s),c=this._getItemIndex(l),h=Boolean(this._interval);if(t===L?(n=Y,i=z,r=U):(n=V,i=X,r=W),l&&$(l).hasClass(K))this._isSliding=!1;else if(!this._triggerSlideEvent(l,r).isDefaultPrevented()&&s&&l){this._isSliding=!0,h&&this.pause(),this._setActiveIndicatorElement(l);var u=$.Event(B.SLID,{relatedTarget:l,direction:r,from:a,to:c});Rr.supportsTransitionEnd()&&$(this._element).hasClass(q)?($(l).addClass(i),Rr.reflow(l),$(s).addClass(n),$(l).addClass(n),$(s).one(Rr.TRANSITION_END,function(){$(l).removeClass(n+" "+i).addClass(K),$(s).removeClass(K+" "+i+" "+n),o._isSliding=!1,setTimeout(function(){return $(o._element).trigger(u)},0)}).emulateTransitionEnd(600)):($(s).removeClass(K),$(l).addClass(K),this._isSliding=!1,$(this._element).trigger(u)),h&&this.cycle()}},o._jQueryInterface=function(i){return this.each(function(){var t=$(this).data(x),e=$.extend({},Q,$(this).data());"object"==typeof i&&$.extend(e,i);var n="string"==typeof i?i:e.slide;if(t||(t=new o(this,e),$(this).data(x,t)),"number"==typeof i)t.to(i);else if("string"==typeof n){if(void 0===t[n])throw new Error('No method named "'+n+'"');t[n]()}else e.interval&&(t.pause(),t.cycle())})},o._dataApiClickHandler=function(t){var e=Rr.getSelectorFromElement(this);if(e){var n=$(e)[0];if(n&&$(n).hasClass(G)){var i=$.extend({},$(n).data(),$(this).data()),r=this.getAttribute("data-slide-to");r&&(i.interval=!1),o._jQueryInterface.call($(n),i),r&&$(n).data(x).to(r),t.preventDefault()}}},T(o,null,[{key:"VERSION",get:function(){return"4.0.0-beta"}},{key:"Default",get:function(){return Q}}]),o}(),$(document).on(B.CLICK_DATA_API,it,ot._dataApiClickHandler),$(window).on(B.LOAD_DATA_API,function(){$(rt).each(function(){var t=$(this);ot._jQueryInterface.call(t,t.data())})}),$.fn[j]=ot._jQueryInterface,$.fn[j].Constructor=ot,$.fn[j].noConflict=function(){return $.fn[j]=P,ot._jQueryInterface},at="collapse",ct="."+(lt="bs.collapse"),ht=(st=t).fn[at],ut={toggle:!0,parent:""},dt={toggle:"boolean",parent:"(string|element)"},ft={SHOW:"show"+ct,SHOWN:"shown"+ct,HIDE:"hide"+ct,HIDDEN:"hidden"+ct,CLICK_DATA_API:"click"+ct+".data-api"},pt="show",mt="collapse",gt="collapsing",_t="collapsed",vt="width",yt="height",bt=".show, .collapsing",Ct='[data-toggle="collapse"]',Et=function(){function a(t,e){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(e),this._triggerArray=st.makeArray(st('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var n=st(Ct),i=0;i<n.length;i++){var r=n[i],o=Rr.getSelectorFromElement(r);null!==o&&0<st(o).filter(t).length&&(this._selector=o,this._triggerArray.push(r))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var t=a.prototype;return t.toggle=function(){st(this._element).hasClass(pt)?this.hide():this.show()},t.show=function(){var t,e,n=this;if(!this._isTransitioning&&!st(this._element).hasClass(pt)&&(this._parent&&0===(t=st.makeArray(st(this._parent).find(bt).filter('[data-parent="'+this._config.parent+'"]'))).length&&(t=null),!(t&&(e=st(t).not(this._selector).data(lt))&&e._isTransitioning))){var i=st.Event(ft.SHOW);if(st(this._element).trigger(i),!i.isDefaultPrevented()){t&&(a._jQueryInterface.call(st(t).not(this._selector),"hide"),e||st(t).data(lt,null));var r=this._getDimension();st(this._element).removeClass(mt).addClass(gt),(this._element.style[r]=0)<this._triggerArray.length&&st(this._triggerArray).removeClass(_t).attr("aria-expanded",!0),this.setTransitioning(!0);var o=function(){st(n._element).removeClass(gt).addClass(mt).addClass(pt),n._element.style[r]="",n.setTransitioning(!1),st(n._element).trigger(ft.SHOWN)};if(Rr.supportsTransitionEnd()){var s="scroll"+(r[0].toUpperCase()+r.slice(1));st(this._element).one(Rr.TRANSITION_END,o).emulateTransitionEnd(600),this._element.style[r]=this._element[s]+"px"}else o()}}},t.hide=function(){var t=this;if(!this._isTransitioning&&st(this._element).hasClass(pt)){var e=st.Event(ft.HIDE);if(st(this._element).trigger(e),!e.isDefaultPrevented()){var n=this._getDimension();if(this._element.style[n]=this._element.getBoundingClientRect()[n]+"px",Rr.reflow(this._element),st(this._element).addClass(gt).removeClass(mt).removeClass(pt),0<this._triggerArray.length)for(var i=0;i<this._triggerArray.length;i++){var r=this._triggerArray[i],o=Rr.getSelectorFromElement(r);if(null!==o)st(o).hasClass(pt)||st(r).addClass(_t).attr("aria-expanded",!1)}this.setTransitioning(!0);var s=function(){t.setTransitioning(!1),st(t._element).removeClass(gt).addClass(mt).trigger(ft.HIDDEN)};this._element.style[n]="",Rr.supportsTransitionEnd()?st(this._element).one(Rr.TRANSITION_END,s).emulateTransitionEnd(600):s()}}},t.setTransitioning=function(t){this._isTransitioning=t},t.dispose=function(){st.removeData(this._element,lt),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},t._getConfig=function(t){return(t=s({},ut,t)).toggle=Boolean(t.toggle),Rr.typeCheckConfig(at,t,dt),t},t._getDimension=function(){return st(this._element).hasClass(vt)?vt:yt},t._getParent=function(){var n=this,t=null;Rr.isElement(this._config.parent)?(t=this._config.parent,void 0!==this._config.parent.jquery&&(t=this._config.parent[0])):t=st(this._config.parent)[0];var e='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return st(t).find(e).each(function(t,e){n._addAriaAndCollapsedClass(a._getTargetFromElement(e),[e])}),t},t._addAriaAndCollapsedClass=function(t,e){if(t){var n=st(t).hasClass(pt);0<e.length&&st(e).toggleClass(_t,!n).attr("aria-expanded",n)}},a._getTargetFromElement=function(t){var e=Rr.getSelectorFromElement(t);return e?st(e)[0]:null},a._jQueryInterface=function(i){return this.each(function(){var t=st(this),e=t.data(lt),n=s({},ut,t.data(),"object"==typeof i&&i);if(!e&&n.toggle&&/show|hide/.test(i)&&(n.toggle=!1),e||(e=new a(this,n),t.data(lt,e)),"string"==typeof i){if(void 0===e[i])throw new TypeError('No method named "'+i+'"');e[i]()}})},T(a,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return ut}}]),a}(),st(document).on(ft.CLICK_DATA_API,Ct,function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var n=st(this),e=Rr.getSelectorFromElement(this);st(e).each(function(){var t=st(this),e=t.data(lt)?"toggle":n.data();Et._jQueryInterface.call(t,e)})}),st.fn[at]=Et._jQueryInterface,st.fn[at].Constructor=Et,st.fn[at].noConflict=function(){return st.fn[at]=ht,Et._jQueryInterface},Tt="modal",At="."+(wt="bs.modal"),St=(It=t).fn[Tt],Dt={backdrop:!0,keyboard:!0,focus:!0,show:!0},kt={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},Nt={HIDE:"hide"+At,HIDDEN:"hidden"+At,SHOW:"show"+At,SHOWN:"shown"+At,FOCUSIN:"focusin"+At,RESIZE:"resize"+At,CLICK_DISMISS:"click.dismiss"+At,KEYDOWN_DISMISS:"keydown.dismiss"+At,MOUSEUP_DISMISS:"mouseup.dismiss"+At,MOUSEDOWN_DISMISS:"mousedown.dismiss"+At,CLICK_DATA_API:"click"+At+".data-api"},Ot="modal-scrollbar-measure",$t="modal-backdrop",jt="modal-open",xt="fade",Ft="show",Rt=".modal-dialog",Pt='[data-toggle="modal"]',Qt='[data-dismiss="modal"]',Mt=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",Lt=".sticky-top",Ht=".navbar-toggler",Ut=function(){function r(t,e){this._config=this._getConfig(e),this._element=t,this._dialog=It(t).find(Rt)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._originalBodyPadding=0,this._scrollbarWidth=0}var t=r.prototype;return t.toggle=function(t){return this._isShown?this.hide():this.show(t)},t.show=function(t){var e=this;if(!this._isTransitioning&&!this._isShown){Rr.supportsTransitionEnd()&&It(this._element).hasClass(xt)&&(this._isTransitioning=!0);var n=It.Event(Nt.SHOW,{relatedTarget:t});It(this._element).trigger(n),this._isShown||n.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),It(document.body).addClass(jt),this._setEscapeEvent(),this._setResizeEvent(),It(this._element).on(Nt.CLICK_DISMISS,Qt,function(t){return e.hide(t)}),It(this._dialog).on(Nt.MOUSEDOWN_DISMISS,function(){It(e._element).one(Nt.MOUSEUP_DISMISS,function(t){It(t.target).is(e._element)&&(e._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return e._showElement(t)}))}},t.hide=function(t){var e=this;if(t&&t.preventDefault(),!this._isTransitioning&&this._isShown){var n=It.Event(Nt.HIDE);if(It(this._element).trigger(n),this._isShown&&!n.isDefaultPrevented()){this._isShown=!1;var i=Rr.supportsTransitionEnd()&&It(this._element).hasClass(xt);i&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),It(document).off(Nt.FOCUSIN),It(this._element).removeClass(Ft),It(this._element).off(Nt.CLICK_DISMISS),It(this._dialog).off(Nt.MOUSEDOWN_DISMISS),i?It(this._element).one(Rr.TRANSITION_END,function(t){return e._hideModal(t)}).emulateTransitionEnd(300):this._hideModal()}}},t.dispose=function(){It.removeData(this._element,wt),It(window,document,this._element,this._backdrop).off(At),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},t.handleUpdate=function(){this._adjustDialog()},t._getConfig=function(t){return t=s({},Dt,t),Rr.typeCheckConfig(Tt,t,kt),t},t._showElement=function(t){var e=this,n=Rr.supportsTransitionEnd()&&It(this._element).hasClass(xt);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,n&&Rr.reflow(this._element),It(this._element).addClass(Ft),this._config.focus&&this._enforceFocus();var i=It.Event(Nt.SHOWN,{relatedTarget:t}),r=function(){e._config.focus&&e._element.focus(),e._isTransitioning=!1,It(e._element).trigger(i)};n?It(this._dialog).one(Rr.TRANSITION_END,r).emulateTransitionEnd(300):r()},t._enforceFocus=function(){var e=this;It(document).off(Nt.FOCUSIN).on(Nt.FOCUSIN,function(t){document!==t.target&&e._element!==t.target&&0===It(e._element).has(t.target).length&&e._element.focus()})},t._setEscapeEvent=function(){var e=this;this._isShown&&this._config.keyboard?It(this._element).on(Nt.KEYDOWN_DISMISS,function(t){27===t.which&&(t.preventDefault(),e.hide())}):this._isShown||It(this._element).off(Nt.KEYDOWN_DISMISS)},t._setResizeEvent=function(){var e=this;this._isShown?It(window).on(Nt.RESIZE,function(t){return e.handleUpdate(t)}):It(window).off(Nt.RESIZE)},t._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){It(document.body).removeClass(jt),t._resetAdjustments(),t._resetScrollbar(),It(t._element).trigger(Nt.HIDDEN)})},t._removeBackdrop=function(){this._backdrop&&(It(this._backdrop).remove(),this._backdrop=null)},t._showBackdrop=function(t){var e=this,n=It(this._element).hasClass(xt)?xt:"";if(this._isShown&&this._config.backdrop){var i=Rr.supportsTransitionEnd()&&n;if(this._backdrop=document.createElement("div"),this._backdrop.className=$t,n&&It(this._backdrop).addClass(n),It(this._backdrop).appendTo(document.body),It(this._element).on(Nt.CLICK_DISMISS,function(t){e._ignoreBackdropClick?e._ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"===e._config.backdrop?e._element.focus():e.hide())}),i&&Rr.reflow(this._backdrop),It(this._backdrop).addClass(Ft),!t)return;if(!i)return void t();It(this._backdrop).one(Rr.TRANSITION_END,t).emulateTransitionEnd(150)}else if(!this._isShown&&this._backdrop){It(this._backdrop).removeClass(Ft);var r=function(){e._removeBackdrop(),t&&t()};Rr.supportsTransitionEnd()&&It(this._element).hasClass(xt)?It(this._backdrop).one(Rr.TRANSITION_END,r).emulateTransitionEnd(150):r()}else t&&t()},t._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},t._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},t._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=t.left+t.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},t._setScrollbar=function(){var r=this;if(this._isBodyOverflowing){It(Mt).each(function(t,e){var n=It(e)[0].style.paddingRight,i=It(e).css("padding-right");It(e).data("padding-right",n).css("padding-right",parseFloat(i)+r._scrollbarWidth+"px")}),It(Lt).each(function(t,e){var n=It(e)[0].style.marginRight,i=It(e).css("margin-right");It(e).data("margin-right",n).css("margin-right",parseFloat(i)-r._scrollbarWidth+"px")}),It(Ht).each(function(t,e){var n=It(e)[0].style.marginRight,i=It(e).css("margin-right");It(e).data("margin-right",n).css("margin-right",parseFloat(i)+r._scrollbarWidth+"px")});var t=document.body.style.paddingRight,e=It("body").css("padding-right");It("body").data("padding-right",t).css("padding-right",parseFloat(e)+this._scrollbarWidth+"px")}},t._resetScrollbar=function(){It(Mt).each(function(t,e){var n=It(e).data("padding-right");void 0!==n&&It(e).css("padding-right",n).removeData("padding-right")}),It(Lt+", "+Ht).each(function(t,e){var n=It(e).data("margin-right");void 0!==n&&It(e).css("margin-right",n).removeData("margin-right")});var t=It("body").data("padding-right");void 0!==t&&It("body").css("padding-right",t).removeData("padding-right")},t._getScrollbarWidth=function(){var t=document.createElement("div");t.className=Ot,document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e},r._jQueryInterface=function(n,i){return this.each(function(){var t=It(this).data(wt),e=s({},r.Default,It(this).data(),"object"==typeof n&&n);if(t||(t=new r(this,e),It(this).data(wt,t)),"string"==typeof n){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n](i)}else e.show&&t.show(i)})},T(r,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return Dt}}]),r}(),It(document).on(Nt.CLICK_DATA_API,Pt,function(t){var e,n=this,i=Rr.getSelectorFromElement(this);i&&(e=It(i)[0]);var r=It(e).data(wt)?"toggle":s({},It(e).data(),It(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var o=It(e).one(Nt.SHOW,function(t){t.isDefaultPrevented()||o.one(Nt.HIDDEN,function(){It(n).is(":visible")&&n.focus()})});Ut._jQueryInterface.call(It(e),r,this)}),It.fn[Tt]=Ut._jQueryInterface,It.fn[Tt].Constructor=Ut,It.fn[Tt].noConflict=function(){return It.fn[Tt]=St,Ut._jQueryInterface},Bt="tooltip",Kt="."+(Gt="bs.tooltip"),qt=(Wt=t).fn[Bt],Vt="bs-tooltip",Yt=new RegExp("(^|\\s)"+Vt+"\\S+","g"),Zt={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!(Xt={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"}),selector:!(zt={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"}),placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},te="out",ee={HIDE:"hide"+Kt,HIDDEN:"hidden"+Kt,SHOW:(Jt="show")+Kt,SHOWN:"shown"+Kt,INSERTED:"inserted"+Kt,CLICK:"click"+Kt,FOCUSIN:"focusin"+Kt,FOCUSOUT:"focusout"+Kt,MOUSEENTER:"mouseenter"+Kt,MOUSELEAVE:"mouseleave"+Kt},ne="fade",ie="show",re=".tooltip-inner",oe=".arrow",se="hover",ae="focus",le="click",ce="manual",he=function(){function c(t,e){if(void 0===h)throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}var t=c.prototype;return t.enable=function(){this._isEnabled=!0},t.disable=function(){this._isEnabled=!1},t.toggleEnabled=function(){this._isEnabled=!this._isEnabled},t.toggle=function(t){if(this._isEnabled)if(t){var e=this.constructor.DATA_KEY,n=Wt(t.currentTarget).data(e);n||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),Wt(t.currentTarget).data(e,n)),n._activeTrigger.click=!n._activeTrigger.click,n._isWithActiveTrigger()?n._enter(null,n):n._leave(null,n)}else{if(Wt(this.getTipElement()).hasClass(ie))return void this._leave(null,this);this._enter(null,this)}},t.dispose=function(){clearTimeout(this._timeout),Wt.removeData(this.element,this.constructor.DATA_KEY),Wt(this.element).off(this.constructor.EVENT_KEY),Wt(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&Wt(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,(this._activeTrigger=null)!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},t.show=function(){var e=this;if("none"===Wt(this.element).css("display"))throw new Error("Please use show on visible elements");var t=Wt.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){Wt(this.element).trigger(t);var n=Wt.contains(this.element.ownerDocument.documentElement,this.element);if(t.isDefaultPrevented()||!n)return;var i=this.getTipElement(),r=Rr.getUID(this.constructor.NAME);i.setAttribute("id",r),this.element.setAttribute("aria-describedby",r),this.setContent(),this.config.animation&&Wt(i).addClass(ne);var o="function"==typeof this.config.placement?this.config.placement.call(this,i,this.element):this.config.placement,s=this._getAttachment(o);this.addAttachmentClass(s);var a=!1===this.config.container?document.body:Wt(this.config.container);Wt(i).data(this.constructor.DATA_KEY,this),Wt.contains(this.element.ownerDocument.documentElement,this.tip)||Wt(i).appendTo(a),Wt(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new h(this.element,i,{placement:s,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:oe},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(t){t.originalPlacement!==t.placement&&e._handlePopperPlacementChange(t)},onUpdate:function(t){e._handlePopperPlacementChange(t)}}),Wt(i).addClass(ie),"ontouchstart"in document.documentElement&&Wt("body").children().on("mouseover",null,Wt.noop);var l=function(){e.config.animation&&e._fixTransition();var t=e._hoverState;e._hoverState=null,Wt(e.element).trigger(e.constructor.Event.SHOWN),t===te&&e._leave(null,e)};Rr.supportsTransitionEnd()&&Wt(this.tip).hasClass(ne)?Wt(this.tip).one(Rr.TRANSITION_END,l).emulateTransitionEnd(c._TRANSITION_DURATION):l()}},t.hide=function(t){var e=this,n=this.getTipElement(),i=Wt.Event(this.constructor.Event.HIDE),r=function(){e._hoverState!==Jt&&n.parentNode&&n.parentNode.removeChild(n),e._cleanTipClass(),e.element.removeAttribute("aria-describedby"),Wt(e.element).trigger(e.constructor.Event.HIDDEN),null!==e._popper&&e._popper.destroy(),t&&t()};Wt(this.element).trigger(i),i.isDefaultPrevented()||(Wt(n).removeClass(ie),"ontouchstart"in document.documentElement&&Wt("body").children().off("mouseover",null,Wt.noop),this._activeTrigger[le]=!1,this._activeTrigger[ae]=!1,this._activeTrigger[se]=!1,Rr.supportsTransitionEnd()&&Wt(this.tip).hasClass(ne)?Wt(n).one(Rr.TRANSITION_END,r).emulateTransitionEnd(150):r(),this._hoverState="")},t.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},t.isWithContent=function(){return Boolean(this.getTitle())},t.addAttachmentClass=function(t){Wt(this.getTipElement()).addClass(Vt+"-"+t)},t.getTipElement=function(){return this.tip=this.tip||Wt(this.config.template)[0],this.tip},t.setContent=function(){var t=Wt(this.getTipElement());this.setElementContent(t.find(re),this.getTitle()),t.removeClass(ne+" "+ie)},t.setElementContent=function(t,e){var n=this.config.html;"object"==typeof e&&(e.nodeType||e.jquery)?n?Wt(e).parent().is(t)||t.empty().append(e):t.text(Wt(e).text()):t[n?"html":"text"](e)},t.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},t._getAttachment=function(t){return Xt[t.toUpperCase()]},t._setListeners=function(){var i=this;this.config.trigger.split(" ").forEach(function(t){if("click"===t)Wt(i.element).on(i.constructor.Event.CLICK,i.config.selector,function(t){return i.toggle(t)});else if(t!==ce){var e=t===se?i.constructor.Event.MOUSEENTER:i.constructor.Event.FOCUSIN,n=t===se?i.constructor.Event.MOUSELEAVE:i.constructor.Event.FOCUSOUT;Wt(i.element).on(e,i.config.selector,function(t){return i._enter(t)}).on(n,i.config.selector,function(t){return i._leave(t)})}Wt(i.element).closest(".modal").on("hide.bs.modal",function(){return i.hide()})}),this.config.selector?this.config=s({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},t._fixTitle=function(){var t=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},t._enter=function(t,e){var n=this.constructor.DATA_KEY;(e=e||Wt(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),Wt(t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusin"===t.type?ae:se]=!0),Wt(e.getTipElement()).hasClass(ie)||e._hoverState===Jt?e._hoverState=Jt:(clearTimeout(e._timeout),e._hoverState=Jt,e.config.delay&&e.config.delay.show?e._timeout=setTimeout(function(){e._hoverState===Jt&&e.show()},e.config.delay.show):e.show())},t._leave=function(t,e){var n=this.constructor.DATA_KEY;(e=e||Wt(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),Wt(t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusout"===t.type?ae:se]=!1),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=te,e.config.delay&&e.config.delay.hide?e._timeout=setTimeout(function(){e._hoverState===te&&e.hide()},e.config.delay.hide):e.hide())},t._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},t._getConfig=function(t){return"number"==typeof(t=s({},this.constructor.Default,Wt(this.element).data(),t)).delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),Rr.typeCheckConfig(Bt,t,this.constructor.DefaultType),t},t._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},t._cleanTipClass=function(){var t=Wt(this.getTipElement()),e=t.attr("class").match(Yt);null!==e&&0<e.length&&t.removeClass(e.join(""))},t._handlePopperPlacementChange=function(t){this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},t._fixTransition=function(){var t=this.getTipElement(),e=this.config.animation;null===t.getAttribute("x-placement")&&(Wt(t).removeClass(ne),this.config.animation=!1,this.hide(),this.show(),this.config.animation=e)},c._jQueryInterface=function(n){return this.each(function(){var t=Wt(this).data(Gt),e="object"==typeof n&&n;if((t||!/dispose|hide/.test(n))&&(t||(t=new c(this,e),Wt(this).data(Gt,t)),"string"==typeof n)){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}})},T(c,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return Zt}},{key:"NAME",get:function(){return Bt}},{key:"DATA_KEY",get:function(){return Gt}},{key:"Event",get:function(){return ee}},{key:"EVENT_KEY",get:function(){return Kt}},{key:"DefaultType",get:function(){return zt}}]),c}(),Wt.fn[Bt]=he._jQueryInterface,Wt.fn[Bt].Constructor=he,Wt.fn[Bt].noConflict=function(){return Wt.fn[Bt]=qt,he._jQueryInterface},he),Qr=(de="popover",pe="."+(fe="bs.popover"),me=(ue=t).fn[de],ge="bs-popover",_e=new RegExp("(^|\\s)"+ge+"\\S+","g"),ve=s({},Pr.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),ye=s({},Pr.DefaultType,{content:"(string|element|function)"}),be="fade",Ee=".popover-header",Ie=".popover-body",Te={HIDE:"hide"+pe,HIDDEN:"hidden"+pe,SHOW:(Ce="show")+pe,SHOWN:"shown"+pe,INSERTED:"inserted"+pe,CLICK:"click"+pe,FOCUSIN:"focusin"+pe,FOCUSOUT:"focusout"+pe,MOUSEENTER:"mouseenter"+pe,MOUSELEAVE:"mouseleave"+pe},we=function(t){function i(){return t.apply(this,arguments)||this}a(i,t);var e=i.prototype;return e.isWithContent=function(){return this.getTitle()||this._getContent()},e.addAttachmentClass=function(t){ue(this.getTipElement()).addClass(ge+"-"+t)},e.getTipElement=function(){return this.tip=this.tip||ue(this.config.template)[0],this.tip},e.setContent=function(){var t=ue(this.getTipElement());this.setElementContent(t.find(Ee),this.getTitle());var e=this._getContent();"function"==typeof e&&(e=e.call(this.element)),this.setElementContent(t.find(Ie),e),t.removeClass(be+" "+Ce)},e._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},e._cleanTipClass=function(){var t=ue(this.getTipElement()),e=t.attr("class").match(_e);null!==e&&0<e.length&&t.removeClass(e.join(""))},i._jQueryInterface=function(n){return this.each(function(){var t=ue(this).data(fe),e="object"==typeof n?n:null;if((t||!/destroy|hide/.test(n))&&(t||(t=new i(this,e),ue(this).data(fe,t)),"string"==typeof n)){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}})},T(i,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return ve}},{key:"NAME",get:function(){return de}},{key:"DATA_KEY",get:function(){return fe}},{key:"Event",get:function(){return Te}},{key:"EVENT_KEY",get:function(){return pe}},{key:"DefaultType",get:function(){return ye}}]),i}(Pr),ue.fn[de]=we._jQueryInterface,ue.fn[de].Constructor=we,ue.fn[de].noConflict=function(){return ue.fn[de]=me,we._jQueryInterface},Se="scrollspy",ke="."+(De="bs.scrollspy"),Ne=(Ae=t).fn[Se],Oe={offset:10,method:"auto",target:""},$e={offset:"number",method:"string",target:"(string|element)"},je={ACTIVATE:"activate"+ke,SCROLL:"scroll"+ke,LOAD_DATA_API:"load"+ke+".data-api"},xe="dropdown-item",Fe="active",Re='[data-spy="scroll"]',Pe=".active",Qe=".nav, .list-group",Me=".nav-link",Le=".nav-item",He=".list-group-item",Ue=".dropdown",We=".dropdown-item",Be=".dropdown-toggle",Ge="offset",Ke="position",qe=function(){function n(t,e){var n=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(e),this._selector=this._config.target+" "+Me+","+this._config.target+" "+He+","+this._config.target+" "+We,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,Ae(this._scrollElement).on(je.SCROLL,function(t){return n._process(t)}),this.refresh(),this._process()}var t=n.prototype;return t.refresh=function(){var e=this,t=this._scrollElement===this._scrollElement.window?Ge:Ke,r="auto"===this._config.method?t:this._config.method,o=r===Ke?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),Ae.makeArray(Ae(this._selector)).map(function(t){var e,n=Rr.getSelectorFromElement(t);if(n&&(e=Ae(n)[0]),e){var i=e.getBoundingClientRect();if(i.width||i.height)return[Ae(e)[r]().top+o,n]}return null}).filter(function(t){return t}).sort(function(t,e){return t[0]-e[0]}).forEach(function(t){e._offsets.push(t[0]),e._targets.push(t[1])})},t.dispose=function(){Ae.removeData(this._element,De),Ae(this._scrollElement).off(ke),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},t._getConfig=function(t){if("string"!=typeof(t=s({},Oe,t)).target){var e=Ae(t.target).attr("id");e||(e=Rr.getUID(Se),Ae(t.target).attr("id",e)),t.target="#"+e}return Rr.typeCheckConfig(Se,t,$e),t},t._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},t._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},t._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},t._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),n<=t){var i=this._targets[this._targets.length-1];this._activeTarget!==i&&this._activate(i)}else{if(this._activeTarget&&t<this._offsets[0]&&0<this._offsets[0])return this._activeTarget=null,void this._clear();for(var r=this._offsets.length;r--;){this._activeTarget!==this._targets[r]&&t>=this._offsets[r]&&(void 0===this._offsets[r+1]||t<this._offsets[r+1])&&this._activate(this._targets[r])}}},t._activate=function(e){this._activeTarget=e,this._clear();var t=this._selector.split(",");t=t.map(function(t){return t+'[data-target="'+e+'"],'+t+'[href="'+e+'"]'});var n=Ae(t.join(","));n.hasClass(xe)?(n.closest(Ue).find(Be).addClass(Fe),n.addClass(Fe)):(n.addClass(Fe),n.parents(Qe).prev(Me+", "+He).addClass(Fe),n.parents(Qe).prev(Le).children(Me).addClass(Fe)),Ae(this._scrollElement).trigger(je.ACTIVATE,{relatedTarget:e})},t._clear=function(){Ae(this._selector).filter(Pe).removeClass(Fe)},n._jQueryInterface=function(e){return this.each(function(){var t=Ae(this).data(De);if(t||(t=new n(this,"object"==typeof e&&e),Ae(this).data(De,t)),"string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'+e+'"');t[e]()}})},T(n,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return Oe}}]),n}(),Ae(window).on(je.LOAD_DATA_API,function(){for(var t=Ae.makeArray(Ae(Re)),e=t.length;e--;){var n=Ae(t[e]);qe._jQueryInterface.call(n,n.data())}}),Ae.fn[Se]=qe._jQueryInterface,Ae.fn[Se].Constructor=qe,Ae.fn[Se].noConflict=function(){return Ae.fn[Se]=Ne,qe._jQueryInterface},ze="."+(Ye="bs.tab"),Xe=(Ve=t).fn.tab,Ze={HIDE:"hide"+ze,HIDDEN:"hidden"+ze,SHOW:"show"+ze,SHOWN:"shown"+ze,CLICK_DATA_API:"click"+ze+".data-api"},Je="dropdown-menu",tn="active",en="disabled",nn="fade",rn="show",on=".dropdown",sn=".nav, .list-group",an=".active",ln="> li > .active",cn='[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',hn=".dropdown-toggle",un="> .dropdown-menu .active",dn=function(){function i(t){this._element=t}var t=i.prototype;return t.show=function(){var n=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&Ve(this._element).hasClass(tn)||Ve(this._element).hasClass(en))){var t,i,e=Ve(this._element).closest(sn)[0],r=Rr.getSelectorFromElement(this._element);if(e){var o="UL"===e.nodeName?ln:an;i=(i=Ve.makeArray(Ve(e).find(o)))[i.length-1]}var s=Ve.Event(Ze.HIDE,{relatedTarget:this._element}),a=Ve.Event(Ze.SHOW,{relatedTarget:i});if(i&&Ve(i).trigger(s),Ve(this._element).trigger(a),!a.isDefaultPrevented()&&!s.isDefaultPrevented()){r&&(t=Ve(r)[0]),this._activate(this._element,e);var l=function(){var t=Ve.Event(Ze.HIDDEN,{relatedTarget:n._element}),e=Ve.Event(Ze.SHOWN,{relatedTarget:i});Ve(i).trigger(t),Ve(n._element).trigger(e)};t?this._activate(t,t.parentNode,l):l()}}},t.dispose=function(){Ve.removeData(this._element,Ye),this._element=null},t._activate=function(t,e,n){var i=this,r=("UL"===e.nodeName?Ve(e).find(ln):Ve(e).children(an))[0],o=n&&Rr.supportsTransitionEnd()&&r&&Ve(r).hasClass(nn),s=function(){return i._transitionComplete(t,r,n)};r&&o?Ve(r).one(Rr.TRANSITION_END,s).emulateTransitionEnd(150):s()},t._transitionComplete=function(t,e,n){if(e){Ve(e).removeClass(rn+" "+tn);var i=Ve(e.parentNode).find(un)[0];i&&Ve(i).removeClass(tn),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)}if(Ve(t).addClass(tn),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),Rr.reflow(t),Ve(t).addClass(rn),t.parentNode&&Ve(t.parentNode).hasClass(Je)){var r=Ve(t).closest(on)[0];r&&Ve(r).find(hn).addClass(tn),t.setAttribute("aria-expanded",!0)}n&&n()},i._jQueryInterface=function(n){return this.each(function(){var t=Ve(this),e=t.data(Ye);if(e||(e=new i(this),t.data(Ye,e)),"string"==typeof n){if(void 0===e[n])throw new TypeError('No method named "'+n+'"');e[n]()}})},T(i,null,[{key:"VERSION",get:function(){return"4.0.0"}}]),i}(),Ve(document).on(Ze.CLICK_DATA_API,cn,function(t){t.preventDefault(),dn._jQueryInterface.call(Ve(this),"show")}),Ve.fn.tab=dn._jQueryInterface,Ve.fn.tab.Constructor=dn,Ve.fn.tab.noConflict=function(){return Ve.fn.tab=Xe,dn._jQueryInterface},jQuery,fn=!1,pn="",mn={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"},gn={transitionEndSupported:function(){return fn},transitionEndSelector:function(){return pn},isChar:function(t){return void 0===t.which||"number"==typeof t.which&&0<t.which&&(!t.ctrlKey&&!t.metaKey&&!t.altKey&&8!==t.which&&9!==t.which&&13!==t.which&&16!==t.which&&17!==t.which&&20!==t.which&&27!==t.which)},assert:function(t,e,n){if(e)throw void 0===!t&&t.css("border","1px solid red"),console.error(n,t),n},describe:function(t){return void 0===t?"undefined":0===t.length?"(no matching elements)":t[0].outerHTML.split(">")[0]+">"}},function(){for(var t in fn=function(){if(window.QUnit)return!1;var t=document.createElement("bmd");for(var e in mn)if(void 0!==t.style[e])return mn[e];return!1}(),mn)pn+=" "+mn[t]}(),gn),Mr=(_n=jQuery,vn="is-filled",yn="is-focused",bn={BMD_FORM_GROUP:"."+"bmd-form-group"},Cn={},function(){function t(t,e,n){for(var i in void 0===n&&(n={}),this.$element=t,this.config=_n.extend(!0,{},Cn,e),n)this[i]=n[i]}var e=t.prototype;return e.dispose=function(t){this.$element.data(t,null),this.$element=null,this.config=null},e.addFormGroupFocus=function(){this.$element.prop("disabled")||this.$bmdFormGroup.addClass(yn)},e.removeFormGroupFocus=function(){this.$bmdFormGroup.removeClass(yn)},e.removeIsFilled=function(){this.$bmdFormGroup.removeClass(vn)},e.addIsFilled=function(){this.$bmdFormGroup.addClass(vn)},e.findMdbFormGroup=function(t){void 0===t&&(t=!0);var e=this.$element.closest(bn.BMD_FORM_GROUP);return 0===e.length&&t&&_n.error("Failed to find "+bn.BMD_FORM_GROUP+" for "+Qr.describe(this.$element)),e},t}()),Lr=(En=jQuery,Dn={validate:!(Sn={FORM_GROUP:"."+"form-group",BMD_FORM_GROUP:"."+(In="bmd-form-group"),BMD_LABEL_WILDCARD:"label[class^='"+(Tn="bmd-label")+"'], label[class*=' "+Tn+"']"}),formGroup:{required:!(An="input-group")},bmdFormGroup:{template:"<span class='"+In+"'></span>",create:!0,required:!0},label:{required:!(wn="has-danger"),selectors:[".form-control-label","> label"],className:"bmd-label-static"},requiredClasses:[],invalidComponentMatches:[],convertInputSizeVariations:!0},kn={"form-control-lg":"bmd-form-group-lg","form-control-sm":"bmd-form-group-sm"},function(r){function t(t,e,n){var i;return void 0===n&&(n={}),(i=r.call(this,t,En.extend(!0,{},Dn,e),n)||this)._rejectInvalidComponentMatches(),i.rejectWithoutRequiredStructure(),i._rejectWithoutRequiredClasses(),i.$formGroup=i.findFormGroup(i.config.formGroup.required),i.$bmdFormGroup=i.resolveMdbFormGroup(),i.$bmdLabel=i.resolveMdbLabel(),i.resolveMdbFormGroupSizing(),i.addFocusListener(),i.addChangeListener(),""!=i.$element.val()&&i.addIsFilled(),i}a(t,r);var e=t.prototype;return e.dispose=function(t){r.prototype.dispose.call(this,t),this.$bmdFormGroup=null,this.$formGroup=null},e.rejectWithoutRequiredStructure=function(){},e.addFocusListener=function(){var t=this;this.$element.on("focus",function(){t.addFormGroupFocus()}).on("blur",function(){t.removeFormGroupFocus()})},e.addChangeListener=function(){var e=this;this.$element.on("keydown paste",function(t){Qr.isChar(t)&&e.addIsFilled()}).on("keyup change",function(){e.isEmpty()?e.removeIsFilled():e.addIsFilled(),e.config.validate&&(void 0===e.$element[0].checkValidity||e.$element[0].checkValidity()?e.removeHasDanger():e.addHasDanger())})},e.addHasDanger=function(){this.$bmdFormGroup.addClass(wn)},e.removeHasDanger=function(){this.$bmdFormGroup.removeClass(wn)},e.isEmpty=function(){return null===this.$element.val()||void 0===this.$element.val()||""===this.$element.val()},e.resolveMdbFormGroup=function(){var t=this.findMdbFormGroup(!1);return void 0!==t&&0!==t.length||(!this.config.bmdFormGroup.create||void 0!==this.$formGroup&&0!==this.$formGroup.length?this.$formGroup.addClass(In):this.outerElement().parent().hasClass(An)?this.outerElement().parent().wrap(this.config.bmdFormGroup.template):this.outerElement().wrap(this.config.bmdFormGroup.template),t=this.findMdbFormGroup(this.config.bmdFormGroup.required)),t},e.outerElement=function(){return this.$element},e.resolveMdbLabel=function(){var t=this.$bmdFormGroup.find(Sn.BMD_LABEL_WILDCARD);return void 0!==t&&0!==t.length||void 0===(t=this.findMdbLabel(this.config.label.required))||0===t.length||t.addClass(this.config.label.className),t},e.findMdbLabel=function(t){void 0===t&&(t=!0);var e=null,n=this.config.label.selectors,i=Array.isArray(n),r=0;for(n=i?n:n[Symbol.iterator]();;){var o;if(i){if(r>=n.length)break;o=n[r++]}else{if((r=n.next()).done)break;o=r.value}var s=o;if(void 0!==(e=En.isFunction(s)?s(this):this.$bmdFormGroup.find(s))&&0<e.length)break}return 0===e.length&&t&&En.error("Failed to find "+Sn.BMD_LABEL_WILDCARD+" within form-group for "+Qr.describe(this.$element)),e},e.findFormGroup=function(t){void 0===t&&(t=!0);var e=this.$element.closest(Sn.FORM_GROUP);return 0===e.length&&t&&En.error("Failed to find "+Sn.FORM_GROUP+" for "+Qr.describe(this.$element)),e},e.resolveMdbFormGroupSizing=function(){if(this.config.convertInputSizeVariations)for(var t in kn)this.$element.hasClass(t)&&this.$bmdFormGroup.addClass(kn[t])},e._rejectInvalidComponentMatches=function(){var t=this.config.invalidComponentMatches,e=Array.isArray(t),n=0;for(t=e?t:t[Symbol.iterator]();;){var i;if(e){if(n>=t.length)break;i=t[n++]}else{if((n=t.next()).done)break;i=n.value}i.rejectMatch(this.constructor.name,this.$element)}},e._rejectWithoutRequiredClasses=function(){var t=this.config.requiredClasses,e=Array.isArray(t),n=0;for(t=e?t:t[Symbol.iterator]();;){var i;if(e){if(n>=t.length)break;i=t[n++]}else{if((n=t.next()).done)break;i=n.value}var r=i,o=!1;if(-1!==r.indexOf("||")){var s=r.split("||"),a=Array.isArray(s),l=0;for(s=a?s:s[Symbol.iterator]();;){var c;if(a){if(l>=s.length)break;c=s[l++]}else{if((l=s.next()).done)break;c=l.value}var h=c;if(this.$element.hasClass(h)){o=!0;break}}}else this.$element.hasClass(r)&&(o=!0);o||En.error(this.constructor.name+" element: "+Qr.describe(this.$element)+" requires class: "+r)}},t}(Mr)),Hr=(Nn=jQuery,On={label:{required:!1}},$n="label",function(r){function t(t,e,n){var i;return(i=r.call(this,t,Nn.extend(!0,{},On,e),n)||this).decorateMarkup(),i}a(t,r);var e=t.prototype;return e.decorateMarkup=function(){var t=Nn(this.config.template);this.$element.after(t),!1!==this.config.ripples&&t.bmdRipples()},e.outerElement=function(){return this.$element.parent().closest("."+this.outerClass)},e.rejectWithoutRequiredStructure=function(){Qr.assert(this.$element,"label"===!this.$element.parent().prop("tagName"),this.constructor.name+"'s "+Qr.describe(this.$element)+" parent element should be <label>."),Qr.assert(this.$element,!this.outerElement().hasClass(this.outerClass),this.constructor.name+"'s "+Qr.describe(this.$element)+" outer element should have class "+this.outerClass+".")},e.addFocusListener=function(){var t=this;this.$element.closest($n).hover(function(){t.addFormGroupFocus()},function(){t.removeFormGroupFocus()})},e.addChangeListener=function(){var t=this;this.$element.change(function(){t.$element.blur()})},t}(Lr)),Ur=(jn=jQuery,Fn="bmd."+(xn="checkbox"),Rn="bmd"+(xn.charAt(0).toUpperCase()+xn.slice(1)),Pn=jn.fn[Rn],Qn={template:"<span class='checkbox-decorator'><span class='check'></span></span>"},Mn=function(i){function r(t,e,n){return void 0===n&&(n={inputType:xn,outerClass:xn}),i.call(this,t,jn.extend(!0,Qn,e),n)||this}return a(r,i),r.prototype.dispose=function(t){void 0===t&&(t=Fn),i.prototype.dispose.call(this,t)},r.matches=function(t){return"checkbox"===t.attr("type")},r.rejectMatch=function(t,e){Qr.assert(this.$element,this.matches(e),t+" component element "+Qr.describe(e)+" is invalid for type='checkbox'.")},r._jQueryInterface=function(n){return this.each(function(){var t=jn(this),e=t.data(Fn);e||(e=new r(t,n),t.data(Fn,e))})},r}(Hr),jn.fn[Rn]=Mn._jQueryInterface,jn.fn[Rn].Constructor=Mn,jn.fn[Rn].noConflict=function(){return jn.fn[Rn]=Pn,Mn._jQueryInterface},Mn),Wr=(Ln=jQuery,Un="bmd."+(Hn="checkboxInline"),Wn="bmd"+(Hn.charAt(0).toUpperCase()+Hn.slice(1)),Bn=Ln.fn[Wn],Gn={bmdFormGroup:{create:!1,required:!1}},Kn=function(i){function r(t,e,n){return void 0===n&&(n={inputType:"checkbox",outerClass:"checkbox-inline"}),i.call(this,t,Ln.extend(!0,{},Gn,e),n)||this}return a(r,i),r.prototype.dispose=function(){i.prototype.dispose.call(this,Un)},r._jQueryInterface=function(n){return this.each(function(){var t=Ln(this),e=t.data(Un);e||(e=new r(t,n),t.data(Un,e))})},r}(Ur),Ln.fn[Wn]=Kn._jQueryInterface,Ln.fn[Wn].Constructor=Kn,Ln.fn[Wn].noConflict=function(){return Ln.fn[Wn]=Bn,Kn._jQueryInterface},qn=jQuery,Yn="bmd."+(Vn="collapseInline"),zn="bmd"+(Vn.charAt(0).toUpperCase()+Vn.slice(1)),Xn=qn.fn[zn],Zn="input, select, textarea",Jn="collapse",ti="width",ei={},ni=function(o){function i(t,e){var n;(n=o.call(this,t,qn.extend(!0,{},ei,e))||this).$bmdFormGroup=n.findMdbFormGroup(!0);var i=t.data("target");n.$collapse=qn(i),Qr.assert(t,0===n.$collapse.length,"Cannot find collapse target for "+Qr.describe(t)),Qr.assert(n.$collapse,!n.$collapse.hasClass(Jn),Qr.describe(n.$collapse)+" is expected to have the '"+Jn+"' class.  It is being targeted by "+Qr.describe(t));var r=n.$bmdFormGroup.find(Zn);return 0<r.length&&(n.$input=r.first()),n.$collapse.hasClass(ti)||n.$collapse.addClass(ti),n.$input&&(n.$collapse.on("shown.bs.collapse",function(){n.$input.focus()}),n.$input.blur(function(){n.$collapse.collapse("hide")})),n}return a(i,o),i.prototype.dispose=function(){o.prototype.dispose.call(this,Yn),this.$bmdFormGroup=null,this.$collapse=null,this.$input=null},i._jQueryInterface=function(n){return this.each(function(){var t=qn(this),e=t.data(Yn);e||(e=new i(t,n),t.data(Yn,e))})},i}(Mr),qn.fn[zn]=ni._jQueryInterface,qn.fn[zn].Constructor=ni,qn.fn[zn].noConflict=function(){return qn.fn[zn]=Xn,ni._jQueryInterface},ii=jQuery,oi="bmd."+(ri="file"),si="bmd"+(ri.charAt(0).toUpperCase()+ri.slice(1)),ai=ii.fn[si],li={},ci=ri,hi="is-file",ui="input.form-control[readonly]",di=function(i){function r(t,e){var n;return(n=i.call(this,t,ii.extend(!0,li,e))||this).$bmdFormGroup.addClass(hi),n}a(r,i);var t=r.prototype;return t.dispose=function(){i.prototype.dispose.call(this,oi)},r.matches=function(t){return"file"===t.attr("type")},r.rejectMatch=function(t,e){Qr.assert(this.$element,this.matches(e),t+" component element "+Qr.describe(e)+" is invalid for type='file'.")},t.outerElement=function(){return this.$element.parent().closest("."+ci)},t.rejectWithoutRequiredStructure=function(){Qr.assert(this.$element,"label"===!this.outerElement().prop("tagName"),this.constructor.name+"'s "+Qr.describe(this.$element)+" parent element "+Qr.describe(this.outerElement())+" should be <label>."),Qr.assert(this.$element,!this.outerElement().hasClass(ci),this.constructor.name+"'s "+Qr.describe(this.$element)+" parent element "+Qr.describe(this.outerElement())+" should have class ."+ci+".")},t.addFocusListener=function(){var t=this;this.$bmdFormGroup.on("focus",function(){t.addFormGroupFocus()}).on("blur",function(){t.removeFormGroupFocus()})},t.addChangeListener=function(){var t=this;this.$element.on("change",function(){var n="";ii.each(t.$element.files,function(t,e){n+=e.name+"  , "}),(n=n.substring(0,n.length-2))?t.addIsFilled():t.removeIsFilled(),t.$bmdFormGroup.find(ui).val(n)})},r._jQueryInterface=function(n){return this.each(function(){var t=ii(this),e=t.data(oi);e||(e=new r(t,n),t.data(oi,e))})},r}(Lr),ii.fn[si]=di._jQueryInterface,ii.fn[si].Constructor=di,ii.fn[si].noConflict=function(){return ii.fn[si]=ai,di._jQueryInterface},fi=jQuery,mi="bmd."+(pi="radio"),gi="bmd"+(pi.charAt(0).toUpperCase()+pi.slice(1)),_i=fi.fn[gi],vi={template:"<span class='bmd-radio'></span>"},yi=function(i){function r(t,e,n){return void 0===n&&(n={inputType:pi,outerClass:pi}),i.call(this,t,fi.extend(!0,vi,e),n)||this}return a(r,i),r.prototype.dispose=function(t){void 0===t&&(t=mi),i.prototype.dispose.call(this,t)},r.matches=function(t){return"radio"===t.attr("type")},r.rejectMatch=function(t,e){Qr.assert(this.$element,this.matches(e),t+" component element "+Qr.describe(e)+" is invalid for type='radio'.")},r._jQueryInterface=function(n){return this.each(function(){var t=fi(this),e=t.data(mi);e||(e=new r(t,n),t.data(mi,e))})},r}(Hr),fi.fn[gi]=yi._jQueryInterface,fi.fn[gi].Constructor=yi,fi.fn[gi].noConflict=function(){return fi.fn[gi]=_i,yi._jQueryInterface},yi),Br=(bi=jQuery,Ei="bmd."+(Ci="radioInline"),Ii="bmd"+(Ci.charAt(0).toUpperCase()+Ci.slice(1)),Ti=bi.fn[Ii],wi={bmdFormGroup:{create:!1,required:!1}},Ai=function(i){function r(t,e,n){return void 0===n&&(n={inputType:"radio",outerClass:"radio-inline"}),i.call(this,t,bi.extend(!0,{},wi,e),n)||this}return a(r,i),r.prototype.dispose=function(){i.prototype.dispose.call(this,Ei)},r._jQueryInterface=function(n){return this.each(function(){var t=bi(this),e=t.data(Ei);e||(e=new r(t,n),t.data(Ei,e))})},r}(Wr),bi.fn[Ii]=Ai._jQueryInterface,bi.fn[Ii].Constructor=Ai,bi.fn[Ii].noConflict=function(){return bi.fn[Ii]=Ti,Ai._jQueryInterface},Si=jQuery,Di={requiredClasses:["form-control"]},function(i){function t(t,e){var n;return(n=i.call(this,t,Si.extend(!0,Di,e))||this).isEmpty()&&n.removeIsFilled(),n}return a(t,i),t}(Lr)),Gr=(ki=jQuery,Oi="bmd."+(Ni="select"),$i="bmd"+(Ni.charAt(0).toUpperCase()+Ni.slice(1)),ji=ki.fn[$i],xi={requiredClasses:["form-control||custom-select"]},Fi=function(i){function r(t,e){var n;return(n=i.call(this,t,ki.extend(!0,xi,e))||this).addIsFilled(),n}return a(r,i),r.prototype.dispose=function(){i.prototype.dispose.call(this,Oi)},r.matches=function(t){return"select"===t.prop("tagName")},r.rejectMatch=function(t,e){Qr.assert(this.$element,this.matches(e),t+" component element "+Qr.describe(e)+" is invalid for <select>.")},r._jQueryInterface=function(n){return this.each(function(){var t=ki(this),e=t.data(Oi);e||(e=new r(t,n),t.data(Oi,e))})},r}(Br),ki.fn[$i]=Fi._jQueryInterface,ki.fn[$i].Constructor=Fi,ki.fn[$i].noConflict=function(){return ki.fn[$i]=ji,Fi._jQueryInterface},Ri=jQuery,Qi="bmd."+(Pi="switch"),Mi="bmd"+(Pi.charAt(0).toUpperCase()+Pi.slice(1)),Li=Ri.fn[Mi],Hi={template:"<span class='bmd-switch-track'></span>"},Ui=function(i){function r(t,e,n){return void 0===n&&(n={inputType:"checkbox",outerClass:"switch"}),i.call(this,t,Ri.extend(!0,{},Hi,e),n)||this}return a(r,i),r.prototype.dispose=function(){i.prototype.dispose.call(this,Qi)},r._jQueryInterface=function(n){return this.each(function(){var t=Ri(this),e=t.data(Qi);e||(e=new r(t,n),t.data(Qi,e))})},r}(Ur),Ri.fn[Mi]=Ui._jQueryInterface,Ri.fn[Mi].Constructor=Ui,Ri.fn[Mi].noConflict=function(){return Ri.fn[Mi]=Li,Ui._jQueryInterface},Wi=jQuery,Gi="bmd."+(Bi="text"),Ki="bmd"+(Bi.charAt(0).toUpperCase()+Bi.slice(1)),qi=Wi.fn[Ki],Vi={},Yi=function(n){function i(t,e){return n.call(this,t,Wi.extend(!0,Vi,e))||this}return a(i,n),i.prototype.dispose=function(t){void 0===t&&(t=Gi),n.prototype.dispose.call(this,t)},i.matches=function(t){return"text"===t.attr("type")},i.rejectMatch=function(t,e){Qr.assert(this.$element,this.matches(e),t+" component element "+Qr.describe(e)+" is invalid for type='text'.")},i._jQueryInterface=function(n){return this.each(function(){var t=Wi(this),e=t.data(Gi);e||(e=new i(t,n),t.data(Gi,e))})},i}(Br),Wi.fn[Ki]=Yi._jQueryInterface,Wi.fn[Ki].Constructor=Yi,Wi.fn[Ki].noConflict=function(){return Wi.fn[Ki]=qi,Yi._jQueryInterface},zi=jQuery,Zi="bmd."+(Xi="textarea"),Ji="bmd"+(Xi.charAt(0).toUpperCase()+Xi.slice(1)),tr=zi.fn[Ji],er={},nr=function(n){function i(t,e){return n.call(this,t,zi.extend(!0,er,e))||this}return a(i,n),i.prototype.dispose=function(){n.prototype.dispose.call(this,Zi)},i.matches=function(t){return"textarea"===t.prop("tagName")},i.rejectMatch=function(t,e){Qr.assert(this.$element,this.matches(e),t+" component element "+Qr.describe(e)+" is invalid for <textarea>.")},i._jQueryInterface=function(n){return this.each(function(){var t=zi(this),e=t.data(Zi);e||(e=new i(t,n),t.data(Zi,e))})},i}(Br),zi.fn[Ji]=nr._jQueryInterface,zi.fn[Ji].Constructor=nr,zi.fn[Ji].noConflict=function(){return zi.fn[Ji]=tr,nr._jQueryInterface},function(c){if("undefined"==typeof Popper)throw new Error("Bootstrap dropdown require Popper.js (https://popper.js.org)");var n="dropdown",h="bs.dropdown",e="."+h,t=".data-api",i=c.fn[n],s=new RegExp("38|40|27"),u={HIDE:"hide"+e,HIDDEN:"hidden"+e,SHOW:"show"+e,SHOWN:"shown"+e,CLICK:"click"+e,CLICK_DATA_API:"click"+e+t,KEYDOWN_DATA_API:"keydown"+e+t,KEYUP_DATA_API:"keyup"+e+t,TRANSITION_END:"transitionend webkitTransitionEnd oTransitionEnd animationend webkitAnimationEnd oAnimationEnd"},a="disabled",d="show",f="showing",p="hiding",m="dropup",g="dropdown-menu-right",_="dropdown-menu-left",v='[data-toggle="dropdown"]',r=".dropdown form",o=".dropdown-menu",y=".navbar-nav",b=".dropdown-menu .dropdown-item:not(.disabled)",C={TOP:"top-start",TOPEND:"top-end",BOTTOM:"bottom-start",BOTTOMEND:"bottom-end"},E={placement:C.BOTTOM,offset:0,flip:!0},I={placement:"string",offset:"(number|string)",flip:"boolean"},l=function(){function l(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var t=l.prototype;return t.toggle=function(){var t=this;if(!this._element.disabled&&!c(this._element).hasClass(a)){var e=l._getParentFromElement(this._element),n=c(this._menu).hasClass(d);if(l._clearMenus(),!n){var i={relatedTarget:this._element},r=c.Event(u.SHOW,i);if(c(e).trigger(r),!r.isDefaultPrevented()){var o=this._element;c(e).hasClass(m)&&(c(this._menu).hasClass(_)||c(this._menu).hasClass(g))&&(o=e),this._popper=new Popper(o,this._menu,this._getPopperConfig()),"ontouchstart"in document.documentElement&&!c(e).closest(y).length&&c("body").children().on("mouseover",null,c.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),c(this._menu).one(u.TRANSITION_END,function(){c(e).trigger(c.Event(u.SHOWN,i)),c(t._menu).removeClass(f)}),c(this._menu).addClass(d+" "+f),c(e).addClass(d)}}}},t.dispose=function(){c.removeData(this._element,h),c(this._element).off(e),this._element=null,(this._menu=null)!==this._popper&&this._popper.destroy(),this._popper=null},t.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},t._addEventListeners=function(){var e=this;c(this._element).on(u.CLICK,function(t){t.preventDefault(),t.stopPropagation(),e.toggle()})},t._getConfig=function(t){var e=c(this._element).data();return void 0!==e.placement&&(e.placement=C[e.placement.toUpperCase()]),t=c.extend({},this.constructor.Default,c(this._element).data(),t),Rr.typeCheckConfig(n,t,this.constructor.DefaultType),t},t._getMenuElement=function(){if(!this._menu){var t=l._getParentFromElement(this._element);this._menu=c(t).find(o)[0]}return this._menu},t._getPlacement=function(){var t=c(this._element).parent(),e=this._config.placement;return t.hasClass(m)||this._config.placement===C.TOP?(e=C.TOP,c(this._menu).hasClass(g)&&(e=C.TOPEND)):c(this._menu).hasClass(g)&&(e=C.BOTTOMEND),e},t._detectNavbar=function(){return 0<c(this._element).closest(".navbar").length},t._getPopperConfig=function(){var t={placement:this._getPlacement(),modifiers:{offset:{offset:this._config.offset},flip:{enabled:this._config.flip}}};return this._inNavbar&&(t.modifiers.applyStyle={enabled:!this._inNavbar}),t},l._jQueryInterface=function(e){return this.each(function(){var t=c(this).data(h);if(t||(t=new l(this,"object"==typeof e?e:null),c(this).data(h,t)),"string"==typeof e){if(void 0===t[e])throw new Error('No method named "'+e+'"');t[e]()}})},l._clearMenus=function(s){if(!s||3!==s.which&&("keyup"!==s.type||9===s.which))for(var a=c.makeArray(c(v)),t=function(t){var e=l._getParentFromElement(a[t]),n=c(a[t]).data(h),i={relatedTarget:a[t]};if(!n)return"continue";var r=n._menu;if(!c(e).hasClass(d))return"continue";if(s&&("click"===s.type&&/input|textarea/i.test(s.target.tagName)||"keyup"===s.type&&9===s.which)&&c.contains(e,s.target))return"continue";var o=c.Event(u.HIDE,i);if(c(e).trigger(o),o.isDefaultPrevented())return"continue";"ontouchstart"in document.documentElement&&c("body").children().off("mouseover",null,c.noop),a[t].setAttribute("aria-expanded","false"),c(r).addClass(p).removeClass(d),c(e).removeClass(d),c(r).one(u.TRANSITION_END,function(){c(e).trigger(c.Event(u.HIDDEN,i)),c(r).removeClass(p)})},e=0;e<a.length;e++)t(e)},l._getParentFromElement=function(t){var e,n=Rr.getSelectorFromElement(t);return n&&(e=c(n)[0]),e||t.parentNode},l._dataApiKeydownHandler=function(t){if(!(!s.test(t.which)||/button/i.test(t.target.tagName)&&32===t.which||/input|textarea/i.test(t.target.tagName)||(t.preventDefault(),t.stopPropagation(),this.disabled||c(this).hasClass(a)))){var e=l._getParentFromElement(this),n=c(e).hasClass(d);if((n||27===t.which&&32===t.which)&&(!n||27!==t.which&&32!==t.which)){var i=c(e).find(b).get();if(i.length){var r=i.indexOf(t.target);38===t.which&&0<r&&r--,40===t.which&&r<i.length-1&&r++,r<0&&(r=0),i[r].focus()}}else{if(27===t.which){var o=c(e).find(v)[0];c(o).trigger("focus")}c(this).trigger("click")}}},T(l,null,[{key:"VERSION",get:function(){return"4.0.0-beta"}},{key:"Default",get:function(){return E}},{key:"DefaultType",get:function(){return I}}]),l}();c(document).on(u.KEYDOWN_DATA_API,v,l._dataApiKeydownHandler).on(u.KEYDOWN_DATA_API,o,l._dataApiKeydownHandler).on(u.CLICK_DATA_API+" "+u.KEYUP_DATA_API,l._clearMenus).on(u.CLICK_DATA_API,v,function(t){t.preventDefault(),t.stopPropagation(),l._jQueryInterface.call(c(this),"toggle")}).on(u.CLICK_DATA_API,r,function(t){t.stopPropagation()}),c.fn[n]=l._jQueryInterface,c.fn[n].Constructor=l,c.fn[n].noConflict=function(){return c.fn[n]=i,l._jQueryInterface}}(jQuery),ir=jQuery,sr={CANVAS:"."+(rr="bmd-layout-canvas"),CONTAINER:"."+"bmd-layout-container",BACKDROP:"."+(or="bmd-layout-backdrop")},ar={canvas:{create:!0,required:!0,template:'<div class="'+rr+'"></div>'},backdrop:{create:!0,required:!0,template:'<div class="'+or+'"></div>'}},function(r){function t(t,e,n){var i;return void 0===n&&(n={}),(i=r.call(this,t,ir.extend(!0,{},ar,e),n)||this).$container=i.findContainer(!0),i.$backdrop=i.resolveBackdrop(),i.resolveCanvas(),i}a(t,r);var e=t.prototype;return e.dispose=function(t){r.prototype.dispose.call(this,t),this.$container=null,this.$backdrop=null},e.resolveCanvas=function(){var t=this.findCanvas(!1);return void 0!==t&&0!==t.length||(this.config.canvas.create&&this.$container.wrap(this.config.canvas.template),t=this.findCanvas(this.config.canvas.required)),t},e.findCanvas=function(t,e){void 0===t&&(t=!0),void 0===e&&(e=this.$container);var n=e.closest(sr.CANVAS);return 0===n.length&&t&&ir.error("Failed to find "+sr.CANVAS+" for "+Qr.describe(e)),n},e.resolveBackdrop=function(){var t=this.findBackdrop(!1);return void 0!==t&&0!==t.length||(this.config.backdrop.create&&this.$container.append(this.config.backdrop.template),t=this.findBackdrop(this.config.backdrop.required)),t},e.findBackdrop=function(t,e){void 0===t&&(t=!0),void 0===e&&(e=this.$container);var n=e.find("> "+sr.BACKDROP);return 0===n.length&&t&&ir.error("Failed to find "+sr.BACKDROP+" for "+Qr.describe(e)),n},e.findContainer=function(t,e){void 0===t&&(t=!0),void 0===e&&(e=this.$element);var n=e.closest(sr.CONTAINER);return 0===n.length&&t&&ir.error("Failed to find "+sr.CONTAINER+" for "+Qr.describe(e)),n},t}(Mr));lr=jQuery,hr="bmd."+(cr="drawer"),ur="bmd"+(cr.charAt(0).toUpperCase()+cr.slice(1)),dr=lr.fn[ur],fr=27,pr="in",mr="bmd-drawer-in",gr="bmd-drawer-out",_r={focusSelector:"a, button, input"},vr=function(i){function r(t,e){var n;return(n=i.call(this,t,lr.extend(!0,{},_r,e))||this).$toggles=lr('[data-toggle="drawer"][href="#'+n.$element[0].id+'"], [data-toggle="drawer"][data-target="#'+n.$element[0].id+'"]'),n._addAria(),n.$backdrop.keydown(function(t){t.which===fr&&n.hide()}).click(function(){n.hide()}),n.$element.keydown(function(t){t.which===fr&&n.hide()}),n.$toggles.click(function(){n.toggle()}),n}a(r,i);var t=r.prototype;return t.dispose=function(){i.prototype.dispose.call(this,hr),this.$toggles=null},t.toggle=function(){this._isOpen()?this.hide():this.show()},t.show=function(){if(!this._isForcedClosed()&&!this._isOpen()){this.$toggles.attr("aria-expanded",!0),this.$element.attr("aria-expanded",!0),this.$element.attr("aria-hidden",!1);var t=this.$element.find(this.config.focusSelector);0<t.length&&t.first().focus(),this.$container.addClass(mr),this.$backdrop.addClass(pr)}},t.hide=function(){this._isOpen()&&(this.$toggles.attr("aria-expanded",!1),this.$element.attr("aria-expanded",!1),this.$element.attr("aria-hidden",!0),this.$container.removeClass(mr),this.$backdrop.removeClass(pr))},t._isOpen=function(){return this.$container.hasClass(mr)},t._isForcedClosed=function(){return this.$container.hasClass(gr)},t._addAria=function(){var t=this._isOpen();this.$element.attr("aria-expanded",t),this.$element.attr("aria-hidden",t),this.$toggles.length&&this.$toggles.attr("aria-expanded",t)},r._jQueryInterface=function(n){return this.each(function(){var t=lr(this),e=t.data(hr);e||(e=new r(t,n),t.data(hr,e))})},r}(Gr),lr.fn[ur]=vr._jQueryInterface,lr.fn[ur].Constructor=vr,lr.fn[ur].noConflict=function(){return lr.fn[ur]=dr,vr._jQueryInterface},yr=jQuery,Cr="bmd."+(br="ripples"),Er="bmd"+(br.charAt(0).toUpperCase()+br.slice(1)),Ir=yr.fn[Er],Ar={CONTAINER:"."+(Tr="ripple-container"),DECORATOR:"."+(wr="ripple-decorator")},Sr={container:{template:"<div class='"+Tr+"'></div>"},decorator:{template:"<div class='"+wr+"'></div>"},trigger:{start:"mousedown touchstart",end:"mouseup mouseleave touchend"},touchUserAgentRegex:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i,duration:500},Dr=function(){function i(t,e){var n=this;this.$element=t,this.config=yr.extend(!0,{},Sr,e),this.$element.on(this.config.trigger.start,function(t){n._onStartRipple(t)})}var t=i.prototype;return t.dispose=function(){this.$element.data(Cr,null),this.$element=null,this.$container=null,this.$decorator=null,this.config=null},t._onStartRipple=function(t){var e=this;if(!this._isTouch()||"mousedown"!==t.type){this._findOrCreateContainer();var n=this._getRelY(t),i=this._getRelX(t);(n||i)&&(this.$decorator.css({left:i,top:n,"background-color":this._getRipplesColor()}),this._forceStyleApplication(),this.rippleOn(),setTimeout(function(){e.rippleEnd()},this.config.duration),this.$element.on(this.config.trigger.end,function(){e.$decorator&&(e.$decorator.data("mousedown","off"),"off"===e.$decorator.data("animating")&&e.rippleOut())}))}},t._findOrCreateContainer=function(){(!this.$container||0<!this.$container.length)&&(this.$element.append(this.config.container.template),this.$container=this.$element.find(Ar.CONTAINER)),this.$container.append(this.config.decorator.template),this.$decorator=this.$container.find(Ar.DECORATOR)},t._forceStyleApplication=function(){return window.getComputedStyle(this.$decorator[0]).opacity},t._getRelX=function(t){var e=this.$container.offset();return this._isTouch()?1===(t=t.originalEvent).touches.length&&t.touches[0].pageX-e.left:t.pageX-e.left},t._getRelY=function(t){var e=this.$container.offset();return this._isTouch()?1===(t=t.originalEvent).touches.length&&t.touches[0].pageY-e.top:t.pageY-e.top},t._getRipplesColor=function(){return this.$element.data("ripple-color")?this.$element.data("ripple-color"):window.getComputedStyle(this.$element[0]).color},t._isTouch=function(){return this.config.touchUserAgentRegex.test(navigator.userAgent)},t.rippleEnd=function(){this.$decorator&&(this.$decorator.data("animating","off"),"off"===this.$decorator.data("mousedown")&&this.rippleOut(this.$decorator))},t.rippleOut=function(){var t=this;this.$decorator.off(),Qr.transitionEndSupported()?this.$decorator.addClass("ripple-out"):this.$decorator.animate({opacity:0},100,function(){t.$decorator.trigger("transitionend")}),this.$decorator.on(Qr.transitionEndSelector(),function(){t.$decorator&&(t.$decorator.remove(),t.$decorator=null)})},t.rippleOn=function(){var t=this,e=this._getNewSize();Qr.transitionEndSupported()?this.$decorator.css({"-ms-transform":"scale("+e+")","-moz-transform":"scale("+e+")","-webkit-transform":"scale("+e+")",transform:"scale("+e+")"}).addClass("ripple-on").data("animating","on").data("mousedown","on"):this.$decorator.animate({width:2*Math.max(this.$element.outerWidth(),this.$element.outerHeight()),height:2*Math.max(this.$element.outerWidth(),this.$element.outerHeight()),"margin-left":-1*Math.max(this.$element.outerWidth(),this.$element.outerHeight()),"margin-top":-1*Math.max(this.$element.outerWidth(),this.$element.outerHeight()),opacity:.2},this.config.duration,function(){t.$decorator.trigger("transitionend")})},t._getNewSize=function(){return Math.max(this.$element.outerWidth(),this.$element.outerHeight())/this.$decorator.outerWidth()*2.5},i._jQueryInterface=function(n){return this.each(function(){var t=yr(this),e=t.data(Cr);e||(e=new i(t,n),t.data(Cr,e))})},i}(),yr.fn[Er]=Dr._jQueryInterface,yr.fn[Er].Constructor=Dr,yr.fn[Er].noConflict=function(){return yr.fn[Er]=Ir,Dr._jQueryInterface},kr=jQuery,Or="bmd."+(Nr="autofill"),$r="bmd"+(Nr.charAt(0).toUpperCase()+Nr.slice(1)),jr=kr.fn[$r],xr={},Fr=function(i){function r(t,e){var n;return(n=i.call(this,t,kr.extend(!0,{},xr,e))||this)._watchLoading(),n._attachEventHandlers(),n}a(r,i);var t=r.prototype;return t.dispose=function(){i.prototype.dispose.call(this,Or)},t._watchLoading=function(){var t=this;setTimeout(function(){clearInterval(t._onLoading)},1e4)},t._onLoading=function(){setInterval(function(){kr("input[type!=checkbox]").each(function(t,e){var n=kr(e);n.val()&&n.val()!==n.attr("value")&&n.trigger("change")})},100)},t._attachEventHandlers=function(){var n=null;kr(document).on("focus","input",function(t){var e=kr(t.currentTarget).closest("form").find("input").not("[type=file]");n=setInterval(function(){e.each(function(t,e){var n=kr(e);n.val()!==n.attr("value")&&n.trigger("change")})},100)}).on("blur",".form-group input",function(){clearInterval(n)})},r._jQueryInterface=function(n){return this.each(function(){var t=kr(this),e=t.data(Or);e||(e=new r(t,n),t.data(Or,e))})},r}(Mr),kr.fn[$r]=Fr._jQueryInterface,kr.fn[$r].Constructor=Fr,kr.fn[$r].noConflict=function(){return kr.fn[$r]=jr,Fr._jQueryInterface};Popper.Defaults.modifiers.computeStyle.gpuAcceleration=!1;var Kr,qr,Vr,Yr,zr,Xr,Zr;Kr=jQuery,Vr="bmd."+(qr="bootstrapMaterialDesign"),Yr=qr,zr=Kr.fn[Yr],Xr={global:{validate:!1,label:{className:"bmd-label-static"}},autofill:{selector:"body"},checkbox:{selector:".checkbox > label > input[type=checkbox]"},checkboxInline:{selector:"label.checkbox-inline > input[type=checkbox]"},collapseInline:{selector:'.bmd-collapse-inline [data-toggle="collapse"]'},drawer:{selector:".bmd-layout-drawer"},file:{selector:"input[type=file]"},radio:{selector:".radio > label > input[type=radio]"},radioInline:{selector:"label.radio-inline > input[type=radio]"},ripples:{selector:[".btn:not(.ripple-none)",".card-image:not(.ripple-none)",".navbar a:not(.ripple-none)",".dropdown-menu a:not(.ripple-none)",".nav-tabs a:not(.ripple-none)",".pagination li:not(.active):not(.disabled) a:not(.ripple-none)",".ripple"]},select:{selector:["select"]},switch:{selector:".switch > label > input[type=checkbox]"},text:{selector:["input:not([type=hidden]):not([type=checkbox]):not([type=radio]):not([type=file]):not([type=button]):not([type=submit]):not([type=reset])"]},textarea:{selector:["textarea"]},arrive:!0,instantiation:["ripples","checkbox","checkboxInline","collapseInline","drawer","radio","radioInline","switch","text","textarea","autofill"]},Zr=function(){function i(t,e){var o=this;this.$element=t,this.config=Kr.extend(!0,{},Xr,e);var s=Kr(document),n=function(t){var e=o.config[t];if(e){var n=o._resolveSelector(e);e=Kr.extend(!0,{},o.config.global,e);var i="bmd"+(""+(t.charAt(0).toUpperCase()+t.slice(1)));try{Kr(n)[i](e),document.arrive&&o.config.arrive&&s.arrive(n,function(){Kr(this)[i](e)})}catch(t){var r="Failed to instantiate component: $('"+n+"')["+i+"]("+e+")";throw console.error(r,t,"\nSelected elements: ",Kr(n)),t}}},i=this.config.instantiation,r=Array.isArray(i),a=0;for(i=r?i:i[Symbol.iterator]();;){var l;if(r){if(a>=i.length)break;l=i[a++]}else{if((a=i.next()).done)break;l=a.value}n(l)}}var t=i.prototype;return t.dispose=function(){this.$element.data(Vr,null),this.$element=null,this.config=null},t._resolveSelector=function(t){var e=t.selector;return Array.isArray(e)&&(e=e.join(", ")),e},i._jQueryInterface=function(n){return this.each(function(){var t=Kr(this),e=t.data(Vr);e||(e=new i(t,n),t.data(Vr,e))})},i}(),Kr.fn[Yr]=Zr._jQueryInterface,Kr.fn[Yr].Constructor=Zr,Kr.fn[Yr].noConflict=function(){return Kr.fn[Yr]=zr,Zr._jQueryInterface}});
/*! =========================================================
 *
 * Material Kit PRO - v2.0.2 (Bootstrap 4.0.0 Final Edition)
 *
 * =========================================================
 *
 * Product Page: https://www.creative-tim.com/product/material-kit-pro
 * Available with purchase of license from http://www.creative-tim.com/product/material-kit-pro
 * Copyright 2017 Creative Tim (https://www.creative-tim.com)
 * License Creative Tim (https://www.creative-tim.com/license)
 *
 * ========================================================= */

var big_image;

$(document).ready(function() {
    BrowserDetect.init();

    // Init Material scripts for buttons ripples, inputs animations etc, more info on the next link https://github.com/FezVrasta/bootstrap-material-design#materialjs
    $('body').bootstrapMaterialDesign();

    window_width = $(window).width();

    $navbar = $('.navbar[color-on-scroll]');
    scroll_distance = $navbar.attr('color-on-scroll') || 500;

    $navbar_collapse = $('.navbar').find('.navbar-collapse');

    //  Activate the Tooltips
    $('[data-toggle="tooltip"], [rel="tooltip"]').tooltip();


    // FileInput
    $('.form-file-simple .inputFileVisible').click(function() {
        $(this).siblings('.inputFileHidden').trigger('click');
    });

    $('.form-file-simple .inputFileHidden').change(function() {
        var filename = $(this).val().replace(/C:\\fakepath\\/i, '');
        $(this).siblings('.inputFileVisible').val(filename);
    });

    $('.form-file-multiple .inputFileVisible, .form-file-multiple .input-group-btn').click(function() {
        $(this).parent().parent().find('.inputFileHidden').trigger('click');
        $(this).parent().parent().addClass('is-focused');
    });

    $('.form-file-multiple .inputFileHidden').change(function() {
        var names = '';
        for (var i = 0; i < $(this).get(0).files.length; ++i) {
            if (i < $(this).get(0).files.length - 1) {
                names += $(this).get(0).files.item(i).name + ',';
            } else {
                names += $(this).get(0).files.item(i).name;
            }
        }
        $(this).siblings('.input-group').find('.inputFileVisible').val(names);
    });

    $('.form-file-multiple .btn').on('focus', function() {
        $(this).parent().siblings().trigger('focus');
    });

    $('.form-file-multiple .btn').on('focusout', function() {
        $(this).parent().siblings().trigger('focusout');
    });

    //    Activate bootstrap-select
    if ($(".selectpicker").length != 0) {
        $(".selectpicker").selectpicker();
    }

    // Activate Popovers
    $('[data-toggle="popover"]').popover();

    // Active Carousel
    $('.carousel').carousel({
        interval: 3000
    });

    //Activate tags
    // we style the badges with our colors
    var tagClass = $('.tagsinput').data('color');

    if ($(".tagsinput").length != 0) {
        $('.tagsinput').tagsinput();
    }

    $('.bootstrap-tagsinput').addClass('' + tagClass + '-badge');

    if ($('.navbar-color-on-scroll').length != 0) {
        $(window).on('scroll', materialKit.checkScrollForTransparentNavbar);
    }

    materialKit.checkScrollForTransparentNavbar();

    if (window_width >= 768) {
        big_image = $('.page-header[data-parallax="true"]');
        if (big_image.length != 0) {
            $(window).on('scroll', materialKit.checkScrollForParallax);
        }

    }
});

$(window).on("load", function() {
    //initialise rotating cards
    materialKit.initRotateCard();

    //initialise colored shadow
    materialKit.initColoredShadows();
});

$(document).on('click', '.card-rotate .btn-rotate', function() {
    var $rotating_card_container = $(this).closest('.rotating-card-container');

    if ($rotating_card_container.hasClass('hover')) {
        $rotating_card_container.removeClass('hover');
    } else {
        $rotating_card_container.addClass('hover');
    }
});

$(document).on('click', '.navbar-toggler', function() {
    $toggle = $(this);

    if (materialKit.misc.navbar_menu_visible == 1) {
        $('html').removeClass('nav-open');
        materialKit.misc.navbar_menu_visible = 0;
        $('#bodyClick').remove();
        setTimeout(function() {
            $toggle.removeClass('toggled');
        }, 550);

        $('html').removeClass('nav-open-absolute');
    } else {
        setTimeout(function() {
            $toggle.addClass('toggled');
        }, 580);


        div = '<div id="bodyClick"></div>';
        $(div).appendTo("body").click(function() {
            $('html').removeClass('nav-open');

            if ($('nav').hasClass('navbar-absolute')) {
                $('html').removeClass('nav-open-absolute');
            }
            materialKit.misc.navbar_menu_visible = 0;
            $('#bodyClick').remove();
            setTimeout(function() {
                $toggle.removeClass('toggled');
            }, 550);
        });

        if ($('nav').hasClass('navbar-absolute')) {
            $('html').addClass('nav-open-absolute');
        }

        $('html').addClass('nav-open');
        materialKit.misc.navbar_menu_visible = 1;
    }
});

$(window).on('resize', function() {
    materialKit.initRotateCard();
});

materialKit = {
    misc: {
        navbar_menu_visible: 0,
        window_width: 0,
        transparent: true,
        colored_shadows: true,
        fixedTop: false,
        navbar_initialized: false,
        isWindow: document.documentMode || /Edge/.test(navigator.userAgent)
    },

    checkScrollForParallax: function() {
        oVal = ($(window).scrollTop() / 3);
        big_image.css({
            'transform': 'translate3d(0,' + oVal + 'px,0)',
            '-webkit-transform': 'translate3d(0,' + oVal + 'px,0)',
            '-ms-transform': 'translate3d(0,' + oVal + 'px,0)',
            '-o-transform': 'translate3d(0,' + oVal + 'px,0)'
        });
    },

    initFormExtendedDatetimepickers: function() {
        $('.datetimepicker').datetimepicker({
            icons: {
                time: "fa fa-clock-o",
                date: "fa fa-calendar",
                up: "fa fa-chevron-up",
                down: "fa fa-chevron-down",
                previous: 'fa fa-chevron-left',
                next: 'fa fa-chevron-right',
                today: 'fa fa-screenshot',
                clear: 'fa fa-trash',
                close: 'fa fa-remove'
            }
        });

        $('.datepicker').datetimepicker({
            format: 'MM/DD/YYYY',
            icons: {
                time: "fa fa-clock-o",
                date: "fa fa-calendar",
                up: "fa fa-chevron-up",
                down: "fa fa-chevron-down",
                previous: 'fa fa-chevron-left',
                next: 'fa fa-chevron-right',
                today: 'fa fa-screenshot',
                clear: 'fa fa-trash',
                close: 'fa fa-remove'
            }
        });

        $('.timepicker').datetimepicker({
            //          format: 'H:mm',    // use this format if you want the 24hours timepicker
            format: 'h:mm A', //use this format if you want the 12hours timpiecker with AM/PM toggle
            icons: {
                time: "fa fa-clock-o",
                date: "fa fa-calendar",
                up: "fa fa-chevron-up",
                down: "fa fa-chevron-down",
                previous: 'fa fa-chevron-left',
                next: 'fa fa-chevron-right',
                today: 'fa fa-screenshot',
                clear: 'fa fa-trash',
                close: 'fa fa-remove'

            }
        });
    },


    initSliders: function() {
        // Sliders for demo purpose
        var slider = document.getElementById('sliderRegular');

        noUiSlider.create(slider, {
            start: 40,
            connect: [true, false],
            range: {
                min: 0,
                max: 100
            }
        });

        var slider2 = document.getElementById('sliderDouble');

        noUiSlider.create(slider2, {
            start: [20, 60],
            connect: true,
            range: {
                min: 0,
                max: 100
            }
        });
    },


    initColoredShadows: function() {
        if (materialKit.misc.colored_shadows == true) {
            if (!(BrowserDetect.browser == 'Explorer' && BrowserDetect.version <= 12)) {
                $('.card:not([data-colored-shadow="false"]) .card-header-image').each(function() {
                    $card_img = $(this);

                    is_on_dark_screen = $(this).closest('.section-dark, .section-image').length;

                    // we block the generator of the colored shadows on dark sections, because they are not natural
                    if (is_on_dark_screen == 0) {
                        var img_source = $card_img.find('img').attr('src');
                        var is_rotating = $card_img.closest('.card-rotate').length == 1 ? true : false;
                        var $append_div = $card_img;

                        var colored_shadow_div = $('<div class="colored-shadow"/>');

                        if (is_rotating) {
                            var card_image_height = $card_img.height();
                            var card_image_width = $card_img.width();

                            $(this).find('.back').css({
                                'height': card_image_height + 'px',
                                'width': card_image_width + 'px'
                            });
                            $append_div = $card_img.find('.front');
                        }

                        colored_shadow_div.css({
                            'background-image': 'url(' + img_source + ')'
                        }).appendTo($append_div);

                        if ($card_img.width() > 700) {
                            colored_shadow_div.addClass('colored-shadow-big');
                        }

                        setTimeout(function() {
                            colored_shadow_div.css('opacity', 1);
                        }, 200);
                    }

                });
            }
        }
    },

    initRotateCard: debounce(function() {
        $('.rotating-card-container .card-rotate').each(function() {
            var $this = $(this);

            var card_width = $(this).parent().width();
            var card_height = $(this).find('.front .card-body').outerHeight();

            $this.parent().css({
                'height': card_height + 'px',
                'margin-bottom': 30 + 'px'
            });

            $this.find('.front').css({
                'height': card_height + 35 + 'px',
                'width': card_width + 'px',
            });

            $this.find('.back').css({
                'height': card_height + 35 + 'px',
                'width': card_width + 'px',
            });
        });
    }, 50),

    checkScrollForTransparentNavbar: debounce(function() {
        if ($(document).scrollTop() > scroll_distance) {
            if (materialKit.misc.transparent) {
                materialKit.misc.transparent = false;
                $('.navbar-color-on-scroll').removeClass('navbar-transparent');
            }
        } else {
            if (!materialKit.misc.transparent) {
                materialKit.misc.transparent = true;
                $('.navbar-color-on-scroll').addClass('navbar-transparent');
            }
        }
    }, 17)
};
// Returns a function, that, as long as it continues to be invoked, will not
// be triggered. The function will be called after it stops being called for
// N milliseconds. If `immediate` is passed, trigger the function on the
// leading edge, instead of the trailing.

function debounce(func, wait, immediate) {
    var timeout;
    return function() {
        var context = this,
            args = arguments;
        clearTimeout(timeout);
        timeout = setTimeout(function() {
            timeout = null;
            if (!immediate) func.apply(context, args);
        }, wait);
        if (immediate && !timeout) func.apply(context, args);
    };
}

var BrowserDetect = {
    init: function() {
        this.browser = this.searchString(this.dataBrowser) || "Other";
        this.version = this.searchVersion(navigator.userAgent) || this.searchVersion(navigator.appVersion) || "Unknown";
    },
    searchString: function(data) {
        for (var i = 0; i < data.length; i++) {
            var dataString = data[i].string;
            this.versionSearchString = data[i].subString;

            if (dataString.indexOf(data[i].subString) !== -1) {
                return data[i].identity;
            }
        }
    },
    searchVersion: function(dataString) {
        var index = dataString.indexOf(this.versionSearchString);
        if (index === -1) {
            return;
        }

        var rv = dataString.indexOf("rv:");
        if (this.versionSearchString === "Trident" && rv !== -1) {
            return parseFloat(dataString.substring(rv + 3));
        } else {
            return parseFloat(dataString.substring(index + this.versionSearchString.length + 1));
        }
    },

    dataBrowser: [{
            string: navigator.userAgent,
            subString: "Chrome",
            identity: "Chrome"
        },
        {
            string: navigator.userAgent,
            subString: "MSIE",
            identity: "Explorer"
        },
        {
            string: navigator.userAgent,
            subString: "Trident",
            identity: "Explorer"
        },
        {
            string: navigator.userAgent,
            subString: "Firefox",
            identity: "Firefox"
        },
        {
            string: navigator.userAgent,
            subString: "Safari",
            identity: "Safari"
        },
        {
            string: navigator.userAgent,
            subString: "Opera",
            identity: "Opera"
        }
    ]

};

var better_browser = '<div class="container"><div class="better-browser row"><div class="col-md-2"></div><div class="col-md-8"><h3>We are sorry but it looks like your Browser doesn\'t support our website Features. In order to get the full experience please download a new version of your favourite browser.</h3></div><div class="col-md-2"></div><br><div class="col-md-4"><a href="https://www.mozilla.org/ro/firefox/new/" class="btn btn-warning">Mozilla</a><br></div><div class="col-md-4"><a href="https://www.google.com/chrome/browser/desktop/index.html" class="btn ">Chrome</a><br></div><div class="col-md-4"><a href="http://windows.microsoft.com/en-us/internet-explorer/ie-11-worldwide-languages" class="btn">Internet Explorer</a><br></div><br><br><h4>Thank you!</h4></div></div>';
var big_image;function debounce(a,i,r){var n;return function(){var e=this,t=arguments;clearTimeout(n),n=setTimeout(function(){n=null,r||a.apply(e,t)},i),r&&!n&&a.apply(e,t)}}$(document).ready(function(){BrowserDetect.init(),$("body").bootstrapMaterialDesign(),window_width=$(window).width(),$navbar=$(".navbar[color-on-scroll]"),scroll_distance=$navbar.attr("color-on-scroll")||500,$navbar_collapse=$(".navbar").find(".navbar-collapse"),$('[data-toggle="tooltip"], [rel="tooltip"]').tooltip(),$(".form-file-simple .inputFileVisible").click(function(){$(this).siblings(".inputFileHidden").trigger("click")}),$(".form-file-simple .inputFileHidden").change(function(){var e=$(this).val().replace(/C:\\fakepath\\/i,"");$(this).siblings(".inputFileVisible").val(e)}),$(".form-file-multiple .inputFileVisible, .form-file-multiple .input-group-btn").click(function(){$(this).parent().parent().find(".inputFileHidden").trigger("click"),$(this).parent().parent().addClass("is-focused")}),$(".form-file-multiple .inputFileHidden").change(function(){for(var e="",t=0;t<$(this).get(0).files.length;++t)t<$(this).get(0).files.length-1?e+=$(this).get(0).files.item(t).name+",":e+=$(this).get(0).files.item(t).name;$(this).siblings(".input-group").find(".inputFileVisible").val(e)}),$(".form-file-multiple .btn").on("focus",function(){$(this).parent().siblings().trigger("focus")}),$(".form-file-multiple .btn").on("focusout",function(){$(this).parent().siblings().trigger("focusout")}),0!=$(".selectpicker").length&&$(".selectpicker").selectpicker(),$('[data-toggle="popover"]').popover(),$(".carousel").carousel({interval:3e3});var e=$(".tagsinput").data("color");0!=$(".tagsinput").length&&$(".tagsinput").tagsinput(),$(".bootstrap-tagsinput").addClass(e+"-badge"),0!=$(".navbar-color-on-scroll").length&&$(window).on("scroll",materialKit.checkScrollForTransparentNavbar),materialKit.checkScrollForTransparentNavbar(),768<=window_width&&0!=(big_image=$('.page-header[data-parallax="true"]')).length&&$(window).on("scroll",materialKit.checkScrollForParallax)}),$(window).on("load",function(){materialKit.initRotateCard(),materialKit.initColoredShadows()}),$(document).on("click",".card-rotate .btn-rotate",function(){var e=$(this).closest(".rotating-card-container");e.hasClass("hover")?e.removeClass("hover"):e.addClass("hover")}),$(document).on("click",".navbar-toggler",function(){$toggle=$(this),1==materialKit.misc.navbar_menu_visible?($("html").removeClass("nav-open"),materialKit.misc.navbar_menu_visible=0,$("#bodyClick").remove(),setTimeout(function(){$toggle.removeClass("toggled")},550),$("html").removeClass("nav-open-absolute")):(setTimeout(function(){$toggle.addClass("toggled")},580),div='<div id="bodyClick"></div>',$(div).appendTo("body").click(function(){$("html").removeClass("nav-open"),$("nav").hasClass("navbar-absolute")&&$("html").removeClass("nav-open-absolute"),materialKit.misc.navbar_menu_visible=0,$("#bodyClick").remove(),setTimeout(function(){$toggle.removeClass("toggled")},550)}),$("nav").hasClass("navbar-absolute")&&$("html").addClass("nav-open-absolute"),$("html").addClass("nav-open"),materialKit.misc.navbar_menu_visible=1)}),$(window).on("resize",function(){materialKit.initRotateCard()}),materialKit={misc:{navbar_menu_visible:0,window_width:0,transparent:!0,colored_shadows:!0,fixedTop:!1,navbar_initialized:!1,isWindow:document.documentMode||/Edge/.test(navigator.userAgent)},checkScrollForParallax:function(){oVal=$(window).scrollTop()/3,big_image.css({transform:"translate3d(0,"+oVal+"px,0)","-webkit-transform":"translate3d(0,"+oVal+"px,0)","-ms-transform":"translate3d(0,"+oVal+"px,0)","-o-transform":"translate3d(0,"+oVal+"px,0)"})},initFormExtendedDatetimepickers:function(){$(".datetimepicker").datetimepicker({icons:{time:"fa fa-clock-o",date:"fa fa-calendar",up:"fa fa-chevron-up",down:"fa fa-chevron-down",previous:"fa fa-chevron-left",next:"fa fa-chevron-right",today:"fa fa-screenshot",clear:"fa fa-trash",close:"fa fa-remove"}}),$(".datepicker").datetimepicker({format:"MM/DD/YYYY",icons:{time:"fa fa-clock-o",date:"fa fa-calendar",up:"fa fa-chevron-up",down:"fa fa-chevron-down",previous:"fa fa-chevron-left",next:"fa fa-chevron-right",today:"fa fa-screenshot",clear:"fa fa-trash",close:"fa fa-remove"}}),$(".timepicker").datetimepicker({format:"h:mm A",icons:{time:"fa fa-clock-o",date:"fa fa-calendar",up:"fa fa-chevron-up",down:"fa fa-chevron-down",previous:"fa fa-chevron-left",next:"fa fa-chevron-right",today:"fa fa-screenshot",clear:"fa fa-trash",close:"fa fa-remove"}})},initSliders:function(){var e=document.getElementById("sliderRegular");noUiSlider.create(e,{start:40,connect:[!0,!1],range:{min:0,max:100}});var t=document.getElementById("sliderDouble");noUiSlider.create(t,{start:[20,60],connect:!0,range:{min:0,max:100}})},initColoredShadows:function(){1==materialKit.misc.colored_shadows&&("Explorer"==BrowserDetect.browser&&BrowserDetect.version<=12||$('.card:not([data-colored-shadow="false"]) .card-header-image').each(function(){if($card_img=$(this),is_on_dark_screen=$(this).closest(".section-dark, .section-image").length,0==is_on_dark_screen){var e=$card_img.find("img").attr("src"),t=1==$card_img.closest(".card-rotate").length,a=$card_img,i=$('<div class="colored-shadow"/>');if(t){var r=$card_img.height(),n=$card_img.width();$(this).find(".back").css({height:r+"px",width:n+"px"}),a=$card_img.find(".front")}i.css({"background-image":"url("+e+")"}).appendTo(a),700<$card_img.width()&&i.addClass("colored-shadow-big"),setTimeout(function(){i.css("opacity",1)},200)}}))},initRotateCard:debounce(function(){$(".rotating-card-container .card-rotate").each(function(){var e=$(this),t=$(this).parent().width(),a=$(this).find(".front .card-body").outerHeight();e.parent().css({height:a+"px","margin-bottom":"30px"}),e.find(".front").css({height:a+35+"px",width:t+"px"}),e.find(".back").css({height:a+35+"px",width:t+"px"})})},50),checkScrollForTransparentNavbar:debounce(function(){$(document).scrollTop()>scroll_distance?materialKit.misc.transparent&&(materialKit.misc.transparent=!1,$(".navbar-color-on-scroll").removeClass("navbar-transparent")):materialKit.misc.transparent||(materialKit.misc.transparent=!0,$(".navbar-color-on-scroll").addClass("navbar-transparent"))},17)};var BrowserDetect={init:function(){this.browser=this.searchString(this.dataBrowser)||"Other",this.version=this.searchVersion(navigator.userAgent)||this.searchVersion(navigator.appVersion)||"Unknown"},searchString:function(e){for(var t=0;t<e.length;t++){var a=e[t].string;if(this.versionSearchString=e[t].subString,-1!==a.indexOf(e[t].subString))return e[t].identity}},searchVersion:function(e){var t=e.indexOf(this.versionSearchString);if(-1!==t){var a=e.indexOf("rv:");return"Trident"===this.versionSearchString&&-1!==a?parseFloat(e.substring(a+3)):parseFloat(e.substring(t+this.versionSearchString.length+1))}},dataBrowser:[{string:navigator.userAgent,subString:"Chrome",identity:"Chrome"},{string:navigator.userAgent,subString:"MSIE",identity:"Explorer"},{string:navigator.userAgent,subString:"Trident",identity:"Explorer"},{string:navigator.userAgent,subString:"Firefox",identity:"Firefox"},{string:navigator.userAgent,subString:"Safari",identity:"Safari"},{string:navigator.userAgent,subString:"Opera",identity:"Opera"}]},better_browser='<div class="container"><div class="better-browser row"><div class="col-md-2"></div><div class="col-md-8"><h3>We are sorry but it looks like your Browser doesn\'t support our website Features. In order to get the full experience please download a new version of your favourite browser.</h3></div><div class="col-md-2"></div><br><div class="col-md-4"><a href="https://www.mozilla.org/ro/firefox/new/" class="btn btn-warning">Mozilla</a><br></div><div class="col-md-4"><a href="https://www.google.com/chrome/browser/desktop/index.html" class="btn ">Chrome</a><br></div><div class="col-md-4"><a href="http://windows.microsoft.com/en-us/internet-explorer/ie-11-worldwide-languages" class="btn">Internet Explorer</a><br></div><br><br><h4>Thank you!</h4></div></div>';
window.onresize=()=>{
    responsiveFooter();
};

$( document ).ready(function() {
    responsiveFooter();
});

/*
responsive footer
=========================================================
 */

function responsiveFooter() {
    if(window.innerWidth<780) {
        $("#footer-main-content").addClass("responsive-class");
        $('#copyright').addClass('responsive-copyright');
    }
    else{
        $("#footer-main-content").removeClass("responsive-class");
        $('#copyright').removeClass('responsive-copyright');
    }
}


//acordian

let createAccordian = (accordianElem)=>{
    if(accordianElem.is( ":hidden" ))
        accordianElem.slideDown();
    else
        accordianElem.hide("slow");
};

$(document).ready(function(){
    $(".accordian-element").hide();
    $(".accordian-title").click(function(){
        createAccordian($(this).next());
    });
});



function responsiveClass(target, cssClass, flag) {
    $(document).ready(function () {
        if (window.innerWidth < 780 === flag)
            $(target).addClass(cssClass);
        else
            $(target).removeClass(cssClass);
    });

    window.onresize = () => {
        if (window.innerWidth < 780 === flag)
            $(target).addClass(cssClass);
        else
            $(target).removeClass(cssClass);
    }
}



//share
SocialShareKit.init({
    twitter: {
        title: 'FINA LLC',
        via: 'fina2.net'
    },
    onBeforeOpen: function (targetElement, network, paramsObj) {
        console.log(arguments);
    },
    onOpen: function (targetElement, network, url, popupWindow) {
        console.log(arguments);
    },
    onClose: function (targetElement, network, url, popupWindow) {
        console.log(arguments);
    }
});



function myFunction(){var n=document.getElementById("social-links-container");"social-links-class"===n.className?n.className="social-links-class-response":n.className="social-links-class"}var createAccordian=function(n){n.is(":hidden")?n.slideDown():n.hide("slow")};$(document).ready(function(){$(".accordian-element").hide(),$(".accordian-title").click(function(){createAccordian($(this).next())})}),$(document).ready(function(){$("#lang_en").click(function(){$(this).addClass("lang-btn"),$("#lang_ka").removeClass("lang-btn")}),$("#lang_ka").click(function(){$(this).addClass("lang-btn"),$("#lang_en").removeClass("lang-btn")})});
// Chart.js scripts
// -- Set new default font family and font color to mimic Bootstrap's default styling
Chart.defaults.global.defaultFontFamily = '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
Chart.defaults.global.defaultFontColor = '#292b2c';
// -- Area Chart Example
var ctx = document.getElementById("myAreaChart");
var myLineChart = new Chart(ctx, {
  type: 'line',
  data: {
    labels: ["Mar 1", "Mar 2", "Mar 3", "Mar 4", "Mar 5", "Mar 6", "Mar 7", "Mar 8", "Mar 9", "Mar 10", "Mar 11", "Mar 12", "Mar 13"],
    datasets: [{
      label: "Sessions",
      lineTension: 0.3,
      backgroundColor: "rgba(2,117,216,0.2)",
      borderColor: "rgba(2,117,216,1)",
      pointRadius: 5,
      pointBackgroundColor: "rgba(2,117,216,1)",
      pointBorderColor: "rgba(255,255,255,0.8)",
      pointHoverRadius: 5,
      pointHoverBackgroundColor: "rgba(2,117,216,1)",
      pointHitRadius: 20,
      pointBorderWidth: 2,
      data: [10000, 30162, 26263, 18394, 18287, 28682, 31274, 33259, 25849, 24159, 32651, 31984, 38451],
    }],
  },
  options: {
    scales: {
      xAxes: [{
        time: {
          unit: 'date'
        },
        gridLines: {
          display: false
        },
        ticks: {
          maxTicksLimit: 7
        }
      }],
      yAxes: [{
        ticks: {
          min: 0,
          max: 40000,
          maxTicksLimit: 5
        },
        gridLines: {
          color: "rgba(0, 0, 0, .125)",
        }
      }],
    },
    legend: {
      display: false
    }
  }
});
// -- Bar Chart Example
var ctx = document.getElementById("myBarChart");
var myLineChart = new Chart(ctx, {
  type: 'bar',
  data: {
    labels: ["January", "February", "March", "April", "May", "June"],
    datasets: [{
      label: "Revenue",
      backgroundColor: "rgba(2,117,216,1)",
      borderColor: "rgba(2,117,216,1)",
      data: [4215, 5312, 6251, 7841, 9821, 14984],
    }],
  },
  options: {
    scales: {
      xAxes: [{
        time: {
          unit: 'month'
        },
        gridLines: {
          display: false
        },
        ticks: {
          maxTicksLimit: 6
        }
      }],
      yAxes: [{
        ticks: {
          min: 0,
          max: 15000,
          maxTicksLimit: 5
        },
        gridLines: {
          display: true
        }
      }],
    },
    legend: {
      display: false
    }
  }
});
// -- Pie Chart Example
var ctx = document.getElementById("myPieChart");
var myPieChart = new Chart(ctx, {
  type: 'pie',
  data: {
    labels: ["Blue", "Red", "Yellow", "Green"],
    datasets: [{
      data: [12.21, 15.58, 11.25, 8.32],
      backgroundColor: ['#007bff', '#dc3545', '#ffc107', '#28a745'],
    }],
  },
});

Chart.defaults.global.defaultFontFamily='-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif',Chart.defaults.global.defaultFontColor="#292b2c";var ctx=document.getElementById("myAreaChart"),myLineChart=new Chart(ctx,{type:"line",data:{labels:["Mar 1","Mar 2","Mar 3","Mar 4","Mar 5","Mar 6","Mar 7","Mar 8","Mar 9","Mar 10","Mar 11","Mar 12","Mar 13"],datasets:[{label:"Sessions",lineTension:.3,backgroundColor:"rgba(2,117,216,0.2)",borderColor:"rgba(2,117,216,1)",pointRadius:5,pointBackgroundColor:"rgba(2,117,216,1)",pointBorderColor:"rgba(255,255,255,0.8)",pointHoverRadius:5,pointHoverBackgroundColor:"rgba(2,117,216,1)",pointHitRadius:20,pointBorderWidth:2,data:[1e4,30162,26263,18394,18287,28682,31274,33259,25849,24159,32651,31984,38451]}]},options:{scales:{xAxes:[{time:{unit:"date"},gridLines:{display:!1},ticks:{maxTicksLimit:7}}],yAxes:[{ticks:{min:0,max:4e4,maxTicksLimit:5},gridLines:{color:"rgba(0, 0, 0, .125)"}}]},legend:{display:!1}}}),myPieChart=(ctx=document.getElementById("myBarChart"),myLineChart=new Chart(ctx,{type:"bar",data:{labels:["January","February","March","April","May","June"],datasets:[{label:"Revenue",backgroundColor:"rgba(2,117,216,1)",borderColor:"rgba(2,117,216,1)",data:[4215,5312,6251,7841,9821,14984]}]},options:{scales:{xAxes:[{time:{unit:"month"},gridLines:{display:!1},ticks:{maxTicksLimit:6}}],yAxes:[{ticks:{min:0,max:15e3,maxTicksLimit:5},gridLines:{display:!0}}]},legend:{display:!1}}}),ctx=document.getElementById("myPieChart"),new Chart(ctx,{type:"pie",data:{labels:["Blue","Red","Yellow","Green"],datasets:[{data:[12.21,15.58,11.25,8.32],backgroundColor:["#007bff","#dc3545","#ffc107","#28a745"]}]}}));
// Call the dataTables jQuery plugin
$(document).ready(function() {
  $('#dataTable').DataTable();
});

$(document).ready(function(){$("#dataTable").DataTable()});
(function($) {
  "use strict"; // Start of use strict
  // Configure tooltips for collapsed side navigation
  $('.navbar-sidenav [data-toggle="tooltip"]').tooltip({
    template: '<div class="tooltip navbar-sidenav-tooltip" role="tooltip" style="pointer-events: none;"><div class="arrow"></div><div class="tooltip-inner"></div></div>'
  })
  // Toggle the side navigation
  $("#sidenavToggler").click(function(e) {
    e.preventDefault();
    $("body").toggleClass("sidenav-toggled");
    $(".navbar-sidenav .nav-link-collapse").addClass("collapsed");
    $(".navbar-sidenav .sidenav-second-level, .navbar-sidenav .sidenav-third-level").removeClass("show");
  });
  // Force the toggled class to be removed when a collapsible nav link is clicked
  $(".navbar-sidenav .nav-link-collapse").click(function(e) {
    e.preventDefault();
    $("body").removeClass("sidenav-toggled");
  });
  // Prevent the content wrapper from scrolling when the fixed side navigation hovered over
  $('body.fixed-nav .navbar-sidenav, body.fixed-nav .sidenav-toggler, body.fixed-nav .navbar-collapse').on('mousewheel DOMMouseScroll', function(e) {
    var e0 = e.originalEvent,
      delta = e0.wheelDelta || -e0.detail;
    this.scrollTop += (delta < 0 ? 1 : -1) * 30;
    e.preventDefault();
  });
  // Scroll to top button appear
  $(document).scroll(function() {
    var scrollDistance = $(this).scrollTop();
    if (scrollDistance > 100) {
      $('.scroll-to-top').fadeIn();
    } else {
      $('.scroll-to-top').fadeOut();
    }
  });
  // Configure tooltips globally
  $('[data-toggle="tooltip"]').tooltip()
  // Smooth scrolling using jQuery easing
  $(document).on('click', 'a.scroll-to-top', function(event) {
    var $anchor = $(this);
    $('html, body').stop().animate({
      scrollTop: ($($anchor.attr('href')).offset().top)
    }, 1000, 'easeInOutExpo');
    event.preventDefault();
  });
})(jQuery); // End of use strict

!function(t){"use strict";t('.navbar-sidenav [data-toggle="tooltip"]').tooltip({template:'<div class="tooltip navbar-sidenav-tooltip" role="tooltip" style="pointer-events: none;"><div class="arrow"></div><div class="tooltip-inner"></div></div>'}),t("#sidenavToggler").click(function(e){e.preventDefault(),t("body").toggleClass("sidenav-toggled"),t(".navbar-sidenav .nav-link-collapse").addClass("collapsed"),t(".navbar-sidenav .sidenav-second-level, .navbar-sidenav .sidenav-third-level").removeClass("show")}),t(".navbar-sidenav .nav-link-collapse").click(function(e){e.preventDefault(),t("body").removeClass("sidenav-toggled")}),t("body.fixed-nav .navbar-sidenav, body.fixed-nav .sidenav-toggler, body.fixed-nav .navbar-collapse").on("mousewheel DOMMouseScroll",function(e){var o=e.originalEvent,t=o.wheelDelta||-o.detail;this.scrollTop+=30*(t<0?1:-1),e.preventDefault()}),t(document).scroll(function(){100<t(this).scrollTop()?t(".scroll-to-top").fadeIn():t(".scroll-to-top").fadeOut()}),t('[data-toggle="tooltip"]').tooltip(),t(document).on("click","a.scroll-to-top",function(e){var o=t(this);t("html, body").stop().animate({scrollTop:t(o.attr("href")).offset().top},1e3,"easeInOutExpo"),e.preventDefault()})}(jQuery);
var SocialShareKit=(function(){var supportsShare=/(twitter|facebook|google-plus|pinterest|tumblr|vk|linkedin|buffer|email)/,sep='*|*',wrap,_wrap;_wrap=function(opts){var options=opts||{},selector=options.selector||'.ssk-share';this.nodes=$(selector);this.options=options;};_wrap.prototype={share:function(){var els=this.nodes,options=this.options,urlsToCount={};var _init=function(){if(!els.length)return;each(els,function(el){var network=elSupportsShare(el),uniqueKey;if(!network){return;}if(el.getAttribute('data-ssk-ready'))return;el.setAttribute('data-ssk-ready',true);addEventListener(el,'click',onClick);if(el.parentNode.className.indexOf('ssk-count')!==-1){network=network[0];uniqueKey=network+sep+getShareUrl(options,network,el);if(!(uniqueKey in urlsToCount)){urlsToCount[uniqueKey]=[];}urlsToCount[uniqueKey].push(el);}});processShareCount();};if(options.forceInit===true)_init();else
ready(_init);function onClick(e){var target=preventDefault(e),match=elSupportsShare(target),network=match[0],url;if(!match)return;url=getUrl(options,network,target);if(!url)return;if(window.twttr&&target.getAttribute('href').indexOf('twitter.com/intent/')!==-1){target.setAttribute('href',url);return;}if(network!=='email'){var width,height;if(network==='buffer'){width=800;height=680;}else{width=575;height=400;}var win=winOpen(url,width,height);if(options.onOpen){options.onOpen(target,network,url,win);}if(options.onClose){var closeInt=window.setInterval(function(){if(win.closed!==false){window.clearInterval(closeInt);options.onClose(target,network,url,win);}},250);}}else{document.location=url;}}function processShareCount(){var a,ref;for(a in urlsToCount){ref=a.split(sep);(function(els){getCount(ref[0],ref[1],options,function(cnt){for(var c in els)addCount(els[c],cnt);});})(urlsToCount[a]);}}return this.nodes;}};wrap=function(selector){return new _wrap(selector);};function init(opts){return wrap(opts).share();}function ready(fn){if(document.readyState!='loading'){fn();}else if(document.addEventListener){document.addEventListener('DOMContentLoaded',fn);}else{document.attachEvent('onreadystatechange',function(){if(document.readyState!='loading')fn();});}}function $(selector){return document.querySelectorAll(selector);}function each(elements,fn){for(var i=0;i<elements.length;i++)fn(elements[i],i);}function addEventListener(el,eventName,handler){if(el.addEventListener){el.addEventListener(eventName,handler);}else{el.attachEvent('on'+eventName,function(){handler.call(el);});}}function elSupportsShare(el){return el.className.match(supportsShare);}function preventDefault(e){var evt=e||window.event;if(evt.preventDefault){evt.preventDefault();}else{evt.returnValue=false;evt.cancelBubble=true;}return evt.currentTarget||evt.srcElement;}function winOpen(url,width,height){var win,left,top,opts;if(width&&height){left=(document.documentElement.clientWidth/2-width/2);top=(document.documentElement.clientHeight-height)/2;opts='status=1,resizable=yes'+',width='+width+',height='+height+',top='+top+',left='+left;win=window.open(url,'',opts);}else{win=window.open(url);}win.focus();return win;}function getUrl(options,network,el){var url,dataOpts=getDataOpts(options,network,el),shareUrl=getShareUrl(options,network,el,dataOpts),title=typeof dataOpts['title']!=='undefined'?dataOpts['title']:getTitle(network),text=typeof dataOpts['text']!=='undefined'?dataOpts['text']:getText(network),image=dataOpts['image']?dataOpts['image']:getMetaContent('og:image'),via=typeof dataOpts['via']!=='undefined'?dataOpts['via']:getMetaContent('twitter:site'),paramsObj={shareUrl:shareUrl,title:title,text:text,image:image,via:via,options:options,shareUrlEncoded:function(){return encodeURIComponent(this.shareUrl);}};switch(network){case'facebook':url='https://www.facebook.com/share.php?u='+paramsObj.shareUrlEncoded();break;case'twitter':url='https://twitter.com/intent/tweet?url='+paramsObj.shareUrlEncoded()+'&text='+encodeURIComponent(title+(text&&title?' - ':'')+text);if(via)url+='&via='+via.replace('@','');break;case'google-plus':url='https://plus.google.com/share?url='+paramsObj.shareUrlEncoded();break;case'pinterest':url='https://pinterest.com/pin/create/button/?url='+paramsObj.shareUrlEncoded()+'&description='+encodeURIComponent(text);if(image)url+='&media='+encodeURIComponent(image);break;case'tumblr':url='https://www.tumblr.com/share/link?url='+paramsObj.shareUrlEncoded()+'&name='+encodeURIComponent(title)+'&description='+encodeURIComponent(text);break;case'linkedin':url='https://www.linkedin.com/shareArticle?mini=true&url='+paramsObj.shareUrlEncoded()+'&title='+encodeURIComponent(title)+'&summary='+encodeURIComponent(text);break;case'vk':url='https://vkontakte.ru/share.php?url='+paramsObj.shareUrlEncoded();break;case'buffer':url='https://buffer.com/add?source=button&url='+paramsObj.shareUrlEncoded()+'&text='+encodeURIComponent(text);break;case'email':url='mailto:?subject='+encodeURIComponent(title)+'&body='+encodeURIComponent(title+'\n'+shareUrl+'\n\n'+text+'\n');break;}paramsObj.networkUrl=url;if(options.onBeforeOpen){options.onBeforeOpen(el,network,paramsObj)}return paramsObj.networkUrl;}function getShareUrl(options,network,el,dataOpts){dataOpts=dataOpts||getDataOpts(options,network,el);return dataOpts['url']||window.location.href;}function getTitle(network){var title;if(network=='twitter')title=getMetaContent('twitter:title');return title||document.title;}function getText(network){var text;if(network=='twitter')text=getMetaContent('twitter:description');return text||getMetaContent('description');}function getMetaContent(tagName,attr){var text,tag=$('meta['+(attr?attr:tagName.indexOf('og:')===0?'property':'name')+'="'+tagName+'"]');if(tag.length){text=tag[0].getAttribute('content')||'';}return text||''}function getDataOpts(options,network,el){var validOpts=['url','title','text','image'],opts={},optValue,optKey,dataKey,a,parent=el.parentNode;network=='twitter'&&validOpts.push('via');for(a in validOpts){optKey=validOpts[a];dataKey='data-'+optKey;optValue=el.getAttribute(dataKey)||parent.getAttribute(dataKey)||(options[network]&&typeof options[network][optKey]!='undefined'?options[network][optKey]:options[optKey]);if(typeof optValue!='undefined'){opts[optKey]=optValue;}}return opts;}function addCount(el,cnt){var newEl=document.createElement('div');newEl.innerHTML=cnt;newEl.className='ssk-num';el.appendChild(newEl);}function getCount(network,shareUrl,options,onReady){var url,parseFunc,body,shareUrlEnc=encodeURIComponent(shareUrl);switch(network){case'facebook':url='https://graph.facebook.com/?id='+shareUrlEnc;parseFunc=function(r){return onReady(r.share?r.share.share_count:0);};break;case'twitter':if(options&&options.twitter&&options.twitter.countCallback){options.twitter.countCallback(shareUrl,onReady);}break;case'google-plus':url='https://clients6.google.com/rpc?key=AIzaSyCKSbrvQasunBoV16zDH9R33D88CeLr9gQ';body="[{\"method\":\"pos.plusones.get\",\"id\":\"p\","+"\"params\":{\"id\":\""+shareUrl+"\",\"userId\":\"@viewer\",\"groupId\":\"@self\",\"nolog\":true},"+"\"jsonrpc\":\"2.0\",\"key\":\"p\",\"apiVersion\":\"v1\"}]";parseFunc=function(r){r=JSON.parse(r);if(r.length){return onReady(r[0].result.metadata.globalCounts.count);}};ajax(url,parseFunc,body);return;case'linkedin':url='https://www.linkedin.com/countserv/count/share?url='+shareUrlEnc;parseFunc=function(r){return onReady(r.count);};break;case'pinterest':url='https://api.pinterest.com/v1/urls/count.json?url='+shareUrlEnc;parseFunc=function(r){return onReady(r.count);};break;case'vk':url='https://vk.com/share.php?act=count&url='+shareUrlEnc;parseFunc=function(r){return onReady(r);};break;case'buffer':url='https://api.bufferapp.com/1/links/shares.json?url='+shareUrlEnc;parseFunc=function(r){return onReady(r.shares);};break;}url&&parseFunc&&JSONPRequest(network,url,parseFunc,body);}function ajax(url,callback,body){var request=new XMLHttpRequest();request.onreadystatechange=function(){if(this.readyState===4){if(this.status>=200&&this.status<400){callback(this.responseText);}}};request.open('POST',url,true);request.setRequestHeader('Content-Type','application/json');request.send(body);}function JSONPRequest(network,url,callback){var callbackName='cb_'+network+'_'+Math.round(100000*Math.random()),script=document.createElement('script');window[callbackName]=function(data){try{delete window[callbackName];}catch(e){}document.body.removeChild(script);callback(data);};if(network=='vk'){window['VK']={Share:{count:function(a,b){window[callbackName](b);}}};}else if(network=='google-plus'){window['services']={gplus:{cb:window[callbackName]}};}script.src=url+(url.indexOf('?')>=0?'&':'?')+'callback='+callbackName;document.body.appendChild(script);return true;}return{init:init};})();window.SocialShareKit=SocialShareKit;



$(document).ready(function () {
    $.getJSON("vacancies.json", function(json) {
        for(let i=0; i<json.vacancies.length;i++)

            if(json.vacancies[i].id=="interns"){
                $('.vacancies-head').append(
                    '<div id="' + json.vacancies[i].id + '" class="row padding-top padding-bottom vacancies-card">'
                    + '<div class="col-lg-3 col-sm-3 col-12">'
                    + '<img class="vacancies-img" src="' + json.vacancies[i].img + '">'
                    + '</div>'
                    + '<div class="col-lg-9 col-sm-9 col-12">'
                    + '<div class="vacancies-title">' + json.vacancies[i].title + '</div>'
                    + '<hr class="vacancies-hr">'
                    + '<div class="vacancies-text">' + json.vacancies[i].shortDescription + '</div>'
                    + '</div>'
                    + '<div class="col-sm-9 offset-sm-3 col-12">'
                    + '<div class="text-center">'
                    + '<a href="' + json.vacancies[i].formLink + '" target="_blank" style="color:white!important;"><div class="btn my-btn mr-2"><strong>Application Form</strong></div></a>'
                    + '<div class="btn my-btn vacan-btn"  data-vacanID="' + json.vacancies[i].id + '" data-vacanTitle="' + json.vacancies[i].pageName + '"><strong>Read more</strong></div>'
                    + '</div>'
                    + '</div>'
                    + '</div>'
                );
            }else {

                $('.vacancies-head').append(
                    '<div id="' + json.vacancies[i].id + '" class="row padding-top padding-bottom vacancies-card">'
                    + '<div class="col-lg-3 col-sm-3 col-12">'
                    + '<img class="vacancies-img" src="' + json.vacancies[i].img + '">'
                    + '</div>'
                    + '<div class="col-lg-9 col-sm-9 col-12">'
                    + '<div class="vacancies-title">' + json.vacancies[i].title + '</div>'
                    + '<hr class="vacancies-hr">'
                    + '<div class="vacancies-text">' + json.vacancies[i].shortDescription + '</div>'
                    + '</div>'
                    + '<div class="col-sm-9 offset-sm-3 col-12">'
                    + '<div class="text-center">'
                    + '<a href="' + json.vacancies[i].formLink + '" target="_blank" style="color:white!important;"><div class="btn my-btn mr-2"><strong>Application Form</strong></div></a>'
                    + '<div class="btn my-btn vacan-btn"  data-vacanID="' + json.vacancies[i].id + '" data-vacanTitle="' + json.vacancies[i].pageName + '"><strong>Read more</strong></div>'
                    + '</div>'
                    + '</div>'
                    + '</div>'
                );
            }
    });
});


$(document).on('click',".vacan-btn",function () {
    console.log($(this).attr('data-vacanTitle'))
    window.location = window.location.href.replace('vacancies',$(this).attr('data-vacanTitle'));
    /*console.log($(this).attr('data-vacanID'));
    if($(this).attr('data-vacanID')=="interns"){
        window.location = window.location.href.replace('vacancies','interns');
    }else{
        window.location = updateQueryStringParameter(window.location.href.replace('vacancies','vacancion'), 'vacan',$(this).attr('data-vacanID'));
    }*/
});


/*
function updateQueryStringParameter(uri, key, value) {
    const re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
    const separator = uri.indexOf('?') !== -1 ? "&" : "?";
    if (uri.match(re)) {
        return uri.replace(re, '$1' + key + "=" + value + '$2');
    }
    else {
        return uri + separator + key + "=" + value;
    }
}*/
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
